Config = {maxHeartbeats := 65536, timeout := 10, solverConfig = native, logFile := evalOut.txt}

Testing || Matrix.nonsing_inv_mul_cancel_left : ∀ {m : Type u} {n : Type u'} {α : Type v} [inst : Fintype n] [inst_1 : DecidableEq n] [inst_2 : CommRing α]
  (A : Matrix n n α) (B : Matrix n m α), IsUnit A.det → A⁻¹ * (A * B) = B
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Matrix.instHMulOfFintypeOfMulOfAddCommMonoid`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AlgebraicGeometry.Spec.locallyRingedSpaceObj_sheaf' : ∀ (R : Type u) [inst : CommRing R],
  (AlgebraicGeometry.Spec.locallyRingedSpaceObj (CommRingCat.of R)).sheaf = AlgebraicGeometry.Spec.structureSheaf R
Result.success

Testing || finCongr_symm_apply : ∀ {n m : ℕ} (eq : n = m) (i : Fin m), (finCongr eq).symm i = Fin.cast ⋯ i
Result.autoException ::
Duper saturated

Testing || Filter.map_biInf_eq : ∀ {α : Type u} {β : Type v} {ι : Type w} {f : ι → Filter α} {m : α → β} {p : ι → Prop},
  DirectedOn (f ⁻¹'o fun x1 x2 => x1 ≥ x2) {x | p x} →
    (∃ i, p i) → Filter.map m (⨅ i, ⨅ (_ : p i), f i) = ⨅ i, ⨅ (_ : p i), Filter.map m (f i)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type p i✝ of λ binder contains bound variables

Testing || TopCat.GlueData.preimage_range : ∀ (D : TopCat.GlueData) (i j : D.J), ⇑(D.ι j) ⁻¹' Set.range ⇑(D.ι i) = Set.range ⇑(D.f j i)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.colimit.map_post : ∀ {J : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} J] {C : Type u} [inst_1 : CategoryTheory.Category.{v, u} C]
  {F : CategoryTheory.Functor J C} [inst_2 : CategoryTheory.Limits.HasColimitsOfShape J C]
  {G : CategoryTheory.Functor J C} (α : F ⟶ G) {D : Type u'} [inst_3 : CategoryTheory.Category.{v', u'} D]
  [inst_4 : CategoryTheory.Limits.HasColimitsOfShape J D] (H : CategoryTheory.Functor C D),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.colimit.post F H)
      (H.map (CategoryTheory.Limits.colim.map α)) =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.colim.map (CategoryTheory.whiskerRight α H))
      (CategoryTheory.Limits.colimit.post G H)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_15 x_0).map
  (cifvar_4 x_1 x_2)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Encodable.axiom_of_choice : ∀ {α : Type u_1} {β : α → Type u_2} {R : (x : α) → β x → Prop} [inst : (a : α) → Encodable (β a)]
  [inst : (x : α) → (y : β x) → Decidable (R x y)], (∀ (x : α), ∃ y, R x y) → ∃ f, ∀ (x : α), R x (f x)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type β x_0 of λ binder contains bound variables

Testing || Ordinal.bot_eq_zero : ⊥ = 0
Result.success

Testing || Order.Iio_succ_eq_insert_of_not_isMax : ∀ {α : Type u_1} [inst : LinearOrder α] [inst_1 : SuccOrder α] {a : α},
  ¬IsMax a → Set.Iio (Order.succ a) = insert a (Set.Iio a)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LatticeHom.withTop'_toSupHom : ∀ {α : Type u_3} {β : Type u_4} [inst : Lattice α] [inst_1 : Lattice β] [inst_2 : OrderTop β] (f : LatticeHom α β),
  f.withTop'.toSupHom = f.withTop'
Result.autoException ::
Duper saturated

Testing || List.Pairwise.of_cons : ∀ {α : Type u_1} {a : α} {l : List α} {R : α → α → Prop}, List.Pairwise R (a :: l) → List.Pairwise R l
Result.success

Testing || NumberField.mixedEmbedding.normAtPlace_apply_isReal : ∀ {K : Type u_1} [inst : Field K] {w : NumberField.InfinitePlace K} (hw : w.IsReal)
  (x : NumberField.mixedEmbedding.mixedSpace K), (NumberField.mixedEmbedding.normAtPlace w) x = ‖x.1 ⟨w, hw⟩‖
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Classical.propDecidable
  (cifvar_0 x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Bool.coe_sort_true : (true = true) = True
Result.success

Testing || AlgebraicGeometry.isReduced_of_isOpenImmersion : ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) [H : AlgebraicGeometry.IsOpenImmersion f]
  [inst : AlgebraicGeometry.IsReduced Y], AlgebraicGeometry.IsReduced X
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Pi.mulHom_apply : ∀ {I : Type u} {f : I → Type v} {γ : Type w} [inst : (i : I) → Mul (f i)] [inst_1 : Mul γ] (g : (i : I) → γ →ₙ* f i)
  (x : γ) (i : I), (Pi.mulHom g) x i = (g i) x
Result.autoException ::
Auto.Monomorphization.ConstInst.toExpr :: Unexpected error

Testing || Sbtw.left_mem_image_Ioi : ∀ {R : Type u_1} {V : Type u_2} {P : Type u_4} [inst : LinearOrderedField R] [inst_1 : AddCommGroup V]
  [inst_2 : _root_.Module R V] [inst_3 : AddTorsor V P] {x y z : P},
  Sbtw R x y z → x ∈ ⇑(AffineMap.lineMap z y) '' Set.Ioi 1
Result.success

Testing || Polynomial.sub_comp : ∀ {R : Type u} [inst : Ring R] {p q r : Polynomial R}, (p - q).comp r = p.comp r - q.comp r
Result.success

Testing || Pi.list_prod_apply : ∀ {α : Type u_4} {β : α → Type u_5} [inst : (a : α) → Monoid (β a)] (a : α) (l : List ((a : α) → β a)),
  l.prod a = (List.map (fun f => f a) l).prod
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (¬ ((!0 !1) = (!2 (!3 (λx0 : #3, (x0 !4)) !1)))) is not type correct

Testing || alexDiscEquivPreord_functor : alexDiscEquivPreord.functor = (CategoryTheory.forget₂ AlexDisc TopCat).comp topToPreord
Result.autoException ::
Duper saturated

Testing || Hyperreal.infinitesimal_iff_infinite_inv : ∀ {x : ℝ*}, x ≠ 0 → (x.Infinitesimal ↔ x⁻¹.Infinite)
Result.success

Testing || AlgEquiv.toUnder_hom_right_apply : ∀ {R : CommRingCat} {A B : Type u} [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra (↑R) A]
  [inst_3 : Algebra (↑R) B] (f : A ≃ₐ[↑R] B) (a : A), f.toUnder.hom.right a = f a
Result.autoException ::
Duper saturated

Testing || TensorPower.mul_assoc : ∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]
  {na nb nc : ℕ} (a : TensorPower R na M) (b : TensorPower R nb M) (c : TensorPower R nc M),
  (TensorPower.cast R M ⋯) (GradedMonoid.GMul.mul (GradedMonoid.GMul.mul a b) c) =
    GradedMonoid.GMul.mul a (GradedMonoid.GMul.mul b c)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || IsGroupHom.isNormalSubgroup_ker : ∀ {G : Type u_1} {H : Type u_2} [inst : Group G] [inst_1 : Group H] {f : G → H},
  IsGroupHom f → IsNormalSubgroup (IsGroupHom.ker f)
Result.success

Testing || IntermediateField.pow_mem : ∀ {K : Type u_1} {L : Type u_2} [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (S : IntermediateField K L)
  {x : L}, x ∈ S → ∀ (n : ℤ), x ^ n ∈ S
Result.success

Testing || Module.AEval'_def : ∀ {R : Type u_2} {M : Type u_1} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]
  (φ : M →ₗ[R] M), Module.AEval' φ = Module.AEval R M φ
Result.success

Testing || one_div_lt_neg_one : ∀ {α : Type u_2} [inst : LinearOrderedField α] {a : α}, a < 0 → -1 < a → 1 / a < -1
Result.success

Testing || TensorProduct.tensorQuotEquivQuotSMul_comp_mkQ_lTensor : ∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]
  (I : Ideal R),
  ↑(TensorProduct.tensorQuotEquivQuotSMul M I) ∘ₗ LinearMap.lTensor M (Submodule.mkQ I) =
    (I • ⊤).mkQ ∘ₗ ↑(TensorProduct.rid R M)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || TypeVec.lastFun_toSubtype : ∀ {n : ℕ} {α : TypeVec.{u_1} (n + 1)} (p : α.Arrow (TypeVec.repeat (n + 1) Prop)),
  TypeVec.lastFun (TypeVec.toSubtype p) = id
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: TypeVec.{u_1} (n + 1) is not a `∀`

Testing || CategoryTheory.ShortComplex.SnakeInput.L₂'_X₃ : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Abelian C]
  (S : CategoryTheory.ShortComplex.SnakeInput C), S.L₂'.X₃ = S.L₃.X₂
Result.autoException ::
Duper saturated

Testing || Seminorm.coe_sSup_eq : ∀ {𝕜 : Type u_3} {E : Type u_7} [inst : NormedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : _root_.Module 𝕜 E]
  {s : Set (Seminorm 𝕜 E)}, BddAbove s → ⇑(sSup s) = ⨆ p, ⇑↑p
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_0 } of λ binder contains bound variables

Testing || Equiv.Perm.support_prod_of_pairwise_disjoint : ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Fintype α] (l : List (Equiv.Perm α)),
  List.Pairwise Equiv.Perm.Disjoint l →
    l.prod.support = List.foldr (fun x1 x2 => x1 ⊔ x2) ⊥ (List.map Equiv.Perm.support l)
Result.autoException ::
(deterministic) timeout at `forwardSimpLoop`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.gcd_eq_gcd_image : ∀ {α : Type u_2} {β : Type u_3} [inst : CancelCommMonoidWithZero α] [inst_1 : NormalizedGCDMonoid α] {s : Finset β}
  {f : β → α} [inst_2 : DecidableEq α], s.gcd f = (Finset.image f s).gcd id
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Finset.image x_2 x_3`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Int.sub_zero : ∀ (a : ℤ), a - 0 = a
Result.success

Testing || ENNReal.ofReal_tsum_of_nonneg : ∀ {α : Type u_1} {f : α → ℝ},
  (∀ (n : α), 0 ≤ f n) → Summable f → ENNReal.ofReal (∑' (n : α), f n) = ∑' (n : α), ENNReal.ofReal (f n)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ONote.omega_le_oadd : ∀ (e : ONote) (n : ℕ+) (a : ONote), Ordinal.omega0 ^ e.repr ≤ (e.oadd n a).repr
Result.success

Testing || exists_vector_zero : ∀ {α : Type u_1} (f : Vector3 α 0 → Prop), Exists f ↔ f []
Result.success

Testing || div_pos_iff_of_pos_right : ∀ {α : Type u_2} [inst : LinearOrderedSemifield α] {a b : α}, 0 < b → (0 < a / b ↔ 0 < a)
Result.success

Testing || AlgebraicGeometry.Scheme.pretopology_cover : ∀ {P : CategoryTheory.MorphismProperty AlgebraicGeometry.Scheme} [inst : P.IsMultiplicative] [inst_1 : P.RespectsIso]
  [inst_2 : P.IsStableUnderBaseChange] [inst_3 : AlgebraicGeometry.Scheme.IsJointlySurjectivePreserving P]
  {Y : AlgebraicGeometry.Scheme} (𝒰 : AlgebraicGeometry.Scheme.Cover P Y),
  (AlgebraicGeometry.Scheme.pretopology P).coverings Y (CategoryTheory.Presieve.ofArrows 𝒰.obj 𝒰.map)
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: Set (CategoryTheory.Presieve Y) is not a `∀`

Testing || MultilinearMap.snoc_add : ∀ {R : Type uR} {n : ℕ} {M : Fin n.succ → Type v} {M₂ : Type v₂} [inst : Semiring R]
  [inst_1 : (i : Fin n.succ) → AddCommMonoid (M i)] [inst_2 : AddCommMonoid M₂]
  [inst_3 : (i : Fin n.succ) → _root_.Module R (M i)] [inst_4 : _root_.Module R M₂] (f : MultilinearMap R M M₂)
  (m : (i : Fin n) → M i.castSucc) (x y : M (Fin.last n)), f (Fin.snoc m (x + y)) = f (Fin.snoc m x) + f (Fin.snoc m y)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Function.update x_1 cifvar_12
  (cifvar_6 x_2 x_3)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Nat.Prime.ne_one : ∀ {p : ℕ}, Nat.Prime p → p ≠ 1
Result.success

Testing || Real.tendsto_div_pow_mul_exp_add_atTop : ∀ (b c : ℝ) (n : ℕ), 0 ≠ b → Filter.Tendsto (fun x => x ^ n / (b * Real.exp x + c)) Filter.atTop (nhds 0)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Cardinal.mk_univ_quaternion : ∀ (R : Type u_1) [inst : _root_.One R] [inst_1 : Neg R], Cardinal.mk ↑Set.univ = Cardinal.mk R ^ 4
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type QuaternionAlgebra R x_0
  x_1 of λ binder contains bound variables

Testing || List.Perm.append_cons : ∀ {α : Type u_1} (a : α) {h₁ h₂ t₁ t₂ : List α}, h₁.Perm h₂ → t₁.Perm t₂ → (h₁ ++ a :: t₁).Perm (h₂ ++ a :: t₂)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Functor.Comp.seq_pure : ∀ {F : Type u → Type w} {G : Type v → Type u} [inst : Applicative F] [inst_1 : Applicative G]
  [inst_2 : LawfulApplicative F] [inst_3 : LawfulApplicative G] {α β : Type v} (f : Functor.Comp F G (α → β)) (x : α),
  f <*> pure x = (fun g => g x) <$> f
Result.success

Testing || WeierstrassCurve.Affine.Point.map_id : ∀ {R : Type r} [inst : CommRing R] (W : WeierstrassCurve.Affine R) {F : Type u} [inst_1 : Field F]
  [inst_2 : Algebra R F] (P : WeierstrassCurve.Affine.Point (WeierstrassCurve.baseChange W F)),
  (WeierstrassCurve.Affine.Point.map W (Algebra.ofId F F)) P = P
Result.autoException ::
Duper saturated

Testing || Real.strictConcaveOn_sqrt : StrictConcaveOn ℝ (Set.Ici 0) fun x => √x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || _private.Mathlib.Topology.MetricSpace.GromovHausdorffRealized.0.GromovHausdorff.candidates_dist_bound : ∀ {X : Type u} {Y : Type v} [inst : MetricSpace X] [inst_1 : MetricSpace Y] {f : GromovHausdorff.ProdSpaceFun X Y},
  f ∈ GromovHausdorff.candidates X Y → ∀ {x y : X ⊕ Y}, f (x, y) ≤ ↑(GromovHausdorff.maxVar X Y) * dist x y
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: GromovHausdorff.ProdSpaceFun X Y is not a `∀`

Testing || CategoryTheory.ShortComplex.ShortExact.isIso_f_iff : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  {S : CategoryTheory.ShortComplex C},
  S.ShortExact → ∀ [inst_2 : CategoryTheory.Balanced C], CategoryTheory.IsIso S.f ↔ CategoryTheory.Limits.IsZero S.X₃
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.f`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Duper.rule2bTheorem : ∀ (b : Bool), (!b || b) = true
Result.success

Testing || HasFiniteFPowerSeriesOnBall.changeOrigin : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {p : FormalMultilinearSeries 𝕜 E F} {r : ENNReal} {n : ℕ} {x y : E},
  HasFiniteFPowerSeriesOnBall f p x n r →
    ↑‖y‖₊ < r → HasFiniteFPowerSeriesOnBall f (p.changeOrigin y) (x + y) n (r - ↑‖y‖₊)
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: FormalMultilinearSeries 𝕜 E F is not a `∀`

Testing || String.Iterator.ValidFor.atEnd : ∀ {l r : List Char} {it : String.Iterator}, String.Iterator.ValidFor l r it → (it.atEnd = true ↔ r = [])
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Stream'.WSeq.append_assoc : ∀ {α : Type u} (s t u : Stream'.WSeq α), (s.append t).append u = s.append (t.append u)
Result.autoException ::
Duper saturated

Testing || CategoryTheory.GrothendieckTopology.intersection_covering_iff : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X : C} {S R : CategoryTheory.Sieve X}
  (J : CategoryTheory.GrothendieckTopology C), R ⊓ S ∈ J X ↔ R ∈ J X ∧ S ∈ J X
Result.success

Testing || IsOpen.measure_eq_zero_iff : ∀ {X : Type u_1} [inst : TopologicalSpace X] {m : MeasurableSpace X} (μ : MeasureTheory.Measure X)
  [inst_1 : μ.IsOpenPosMeasure] {U : Set X}, IsOpen U → (μ U = 0 ↔ U = ∅)
Result.success

Testing || AlgebraicGeometry.Scheme.affineBasisCover_is_basis : ∀ (X : AlgebraicGeometry.Scheme),
  TopologicalSpace.IsTopologicalBasis {x | ∃ a, x = Set.range ⇑(X.affineBasisCover.map a).base}
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Inseparable.map : ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {x y : X} {f : X → Y},
  Inseparable x y → Continuous f → Inseparable (f x) (f y)
Result.success

Testing || SchwartzMap.derivCLM_apply : ∀ (𝕜 : Type u_1) {F : Type u_5} [inst : NormedAddCommGroup F] [inst_1 : NormedSpace ℝ F] [inst_2 : RCLike 𝕜]
  [inst_3 : NormedSpace 𝕜 F] [inst_4 : SMulCommClass ℝ 𝕜 F] (f : SchwartzMap ℝ F) (x : ℝ),
  ((SchwartzMap.derivCLM 𝕜) f) x = deriv (⇑f) x
Result.autoException ::
Duper saturated

Testing || NumberField.InfinitePlace.isComplex_smul_iff : ∀ {k : Type u_1} [inst : Field k] {K : Type u_2} [inst_1 : Field K] [inst_2 : Algebra k K] {σ : K ≃ₐ[k] K}
  {w : NumberField.InfinitePlace K}, (σ • w).IsComplex ↔ w.IsComplex
Result.success

Testing || RingHom.FiniteType.of_finite : ∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : CommRing B] {f : A →+* B}, f.Finite → f.FiniteType
Result.autoException ::
Duper saturated

Testing || Ideal.map_jacobson_of_surjective : ∀ {R : Type u} {S : Type v} [inst : Ring R] [inst_1 : Ring S] {I : Ideal R} {f : R →+* S},
  Function.Surjective ⇑f → RingHom.ker f ≤ I → Ideal.map f I.jacobson = (Ideal.map f I).jacobson
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.comp_inf_eq_inf_comp_of_is_total : ∀ {α : Type u_2} {β : Type u_3} {ι : Type u_5} [inst : LinearOrder α] [inst_1 : OrderTop α] {s : Finset ι} {f : ι → α}
  [inst_2 : SemilatticeInf β] [inst_3 : OrderTop β] (g : α → β), Monotone g → g ⊤ = ⊤ → g (s.inf f) = s.inf (g ∘ f)
Result.success

Testing || LinearMap.annihilator_le_of_injective : ∀ {R : Type u_1} {M : Type u_2} {M' : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M]
  [inst_2 : _root_.Module R M] [inst_3 : AddCommMonoid M'] [inst_4 : _root_.Module R M'] (f : M →ₗ[R] M'),
  Function.Injective ⇑f → Module.annihilator R M' ≤ Module.annihilator R M
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || lowerClosure_infs : ∀ {α : Type u_2} [inst : SemilatticeInf α] (s t : Set α), lowerClosure (s ⊼ t) = lowerClosure s ⊓ lowerClosure t
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasureTheory.VectorMeasure.measurable_of_not_zero_le_restrict : ∀ {α : Type u_1} {m : MeasurableSpace α} {M : Type u_3} [inst : TopologicalSpace M] [inst_1 : OrderedAddCommMonoid M]
  (v : MeasureTheory.VectorMeasure α M) {i : Set α},
  ¬MeasureTheory.VectorMeasure.restrict 0 i ≤ v.restrict i → MeasurableSet i
Result.success

Testing || MvPolynomial.eval_X : ∀ {R : Type u} {σ : Type u_1} [inst : CommSemiring R] {f : σ → R} (n : σ),
  (MvPolynomial.eval f) (MvPolynomial.X n) = f n
Result.autoException ::
Duper saturated

Testing || NonUnitalSubring.ext : ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] {S T : NonUnitalSubring R}, (∀ (x : R), x ∈ S ↔ x ∈ T) → S = T
Result.success

Testing || AddSubgroup.mem_iInf : ∀ {G : Type u_1} [inst : AddGroup G] {ι : Sort u_2} {S : ι → AddSubgroup G} {x : G}, x ∈ ⨅ i, S i ↔ ∀ (i : ι), x ∈ S i
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Submonoid.closure_eq_mrange : ∀ {M : Type u_1} [inst : Monoid M] (s : Set M), Submonoid.closure s = MonoidHom.mrange (FreeMonoid.lift Subtype.val)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_0 } of λ binder contains bound variables

Testing || _private.Mathlib.NumberTheory.FermatPsp.0.Nat.b_id_helper : ∀ {a b : ℕ}, 2 ≤ a → 2 < b → 2 ≤ (a ^ b + 1) / (a + 1)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SimplexCategory.δ_comp_σ_of_gt : ∀ {n : ℕ} {i : Fin (n + 2)} {j : Fin (n + 1)},
  j.castSucc < i →
    CategoryTheory.CategoryStruct.comp (SimplexCategory.δ i.succ) (SimplexCategory.σ j.castSucc) =
      CategoryTheory.CategoryStruct.comp (SimplexCategory.σ j) (SimplexCategory.δ i)
Result.autoException ::
application type mismatch
  n = SimplexCategory.mk n
argument
  SimplexCategory.mk n
has type
  SimplexCategory : Type
but is expected to have type
  ℕ : Type

Testing || bernsteinPolynomial.derivative_succ : ∀ (R : Type u_1) [inst : CommRing R] (n ν : ℕ),
  Polynomial.derivative (bernsteinPolynomial R n (ν + 1)) =
    ↑n * (bernsteinPolynomial R (n - 1) ν - bernsteinPolynomial R (n - 1) (ν + 1))
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_3 ≤ cifvar_23 x_4 x_3`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || List.map_concat : ∀ {α : Type u_1} {β : Type u_2} (f : α → β) (a : α) (l : List α), List.map f (l.concat a) = (List.map f l).concat (f a)
Result.autoException ::
Duper saturated

Testing || iff_eq_eq : ∀ {a b : Prop}, (a ↔ b) = (a = b)
Result.success

Testing || OrderMonoidIso.cancel_right : ∀ {α : Type u_2} {β : Type u_3} {γ : Type u_4} [inst : Preorder α] [inst_1 : Preorder β] [inst_2 : Preorder γ]
  [inst_3 : MulOneClass α] [inst_4 : MulOneClass β] [inst_5 : MulOneClass γ] {g₁ g₂ : α ≃*o β} {f : β ≃*o γ},
  Function.Injective ⇑f → (g₁.trans f = g₂.trans f ↔ g₁ = g₂)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || _private.Std.Data.HashMap.Lemmas.0.Std.HashMap.ext : ∀ {α : Type u} {β : Type v} {x : BEq α} {x_1 : Hashable α} {m m' : Std.HashMap α β}, m.inner = m'.inner → m = m'
Result.autoException ::
application type mismatch
  m = { inner := m }.inner
argument
  { inner := m }.inner
has type
  Std.DHashMap α fun x => β : Type (max 0 u v)
but is expected to have type
  Std.HashMap α β : Type (max u v)

Testing || LocallyFinite.comp_injOn : ∀ {ι : Type u_1} {ι' : Type u_2} {X : Type u_4} [inst : TopologicalSpace X] {f : ι → Set X} {g : ι' → ι},
  LocallyFinite f → Set.InjOn g {i | (f (g i)).Nonempty} → LocallyFinite (f ∘ g)
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : (#2 → #0), (∀ x1 : #3, ((!2 x0 x1) = (!17 x1 (λx2 : #2, (∀ x3 : #2, ((!20 x1 x3) → (((x0 x2) = (x0 x3)) → (x2 = x3))))))))) is not type correct

Testing || SuccOrder.nhdsWithin_Ici : ∀ {α : Type u} [inst : TopologicalSpace α] [inst_1 : LinearOrder α] [inst_2 : ClosedIciTopology α] {a : α}
  [inst_3 : SuccOrder α], nhdsWithin a (Set.Ici a) = pure a
Result.autoException ::
Duper saturated

Testing || Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastRotateRight : ∀ {α : Type} [inst : Hashable α] [inst_1 : DecidableEq α] {w : ℕ} (aig : Std.Sat.AIG α) (target : aig.ShiftTarget w)
  (assign : α → Bool) (idx : ℕ) (hidx : idx < w),
  ⟦assign,
      { aig := (Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight aig target).aig,
        ref := (Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight aig target).vec.get idx hidx }⟧ =
    if hidx2 : idx < w - target.distance % w then
      ⟦assign, { aig := aig, ref := target.vec.get (target.distance % w + idx) ⋯ }⟧
    else ⟦assign, { aig := aig, ref := target.vec.get (idx - (w - target.distance % w)) ⋯ }⟧
Result.autoException ::
Auto.Lemma.rewriteUMonoRigid? :: Motive fun _a =>
  ¬⟦assign,
        { aig := (Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight aig target).aig,
          ref := (Std.Tactic.BVDecide.BVExpr.bitblast.blastRotateRight aig target).vec.get idx hidx }⟧ =
      if hidx2 : idx < w - target.distance % w then
        ⟦assign, { aig := aig, ref := target.vec.get (target.distance % w + idx) ⋯ }⟧
      else ⟦assign, { aig := aig, ref := target.vec.get (idx - (w - target.distance % w)) ⋯ }⟧ is not type correct

Testing || TopologicalSpace.eq_generateFrom_countableBasis : ∀ (α : Type u) [t : TopologicalSpace α] [inst : SecondCountableTopology α],
  t = TopologicalSpace.generateFrom (TopologicalSpace.countableBasis α)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `TopologicalSpace.generateFrom x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasurableEquiv.ofInvolutive_symm : ∀ {α : Type u_1} [inst : MeasurableSpace α] (f : α → α) (hf : Function.Involutive f) (hf' : Measurable f),
  (MeasurableEquiv.ofInvolutive f hf hf').symm = MeasurableEquiv.ofInvolutive f hf hf'
Result.autoException ::
Duper saturated

Testing || DifferentiableOn.csin : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f : E → ℂ} {s : Set E},
  DifferentiableOn ℂ f s → DifferentiableOn ℂ (fun x => Complex.sin (f x)) s
Result.autoException ::
Duper saturated

Testing || inf_himp_bihimp : ∀ {α : Type u_2} [inst : BooleanAlgebra α] (a b : α), bihimp a b ⇨ a ⊓ b = a ⊔ b
Result.autoException ::
Duper saturated

Testing || Ideal.eq_prime_pow_of_succ_lt_of_le : ∀ {A : Type u_2} [inst : CommRing A] [inst_1 : IsDedekindDomain A] {P I : Ideal A} [P_prime : P.IsPrime],
  P ≠ ⊥ → ∀ {i : ℕ}, P ^ (i + 1) < I → I ≤ P ^ i → I = P ^ i
Result.autoException ::
Duper saturated

Testing || Fin.foldr_succ_last : ∀ {n : ℕ} {α : Sort u_1} (f : Fin (n + 1) → α → α) (x : α),
  Fin.foldr (n + 1) f x = Fin.foldr n (fun x => f x.castSucc) (f (Fin.last n) x)
Result.autoException ::
Duper saturated

Testing || HahnSeries.orderTop_sub : ∀ {R : Type u_3} [inst : AddGroup R] {Γ : Type u_7} [inst_1 : LinearOrder Γ] {x y : HahnSeries Γ R},
  x.orderTop < y.orderTop → (x - y).orderTop = x.orderTop
Result.success

Testing || RingCon.op_iff : ∀ {R : Type u_1} [inst : Add R] [inst_1 : Mul R] {c : RingCon R} {x y : Rᵐᵒᵖ},
  c.op x y ↔ c (MulOpposite.unop y) (MulOpposite.unop x)
Result.autoException ::
application type mismatch
  αᵐᵒᵖ = MulOpposite.unop { unop' := PreOpposite α }
argument
  MulOpposite.unop { unop' := PreOpposite α }
has type
  R : Type u_1
but is expected to have type
  Type u_1 : Type (u_1 + 1)

Testing || Set.mem_iUnion₂_of_mem : ∀ {α : Type u_1} {ι : Sort u_4} {κ : ι → Sort u_7} {s : (i : ι) → κ i → Set α} {a : α} {i : ι} (j : κ i),
  a ∈ s i j → a ∈ ⋃ i, ⋃ j, s i j
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type κ i of λ binder contains bound variables

Testing || CategoryTheory.MonoOver.isoMk_inv : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X : C} {f g : CategoryTheory.MonoOver X}
  (h : f.obj.left ≅ g.obj.left) (w : autoParam (CategoryTheory.CategoryStruct.comp h.hom g.arrow = f.arrow) _auto✝),
  (CategoryTheory.MonoOver.isoMk h w).inv = CategoryTheory.MonoOver.homMk h.inv ⋯
Result.autoException ::
Duper saturated

Testing || Finsupp.mem_supported' : ∀ {α : Type u_1} {M : Type u_2} (R : Type u_5) [inst : Semiring R] [inst_1 : AddCommMonoid M]
  [inst_2 : _root_.Module R M] {s : Set α} (p : α →₀ M), p ∈ Finsupp.supported M R s ↔ ∀ x ∉ s, p x = 0
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LinearMap.lTensor_id : ∀ {R : Type u_1} [inst : CommSemiring R] (M : Type u_4) (N : Type u_5) [inst_1 : AddCommMonoid M]
  [inst_2 : AddCommMonoid N] [inst_3 : _root_.Module R M] [inst_4 : _root_.Module R N],
  LinearMap.lTensor M LinearMap.id = LinearMap.id
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ZMod.LFunction_neg_two_mul_nat_sub_one : ∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Odd Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * ↑n) - 1) = 0
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `HasDistribNeg.toInvolutiveNeg`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || NNReal.rpow_le_rpow_iff_of_neg : ∀ {x : NNReal} {z : ℝ} {y : NNReal}, 0 < x → 0 < y → z < 0 → (x ^ z ≤ y ^ z ↔ y ≤ x)
Result.autoException ::
Duper saturated

Testing || NumberField.InfinitePlace.isReal_comap_iff : ∀ {k : Type u_1} [inst : Field k] {K : Type u_2} [inst_1 : Field K] (f : k ≃+* K) {w : NumberField.InfinitePlace K},
  (w.comap ↑f).IsReal ↔ w.IsReal
Result.success

Testing || eq_mul_of_inv_mul_eq₀ : ∀ {G₀ : Type u_3} [inst : GroupWithZero G₀] {a b c : G₀}, c ≠ 0 → b⁻¹ * a = c → a = b * c
Result.success

Testing || TendstoUniformly.mul : ∀ {α : Type u_1} {β : Type u_2} [inst : UniformSpace α] [inst_1 : Group α] [inst_2 : UniformGroup α] {ι : Type u_3}
  {l : Filter ι} {f f' : ι → β → α} {g g' : β → α},
  TendstoUniformly f g l → TendstoUniformly f' g' l → TendstoUniformly (f * f') (g * g') l
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || NonemptyInterval.mem_coe_interval : ∀ {α : Type u_1} [inst : PartialOrder α] {s : NonemptyInterval α} {x : α}, x ∈ ↑s ↔ x ∈ s
Result.autoException ::
Duper saturated

Testing || MvPolynomial.eval₂_neg : ∀ {R : Type u} {S : Type v} {σ : Type u_1} [inst : CommRing R] (p : MvPolynomial σ R) [inst_1 : CommRing S]
  (f : R →+* S) (g : σ → S), MvPolynomial.eval₂ f g (-p) = -MvPolynomial.eval₂ f g p
Result.autoException ::
Duper saturated

Testing || OneOneEquiv.congr_left : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : Primcodable α] [inst_1 : Primcodable β] [inst_2 : Primcodable γ]
  {p : α → Prop} {q : β → Prop} {r : γ → Prop}, OneOneEquiv p q → (OneOneEquiv p r ↔ OneOneEquiv q r)
Result.autoException ::
Duper saturated

Testing || Set.image_sub_const_Ioc : ∀ {α : Type u_1} [inst : OrderedAddCommGroup α] (a b c : α), (fun x => x - a) '' Set.Ioc b c = Set.Ioc (b - a) (c - a)
Result.success

Testing || le_symmDiff_iff_right : ∀ {α : Type u_2} [inst : GeneralizedBooleanAlgebra α] (a b : α), b ≤ symmDiff a b ↔ Disjoint a b
Result.success

Testing || List.Nodup.getEquivOfForallMemList_apply : ∀ {α : Type u_1} [inst : DecidableEq α] (l : List α) (nd : l.Nodup) (h : ∀ (x : α), x ∈ l) (i : Fin l.length),
  (List.Nodup.getEquivOfForallMemList l nd h) i = l.get i
Result.autoException ::
Duper saturated

Testing || Set.image_comm : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} {s : Set α} {β' : Type u_5} {f : β → γ} {g : α → β} {f' : α → β'}
  {g' : β' → γ}, (∀ (a : α), f (g a) = g' (f' a)) → f '' (g '' s) = g' '' (f' '' s)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || FreeGroup.Red.trans : ∀ {α : Type u} {L₁ L₂ L₃ : List (α × Bool)}, FreeGroup.Red L₁ L₂ → FreeGroup.Red L₂ L₃ → FreeGroup.Red L₁ L₃
Result.autoException ::
Duper saturated

Testing || ONote.NF.below_of_lt' : ∀ {o : ONote} {b : Ordinal.{0}}, o.repr < Ordinal.omega0 ^ b → o.NF → o.NFBelow b
Result.autoException ::
Duper saturated

Testing || dvd_and_not_dvd_iff : ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] {x y : α}, x ∣ y ∧ ¬y ∣ x ↔ DvdNotUnit x y
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.functorProdFunctorEquivUnitIso_hom_app : ∀ (A : Type u₁) [inst : CategoryTheory.Category.{v₁, u₁} A] (B : Type u₂) [inst_1 : CategoryTheory.Category.{v₂, u₂} B]
  (C : Type u₃) [inst_2 : CategoryTheory.Category.{v₃, u₃} C]
  (X : CategoryTheory.Functor A B × CategoryTheory.Functor A C),
  (CategoryTheory.functorProdFunctorEquivUnitIso A B C).hom.app X =
    ((X.1.prod'CompFst X.2).inv, (X.1.prod'CompSnd X.2).inv)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.CategoryStruct.id
  x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || LowerAdjoint.le_closure_iff : ∀ {α : Type u_1} {β : Type u_4} [inst : PartialOrder α] [inst_1 : Preorder β] {u : β → α} (l : LowerAdjoint u)
  (x y : α), x ≤ u (l.toFun y) ↔ u (l.toFun x) ≤ u (l.toFun y)
Result.autoException ::
Duper saturated

Testing || Subgroup.op_sInf : ∀ {G : Type u_2} [inst : Group G] (S : Set (Subgroup G)), (sInf S).op = sInf (Subgroup.unop ⁻¹' S)
Result.autoException ::
Duper saturated

Testing || PolynomialModule.smul_apply : ∀ {R : Type u_1} {M : Type u_2} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]
  (f : Polynomial R) (g : PolynomialModule R M) (n : ℕ), (f • g) n = ∑ x ∈ Finset.antidiagonal n, f.coeff x.1 • g x.2
Result.autoException ::
application type mismatch
  a✝ a = { toFinsupp := a✝ }.coeff a
argument
  { toFinsupp := a✝ }.coeff a
has type
  R : Type u_1
but is expected to have type
  M : Type u_2

Testing || MeasureTheory.ae_eventually_not_mem : ∀ {α : Type u_1} {F : Type u_3} [inst : FunLike F (Set α) ENNReal] [inst_1 : MeasureTheory.OuterMeasureClass F α]
  {μ : F} {s : ℕ → Set α}, ∑' (i : ℕ), μ (s i) ≠ ⊤ → ∀ᵐ (x : α) ∂μ, ∀ᶠ (n : ℕ) in Filter.atTop, x ∉ s n
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : Nat, ((!4 x0) = (!11 (!4 x0)))) is not type correct

Testing || MeasureTheory.ae_eq_set : ∀ {α : Type u_1} {F : Type u_3} [inst : FunLike F (Set α) ENNReal] [inst_1 : MeasureTheory.OuterMeasureClass F α]
  {μ : F} {s t : Set α}, s =ᵐ[μ] t ↔ μ (s \ t) = 0 ∧ μ (t \ s) = 0
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (¬ ((!1 (!2 !3) !4 !5) ↔ (((!6 !3 (!7 !4 !5)) = !8) ∧ ((!6 !3 (!7 !5 !4)) = !8)))) is not type correct

Testing || IsometryEquiv.dimH_preimage : ∀ {X : Type u_2} {Y : Type u_3} [inst : EMetricSpace X] [inst_1 : EMetricSpace Y] (e : X ≃ᵢ Y) (s : Set Y),
  dimH (⇑e ⁻¹' s) = dimH s
Result.success

Testing || Basis.SmithNormalForm.repr_apply_embedding_eq_repr_smul : ∀ {ι : Type u_1} {R : Type u_2} [inst : CommRing R] {M : Type u_3} [inst_1 : AddCommGroup M]
  [inst_2 : _root_.Module R M] {n : ℕ} {N : Submodule R M} (snf : Basis.SmithNormalForm N ι n) (m : ↥N) {i : Fin n},
  (snf.bM.repr ↑m) (snf.f i) = (snf.bN.repr (snf.a i • m)) i
Result.autoException ::
application type mismatch
  Submodule R M = { repr := Submodule R M }.repr
argument
  { repr := Submodule R M }.repr
has type
  M ≃ₗ[R] ι →₀ R : Type (max u_3 u_2 u_1)
but is expected to have type
  Type u_3 : Type (u_3 + 1)

Testing || Fin.valOrderEmb_apply : ∀ (n : ℕ) (self : Fin n), (Fin.valOrderEmb n) self = ↑self
Result.autoException ::
Duper saturated

Testing || forall_and_left : ∀ {α : Sort u_1} [inst : Nonempty α] (q : Prop) (p : α → Prop), (∀ (x : α), q ∧ p x) ↔ q ∧ ∀ (x : α), p x
Result.success

Testing || IsPrimitiveRoot.prime_norm_toInteger_sub_one_of_prime_ne_two' : ∀ {p : ℕ+} {K : Type u} [inst : Field K] {ζ : K} [hp : Fact (Nat.Prime ↑p)] [inst_1 : CharZero K]
  [hcycl : IsCyclotomicExtension {p} ℚ K] (hζ : IsPrimitiveRoot ζ ↑p),
  p ≠ 2 → Prime ((Algebra.norm ℤ) (hζ.toInteger - 1))
Result.autoException ::
Duper saturated

Testing || Array.isEqv_eq_decide : ∀ {α : Type u_1} (a b : Array α) (r : α → α → Bool),
  a.isEqv b r = if h : a.size = b.size then decide (∀ (i : ℕ) (h' : i < a.size), r a[i] b[i] = true) else false
Result.autoException ::
application type mismatch
  (¬a) = { toList := a → False }.toList
argument
  { toList := a → False }.toList
has type
  List α : Type u_1
but is expected to have type
  Prop : Type

Testing || MvPolynomial.monomialOneHom_apply : ∀ {R : Type u} {σ : Type u_1} {s : σ →₀ ℕ} [inst : CommSemiring R],
  (MvPolynomial.monomialOneHom R σ) s = (MvPolynomial.monomial s) 1
Result.autoException ::
Duper saturated

Testing || CategoryTheory.ShortComplex.LeftHomologyMapData.congr_φH : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  {S₁ S₂ : CategoryTheory.ShortComplex C} {φ : S₁ ⟶ S₂} {h₁ : S₁.LeftHomologyData} {h₂ : S₂.LeftHomologyData}
  {γ₁ γ₂ : CategoryTheory.ShortComplex.LeftHomologyMapData φ h₁ h₂}, γ₁ = γ₂ → γ₁.φH = γ₂.φH
Result.success

Testing || List.filterMap_getLast? : ∀ {α : Type u_1} {β : Type u_2} (f : α → Option β) (l : List α),
  (List.filterMap f l).getLast? = List.findSome? f l.reverse
Result.success

Testing || MeasurableSet.measure_eq_iSup_isCompact : ∀ {α : Type u_1} [inst : MeasurableSpace α] [inst_1 : TopologicalSpace α] ⦃U : Set α⦄,
  MeasurableSet U →
    ∀ (μ : MeasureTheory.Measure α) [inst_2 : μ.InnerRegular], μ U = ⨆ K, ⨆ (_ : K ⊆ U), ⨆ (_ : IsCompact K), μ K
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type K ⊆ U of λ binder contains bound variables

Testing || CategoryTheory.Adjunction.injective_of_map_injective : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u_1}
  [inst_1 : CategoryTheory.Category.{u_2, u_1} D] {F : CategoryTheory.Functor C D} {G : CategoryTheory.Functor D C},
  (F ⊣ G) →
    ∀ [inst_2 : G.Full] [inst_3 : G.Faithful] (I : D), CategoryTheory.Injective (G.obj I) → CategoryTheory.Injective I
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_5 x_2).map`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || OmegaCompletePartialOrder.OrderHom.omegaCompletePartialOrder_ωSup_coe : ∀ {α : Type u_2} {β : Type u_3} [inst : OmegaCompletePartialOrder α] [inst_1 : OmegaCompletePartialOrder β]
  (c : OmegaCompletePartialOrder.Chain (α →o β)) (a : α),
  (OmegaCompletePartialOrder.ωSup c) a = OmegaCompletePartialOrder.ωSup (c.map (OrderHom.apply a))
Result.autoException ::
Duper saturated

Testing || Zsqrtd.lift_symm_apply_coe : ∀ {R : Type} [inst : CommRing R] {d : ℤ} (f : ℤ√d →+* R), ↑(Zsqrtd.lift.symm f) = f Zsqrtd.sqrtd
Result.autoException ::
Duper saturated

Testing || Magma.AssocQuotient.lift_comp_of : ∀ {α : Type u} [inst : Mul α] {β : Type v} [inst_1 : Semigroup β] (f : α →ₙ* β),
  (Magma.AssocQuotient.lift f).comp Magma.AssocQuotient.of = f
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || HomotopyCategory.quotient_obj_as : ∀ {ι : Type u_2} {V : Type u} [inst : CategoryTheory.Category.{v, u} V] [inst_1 : CategoryTheory.Preadditive V]
  {c : ComplexShape ι} (C : HomologicalComplex V c), ((HomotopyCategory.quotient V c).obj C).as = C
Result.autoException ::
application type mismatch
  (¬a) = { as := a → False }.as
argument
  { as := a → False }.as
has type
  HomologicalComplex V c : Type (max (max u u_2) v)
but is expected to have type
  Prop : Type

Testing || PadicInt.modPart_lt_p : ∀ {p : ℕ} [hp_prime : Fact (Nat.Prime p)] (r : ℚ), PadicInt.modPart p r < ↑p
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || sSupHom.dual_id : ∀ {α : Type u_2} [inst : SupSet α], sSupHom.dual (sSupHom.id α) = sInfHom.id αᵒᵈ
Result.autoException ::
Duper saturated

Testing || CategoryTheory.PrelaxFunctor.mapFunctor_map : ∀ {B : Type u₁} [inst : CategoryTheory.Bicategory B] {C : Type u₂} [inst_1 : CategoryTheory.Bicategory C]
  (F : CategoryTheory.PrelaxFunctor B C) (a b : B) {X Y : a ⟶ b} (η : X ⟶ Y), (F.mapFunctor a b).map η = F.map₂ η
Result.success

Testing || AddMonoid.MulEquiv.coprodAssoc_symm_apply_inr_inr : ∀ {M : Type u_1} {N : Type u_2} {P : Type u_3} [inst : AddMonoid M] [inst_1 : AddMonoid N] [inst_2 : AddMonoid P]
  (x : P),
  (AddMonoid.MulEquiv.coprodAssoc M N P).symm (AddMonoid.Coprod.inr (AddMonoid.Coprod.inr x)) = AddMonoid.Coprod.inr x
Result.autoException ::
Duper saturated

Testing || OrderRingHom.coe_ringHom_id : ∀ {α : Type u_2} [inst : NonAssocSemiring α] [inst_1 : Preorder α], ↑(OrderRingHom.id α) = RingHom.id α
Result.autoException ::
Duper saturated

Testing || tsum_range : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {g : γ → β}
  (f : β → α), Function.Injective g → ∑' (x : ↑(Set.range g)), f ↑x = ∑' (x : γ), f (g x)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x //
  x ∈ x_0 '' Set.range g } of λ binder contains bound variables

Testing || Monotone.prod_map : ∀ {α : Type u} {β : Type v} {γ : Type w} {δ : Type u_2} [inst : Preorder α] [inst_1 : Preorder β] [inst_2 : Preorder γ]
  [inst_3 : Preorder δ] {f : α → γ} {g : β → δ}, Monotone f → Monotone g → Monotone (Prod.map f g)
Result.autoException ::
Duper saturated

Testing || Matrix.coe_ofLinearEquiv : ∀ {m : Type u_2} {n : Type u_3} (R : Type u_7) {α : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid α]
  [inst_2 : _root_.Module R α], ⇑(Matrix.ofLinearEquiv R) = ⇑Matrix.of
Result.autoException ::
Duper saturated

Testing || NonUnitalSubring.coe_center : ∀ (R : Type u) [inst : NonUnitalNonAssocRing R], ↑(NonUnitalSubring.center R) = Set.center R
Result.autoException ::
Duper saturated

Testing || SimplicialObject.Split.mk'_X : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] {X : CategoryTheory.SimplicialObject C}
  (s : SimplicialObject.Splitting X), (SimplicialObject.Split.mk' s).X = X
Result.autoException ::
Duper saturated

Testing || tsum_int_rec : ∀ {M : Type u_1} [inst : AddCommMonoid M] [inst_1 : TopologicalSpace M] [inst_2 : ContinuousAdd M] [inst_3 : T2Space M]
  {f g : ℕ → M}, Summable f → Summable g → ∑' (n : ℤ), Int.rec f g n = ∑' (n : ℕ), f n + ∑' (n : ℕ), g n
Result.success

Testing || ENNReal.sub_iSup : ∀ {ι : Sort u_1} {f : ι → ENNReal} {a : ENNReal} [inst : Nonempty ι], a ≠ ⊤ → a - ⨆ i, f i = ⨅ i, a - f i
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || oneLePart_div_leOnePart : ∀ {α : Type u_1} [inst : Lattice α] [inst_1 : Group α] [inst_2 : MulLeftMono α] (a : α), a⁺ᵐ / a⁻ᵐ = a
Result.success

Testing || hasProd_mono : ∀ {ι : Type u_1} {α : Type u_3} [inst : OrderedCommMonoid α] [inst_1 : TopologicalSpace α]
  [inst_2 : OrderClosedTopology α] {f g : ι → α} {a₁ a₂ : α}, HasProd f a₁ → HasProd g a₂ → f ≤ g → a₁ ≤ a₂
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SchwartzMap.integralCLM_apply : ∀ (𝕜 : Type u_1) {D : Type u_3} {V : Type u_7} [inst : RCLike 𝕜] [inst_1 : NormedAddCommGroup D]
  [inst_2 : NormedSpace ℝ D] [inst_3 : NormedAddCommGroup V] [inst_4 : NormedSpace ℝ V] [inst_5 : NormedSpace 𝕜 V]
  [inst_6 : MeasurableSpace D] {μ : MeasureTheory.Measure D} [hμ : μ.HasTemperateGrowth] [inst_7 : BorelSpace D]
  [inst_8 : SecondCountableTopology D] (f : SchwartzMap D V), (SchwartzMap.integralCLM 𝕜 μ) f = ∫ (x : D), f x ∂μ
Result.autoException ::
Duper saturated

Testing || Multiset.nsmul_cons : ∀ {α : Type u_1} {s : Multiset α} (n : ℕ) (a : α), n • (a ::ₘ s) = n • {a} + n • s
Result.success

Testing || HahnSeries.orderTop_single_le : ∀ {Γ : Type u_1} {R : Type u_3} [inst : PartialOrder Γ] [inst_1 : _root_.Zero R] {a : Γ} {r : R},
  ↑a ≤ ((HahnSeries.single a) r).orderTop
Result.success

Testing || dist_midpoint_midpoint_le' : ∀ {V : Type u_1} {P : Type u_2} [inst : SeminormedAddCommGroup V] [inst_1 : PseudoMetricSpace P]
  [inst_2 : NormedAddTorsor V P] {𝕜 : Type u_5} [inst_3 : NormedField 𝕜] [inst_4 : NormedSpace 𝕜 V]
  [inst_5 : Invertible 2] (p₁ p₂ p₃ p₄ : P),
  dist (midpoint 𝕜 p₁ p₂) (midpoint 𝕜 p₃ p₄) ≤ (dist p₁ p₃ + dist p₂ p₄) / ‖2‖
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `NormedAddTorsor.toAddTorsor`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || LocalSubring.toSubring_injective : ∀ {R : Type u_1} [inst : CommRing R], Function.Injective LocalSubring.toSubring
Result.autoException ::
Duper saturated

Testing || AddMonCat.HasLimits.limitConeIsLimit.proof_3 : ∀ {J : Type u_3} [inst : CategoryTheory.Category.{u_2, u_3} J] (F : CategoryTheory.Functor J AddMonCat)
  [inst_1 : Small.{u_1, max u_1 u_3} ↑(F.comp (CategoryTheory.forget AddMonCat)).sections]
  (s : CategoryTheory.Limits.Cone F) (x y : ↑s.pt),
  {
          toFun := fun v =>
            (equivShrink ↑(F.comp (CategoryTheory.forget AddMonCat)).sections).1
              ⟨fun j => ((CategoryTheory.forget AddMonCat).mapCone s).π.app j v, ⋯⟩,
          map_zero' := ⋯ }.toFun
      (x + y) =
    {
            toFun := fun v =>
              (equivShrink ↑(F.comp (CategoryTheory.forget AddMonCat)).sections).1
                ⟨fun j => ((CategoryTheory.forget AddMonCat).mapCone s).π.app j v, ⋯⟩,
            map_zero' := ⋯ }.toFun
        x +
      {
            toFun := fun v =>
              (equivShrink ↑(F.comp (CategoryTheory.forget AddMonCat)).sections).1
                ⟨fun j => ((CategoryTheory.forget AddMonCat).mapCone s).π.app j v, ⋯⟩,
            map_zero' := ⋯ }.toFun
        y
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Matrix.transpose_injective : ∀ {m : Type u_2} {n : Type u_3} {α : Type v}, Function.Injective Matrix.transpose
Result.autoException ::
Duper saturated

Testing || LinearIsometry.isComplete_map_iff : ∀ {R : Type u_1} {R₂ : Type u_2} {E : Type u_5} {E₂ : Type u_6} [inst : Semiring R] [inst_1 : Semiring R₂]
  {σ₁₂ : R →+* R₂} [inst_2 : SeminormedAddCommGroup E] [inst_3 : SeminormedAddCommGroup E₂] [inst_4 : _root_.Module R E]
  [inst_5 : _root_.Module R₂ E₂] (f : E →ₛₗᵢ[σ₁₂] E₂) [inst_6 : RingHomSurjective σ₁₂] {p : Submodule R E},
  IsComplete ↑(Submodule.map f.toLinearMap p) ↔ IsComplete ↑p
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.Combinatorics.SetFamily.KruskalKatona.0.Finset.UV.familyMeasure_compression_lt_familyMeasure : ∀ {n : ℕ} {U V : Finset (Fin n)} {hU : U.Nonempty} {hV : V.Nonempty},
  U.max' hU < V.max' hV →
    ∀ {𝒜 : Finset (Finset (Fin n))},
      UV.compression U V 𝒜 ≠ 𝒜 → Finset.UV.familyMeasure (UV.compression U V 𝒜) < Finset.UV.familyMeasure 𝒜
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `instDecidableEq_mathlib a✝³ b✝¹`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || SimpleGraph.cliqueSet_eq_empty_iff : ∀ {α : Type u_1} {G : SimpleGraph α} {n : ℕ}, G.cliqueSet n = ∅ ↔ G.CliqueFree n
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.Scheme.Pullback.tensorCongr_SpecTensorTo : ∀ {X Y S : AlgebraicGeometry.Scheme} {f : X ⟶ S} {g : Y ⟶ S} {T T' : AlgebraicGeometry.Scheme.Pullback.Triplet f g}
  (h : T = T'),
  CategoryTheory.CategoryStruct.comp
      (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Scheme.Pullback.Triplet.tensorCongr h).hom) T.SpecTensorTo =
    T'.SpecTensorTo
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.CategoryStruct.id
  x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Submodule.unique_quotient_iff_eq_top : ∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]
  {p : Submodule R M}, Nonempty (Unique (M ⧸ p)) ↔ p = ⊤
Result.autoException ::
Duper saturated

Testing || comp_translate : ∀ {α : Type u_2} {β : Type u_3} {G : Type u_5} [inst : AddCommGroup G] (a : G) (f : G → α) (g : α → β),
  g ∘ translate a f = translate a (g ∘ f)
Result.autoException ::
Duper saturated

Testing || Finset.Colex.ext : ∀ {α : Type u_3} {x y : Finset.Colex α}, x.ofColex = y.ofColex → x = y
Result.autoException ::
application type mismatch
  x = { ofColex := x }.ofColex
argument
  { ofColex := x }.ofColex
has type
  Finset α : Type u_3
but is expected to have type
  Finset.Colex α : Type u_3

Testing || Function.IsPeriodicPt.const_mul : ∀ {α : Type u_1} {f : α → α} {x : α} {m : ℕ}, Function.IsPeriodicPt f m x → ∀ (n : ℕ), Function.IsPeriodicPt f (n * m) x
Result.success

Testing || Even.nsmul : ∀ {α : Type u_2} [inst : AddMonoid α] {a : α} (n : ℕ), Even a → Even (n • a)
Result.autoException ::
Duper saturated

Testing || nnnorm_le_pi_nnnorm : ∀ {ι : Type u_1} {π : ι → Type u_4} [inst : Fintype ι] [inst_1 : (i : ι) → SeminormedAddGroup (π i)] (f : (i : ι) → π i)
  (i : ι), ‖f i‖₊ ≤ ‖f‖₊
Result.autoException ::
Duper saturated

Testing || Submodule.quotientPi_apply : ∀ {ι : Type u_1} {R : Type u_2} [inst : CommRing R] {Ms : ι → Type u_3} [inst_1 : (i : ι) → AddCommGroup (Ms i)]
  [inst_2 : (i : ι) → _root_.Module R (Ms i)] [inst_3 : Fintype ι] [inst_4 : DecidableEq ι]
  (p : (i : ι) → Submodule R (Ms i)) (a : ((i : ι) → Ms i) ⧸ Submodule.pi Set.univ p) (i : ι),
  (Submodule.quotientPi p) a i = (Submodule.quotientPiLift p (fun i => (p i).mkQ) ⋯) a i
Result.autoException ::
Auto.Monomorphization.ConstInst.toExpr :: Unexpected error

Testing || Module.End.iSup_maxGenEigenspace_eq_top : ∀ {K : Type u_1} {V : Type u_2} [inst : Field K] [inst_1 : AddCommGroup V] [inst_2 : _root_.Module K V]
  [inst_3 : IsAlgClosed K] [inst_4 : FiniteDimensional K V] (f : Module.End K V), ⨆ μ, f.maxGenEigenspace μ = ⊤
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.addCommGroup`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ContinuousLinearEquiv.dimH_preimage : ∀ {𝕜 : Type u_4} {E : Type u_5} {F : Type u_6} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] (e : E ≃L[𝕜] F) (s : Set F),
  dimH (⇑e ⁻¹' s) = dimH s
Result.success

Testing || SimpleGraph.ConnectedComponent.map_comp : ∀ {V : Type u} {V' : Type v} {V'' : Type w} {G : SimpleGraph V} {G' : SimpleGraph V'} {G'' : SimpleGraph V''}
  (C : G.ConnectedComponent) (φ : G →g G') (ψ : G' →g G''),
  SimpleGraph.ConnectedComponent.map ψ (SimpleGraph.ConnectedComponent.map φ C) =
    SimpleGraph.ConnectedComponent.map (ψ.comp φ) C
Result.autoException ::
Duper saturated

Testing || Condensed.id_val : ∀ {C : Type w} [inst : CategoryTheory.Category.{v, w} C] (X : Condensed C),
  (CategoryTheory.CategoryStruct.id X).val = CategoryTheory.CategoryStruct.id X.val
Result.autoException ::
application type mismatch
  Condensed C = { val := CategoryTheory.Sheaf (CategoryTheory.coherentTopology CompHaus) C }.val
argument
  { val := CategoryTheory.Sheaf (CategoryTheory.coherentTopology CompHaus) C }.val
has type
  X.val ⟶ X.val : Type (max (u + 1) v)
but is expected to have type
  Type (max (max (max (u + 1) w) u) v) : Type (max (max (u + 2) (v + 1)) (w + 1))

Testing || Monotone.ciSup_comp_tendsto_atTop_of_linearOrder : ∀ {α : Type u_3} {β : Type u_4} {γ : Type u_5} [inst : Preorder β] [inst_1 : ConditionallyCompleteLinearOrder γ]
  {l : Filter α} [inst_2 : l.NeBot] {f : β → γ},
  Monotone f → ∀ {g : α → β}, Filter.Tendsto g l Filter.atTop → ⨆ a, f (g a) = ⨆ b, f b
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Filter.atTop`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Subalgebra.unop_toSubsemiring : ∀ {R : Type u_2} {A : Type u_3} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]
  (S : Subalgebra R Aᵐᵒᵖ), S.unop.toSubsemiring = S.unop
Result.autoException ::
Duper saturated

Testing || IsTrichotomous.swap : ∀ {α : Type u} (r : α → α → Prop) [inst : IsTrichotomous α r], IsTrichotomous α (Function.swap r)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Subalgebra.isAlgebraic_of_isAlgebraic_bot : ∀ {R : Type u} {S : Type u_1} [inst : CommRing R] [inst_1 : CommRing S] [inst_2 : Algebra R S] {x : S},
  IsAlgebraic (↥⊥) x → IsAlgebraic R x
Result.autoException ::
Duper saturated

Testing || PartialEquiv.trans_target'' : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} (e : PartialEquiv α β) (e' : PartialEquiv β γ),
  (e.trans e').target = ↑e' '' (e'.source ∩ e.target)
Result.autoException ::
Duper saturated

Testing || Set.Definable.preimage_comp : ∀ {M : Type w} {A : Set M} {L : FirstOrder.Language} [inst : L.Structure M] {α : Type u₁} {β : Type u_1} (f : α → β)
  {s : Set (α → M)}, A.Definable L s → A.Definable L ((fun g => g ∘ f) ⁻¹' s)
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Limits.coprod.leftUnitor_inv : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasBinaryCoproducts C]
  [inst_2 : CategoryTheory.Limits.HasInitial C] (P : C),
  (CategoryTheory.Limits.coprod.leftUnitor P).inv = CategoryTheory.Limits.coprod.inr
Result.autoException ::
Duper saturated

Testing || Set.iUnion₂_prod_const : ∀ {α : Type u_1} {β : Type u_2} {ι : Sort u_4} {κ : ι → Sort u_7} {s : (i : ι) → κ i → Set α} {t : Set β},
  (⋃ i, ⋃ j, s i j) ×ˢ t = ⋃ i, ⋃ j, s i j ×ˢ t
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type κ i✝ of λ binder contains bound variables

Testing || SeparationQuotient.range_mk : ∀ {X : Type u_1} [inst : TopologicalSpace X], Set.range SeparationQuotient.mk = Set.univ
Result.success

Testing || CompositionSeries.Equivalent.symm : ∀ {X : Type u} [inst : Lattice X] [inst_1 : JordanHolderLattice X] {s₁ s₂ : CompositionSeries X},
  s₁.Equivalent s₂ → s₂.Equivalent s₁
Result.autoException ::
Duper saturated

Testing || EuclideanDomain.mod_lt : ∀ {R : Type u} [inst : EuclideanDomain R] (a : R) {b : R}, b ≠ 0 → EuclideanDomain.r (a % b) b
Result.success

Testing || ContinuousLinearMap.coe_inj : ∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ₁₂ : R₁ →+* R₂} {M₁ : Type u_4}
  [inst_2 : TopologicalSpace M₁] [inst_3 : AddCommMonoid M₁] {M₂ : Type u_6} [inst_4 : TopologicalSpace M₂]
  [inst_5 : AddCommMonoid M₂] [inst_6 : _root_.Module R₁ M₁] [inst_7 : _root_.Module R₂ M₂] {f g : M₁ →SL[σ₁₂] M₂},
  ↑f = ↑g ↔ f = g
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type M₁ →SL[x_0] M₂ of λ binder contains bound variables

Testing || Function.comp_eq_zero_iff : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : _root_.Zero β] [inst_1 : _root_.Zero γ] (f : α → β) {g : β → γ},
  Function.Injective g → g 0 = 0 → (g ∘ f = 0 ↔ f = 0)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || PNat.Icc_eq_finset_subtype : ∀ (a b : ℕ+), Finset.Icc a b = Finset.subtype (fun n => 0 < n) (Finset.Icc ↑a ↑b)
Result.autoException ::
Duper saturated

Testing || SimpleGraph.induce_spanningCoe : ∀ {V : Type u_1} {s : Set V} {G : SimpleGraph ↑s}, SimpleGraph.induce s G.spanningCoe = G
Result.success

Testing || OrderIso.strictConvexOn_symm : ∀ {𝕜 : Type u_1} {α : Type u_4} {β : Type u_5} [inst : OrderedSemiring 𝕜] [inst_1 : OrderedAddCommMonoid α]
  [inst_2 : SMul 𝕜 α] [inst_3 : OrderedAddCommMonoid β] [inst_4 : SMul 𝕜 β] (f : α ≃o β),
  StrictConcaveOn 𝕜 Set.univ ⇑f → StrictConvexOn 𝕜 Set.univ ⇑f.symm
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Fintype.piFinset_sub : ∀ {ι : Type u_5} {α : ι → Type u_6} [inst : Fintype ι] [inst_1 : DecidableEq ι] [inst_2 : (i : ι) → DecidableEq (α i)]
  [inst_3 : (i : ι) → Sub (α i)] (s t : (i : ι) → Finset (α i)),
  (Fintype.piFinset fun i => s i - t i) = Fintype.piFinset s - Fintype.piFinset t
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝¹ i`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Ordinal.lt_lift_iff : ∀ {a : Ordinal.{u}} {b : Ordinal.{max u v}}, b < Ordinal.lift.{v, u} a ↔ ∃ a' < a, Ordinal.lift.{v, u} a' = b
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || WithLp.edist_equiv_symm_snd : ∀ (p : ENNReal) (α : Type u_2) (β : Type u_3) [hp : Fact (1 ≤ p)] [inst : SeminormedAddCommGroup α]
  [inst_1 : SeminormedAddCommGroup β] (y₁ y₂ : β),
  edist ((WithLp.equiv p (α × β)).symm (0, y₁)) ((WithLp.equiv p (α × β)).symm (0, y₂)) = edist y₁ y₂
Result.success

Testing || Basis.baseChange_linearMap : ∀ {R : Type u_1} {M : Type uM} {ι : Type uι} [inst : CommSemiring R] [inst_1 : AddCommMonoid M]
  [inst_2 : _root_.Module R M] [inst_3 : Fintype ι] {ι' : Type u_3} {N : Type u_4} [inst_4 : Fintype ι']
  [inst_5 : DecidableEq ι'] [inst_6 : AddCommMonoid N] [inst_7 : _root_.Module R N] (A : Type u_5)
  [inst_8 : CommSemiring A] [inst_9 : Algebra R A] (b : Basis ι R M) (b' : Basis ι' R N) (ij : ι × ι'),
  LinearMap.baseChange A ((b'.linearMap b) ij) =
    ((Algebra.TensorProduct.basis A b').linearMap (Algebra.TensorProduct.basis A b)) ij
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Multiset.cons_subset_cons : ∀ {α : Type u_1} {a : α} {s t : Multiset α}, s ⊆ t → a ::ₘ s ⊆ a ::ₘ t
Result.autoException ::
Duper saturated

Testing || _private.Init.Data.BitVec.Bitblast.0.BitVec.mod_two_pow_add_mod_two_pow_add_bool_lt_two_pow_succ : ∀ (x y i : ℕ) (c : Bool), x % 2 ^ i + (y % 2 ^ i + c.toNat) < 2 ^ (i + 1)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || mdifferentiableAt_extChartAt : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}
  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] [inst_6 : SmoothManifoldWithCorners I M] {x y : M},
  y ∈ (chartAt H x).source → MDifferentiableAt I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `mfderiv x_0 x_0
  (cifvar_17 (cifvar_5 x_2)) x_3`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.projIci_eq_self : ∀ {α : Type u_1} [inst : LinearOrder α] {a x : α}, Set.projIci a x = ⟨a, ⋯⟩ ↔ x ≤ a
Result.autoException ::
Duper saturated

Testing || MeasureTheory.measure_preimage_snd_singleton_eq_tsum : ∀ {α : Type u_2} {β : Type u_3} {m0 : MeasurableSpace α} [inst : MeasurableSingletonClass α] {mβ : MeasurableSpace β}
  [inst : MeasurableSingletonClass β] [inst : Countable α] (μ : MeasureTheory.Measure (α × β)) (y : β),
  μ (Prod.snd ⁻¹' {y}) = ∑' (x : α), μ {(x, y)}
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Matrix.charpoly.univ_monic : ∀ (R : Type u_1) (n : Type u_3) [inst : CommRing R] [inst_1 : Fintype n] [inst_2 : DecidableEq n],
  (Matrix.charpoly.univ R n).Monic
Result.success

Testing || DifferentiableAt.cpow : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] {f g : E → ℂ} {x : E},
  DifferentiableAt ℂ f x → DifferentiableAt ℂ g x → f x ∈ Complex.slitPlane → DifferentiableAt ℂ (fun x => f x ^ g x) x
Result.success

Testing || OnePoint.compl_range_coe : ∀ {X : Type u_1}, (Set.range OnePoint.some)ᶜ = {OnePoint.infty}
Result.success

Testing || Set.image_mul_const_uIcc : ∀ {α : Type u_1} [inst : LinearOrderedField α] (a b c : α), (fun x => x * a) '' Set.uIcc b c = Set.uIcc (b * a) (c * a)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.Cofork.condition : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} {f g : X ⟶ Y} (t : CategoryTheory.Limits.Cofork f g),
  CategoryTheory.CategoryStruct.comp f t.π = CategoryTheory.CategoryStruct.comp g t.π
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.ι`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.Bicategory.rightUnitor_comp_inv : ∀ {B : Type u} [inst : CategoryTheory.Bicategory B] {a b c : B} (f : a ⟶ b) (g : b ⟶ c),
  (CategoryTheory.Bicategory.rightUnitor (CategoryTheory.CategoryStruct.comp f g)).inv =
    CategoryTheory.CategoryStruct.comp
      (CategoryTheory.Bicategory.whiskerLeft f (CategoryTheory.Bicategory.rightUnitor g).inv)
      (CategoryTheory.Bicategory.associator f g (CategoryTheory.CategoryStruct.id c)).inv
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Bicategory.rightUnitor
  x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || isQuasiregular_iff_isUnit' : ∀ (R : Type u_1) {A : Type u_2} [inst : CommSemiring R] [inst_1 : NonUnitalSemiring A] [inst_2 : _root_.Module R A]
  [inst_3 : IsScalarTower R A A] [inst_4 : SMulCommClass R A A] {x : A}, IsQuasiregular x ↔ IsUnit (1 + ↑x)
Result.autoException ::
Duper saturated

Testing || Metric.closedBall_zero : ∀ {γ : Type w} [inst : MetricSpace γ] {x : γ}, Metric.closedBall x 0 = {x}
Result.autoException ::
Duper saturated

Testing || one_sub_gold : 1 - goldenConj = goldenRatio
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AddOpposite.instAddSemigroup.proof_1 : ∀ {α : Type u_1} [inst : AddSemigroup α] (x y z : αᵃᵒᵖ), x + y + z = x + (y + z)
Result.success

Testing || IsUltrametricDist.frontier_closedBall_eq_empty : ∀ {X : Type u_1} [inst : PseudoMetricSpace X] [inst_1 : IsUltrametricDist X] (x : X) {r : ℝ},
  r ≠ 0 → frontier (Metric.closedBall x r) = ∅
Result.success

Testing || TopCat.GlueData.π_surjective : ∀ (D : TopCat.GlueData), Function.Surjective ⇑D.π
Result.autoException ::
Duper saturated

Testing || AlgebraicGeometry.Proj.pullbackAwayιIso_hom_SpecMap_awayMap_right : ∀ {R : Type u_1} {A : Type u_2} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (𝒜 : ℕ → Submodule R A)
  [inst_3 : GradedAlgebra 𝒜] {f : A} {m : ℕ} (f_deg : f ∈ 𝒜 m) (hm : 0 < m) {m' : ℕ} {g : A} (g_deg : g ∈ 𝒜 m')
  (hm' : 0 < m') {x : A} (hx : x = f * g),
  CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.pullbackAwayιIso 𝒜 f_deg hm g_deg hm' hx).hom
      (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 f_deg ⋯))) =
    CategoryTheory.Limits.pullback.snd (AlgebraicGeometry.Proj.awayι 𝒜 f f_deg hm)
      (AlgebraicGeometry.Proj.awayι 𝒜 g g_deg hm')
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SmoothBumpCovering.mem_chartAt_source_of_eq_one : ∀ {ι : Type uι} {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH}
  [inst_2 : TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M]
  [inst_4 : ChartedSpace H M] [inst_5 : FiniteDimensional ℝ E] {s : Set M} (fs : SmoothBumpCovering ι I M s) {i : ι}
  {x : M}, ↑(fs.toFun i) x = 1 → x ∈ (chartAt H (fs.c i)).source
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Submodule.smul_le : ∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M] {I : Ideal R}
  {N P : Submodule R M}, I • N ≤ P ↔ ∀ r ∈ I, ∀ n ∈ N, r • n ∈ P
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `AddSubmonoid.smul`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Subgroup.closure_univ : ∀ {G : Type u_1} [inst : Group G], Subgroup.closure Set.univ = ⊤
Result.success

Testing || Disjoint.map_orderIso : ∀ {α : Type u_2} {β : Type u_3} [inst : SemilatticeInf α] [inst_1 : OrderBot α] [inst_2 : SemilatticeInf β]
  [inst_3 : OrderBot β] {a b : α} (f : α ≃o β), Disjoint a b → Disjoint (f a) (f b)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Matrix.conjTransposeRingEquiv_apply : ∀ (m : Type u_2) (α : Type v) [inst : Semiring α] [inst_1 : StarRing α] [inst_2 : Fintype m] (M : Matrix m m α),
  (Matrix.conjTransposeRingEquiv m α) M = MulOpposite.op M.conjTranspose
Result.autoException ::
Duper saturated

Testing || FreeAddGroup.Red.Step.negRev : ∀ {α : Type u} {L₁ L₂ : List (α × Bool)},
  FreeAddGroup.Red.Step L₁ L₂ → FreeAddGroup.Red.Step (FreeAddGroup.negRev L₁) (FreeAddGroup.negRev L₂)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || TopologicalSpace.IsSeparable.univ_pi : ∀ {ι : Type u_2} [inst : Countable ι] {X : ι → Type u_3} {s : (i : ι) → Set (X i)}
  [inst : (i : ι) → TopologicalSpace (X i)],
  (∀ (i : ι), TopologicalSpace.IsSeparable (s i)) → TopologicalSpace.IsSeparable (Set.univ.pi s)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝ x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AddAction.orbitRel_le_snd : ∀ (G : Type u_1) (α : Type u_2) (β : Type u_3) [inst : AddGroup G] [inst_1 : AddAction G α] [inst_2 : AddAction G β],
  AddAction.orbitRel G (α × β) ≤ Setoid.comap Prod.snd (AddAction.orbitRel G β)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0 x y`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.Comonad.ComonadicityInternal.unitFork_ι : ∀ {C : Type u₁} {D : Type u₂} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Category.{v₁, u₂} D]
  {F : CategoryTheory.Functor C D} {G : CategoryTheory.Functor D C} {adj : F ⊣ G} (A : adj.toComonad.Coalgebra)
  [inst_2 : CategoryTheory.Limits.HasEqualizer (G.map A.a) (adj.unit.app (G.obj A.A))],
  (CategoryTheory.Comonad.ComonadicityInternal.counitFork A).ι =
    F.map (CategoryTheory.Limits.equalizer.ι (G.map A.a) (adj.unit.app (G.obj A.A)))
Result.autoException ::
Duper saturated

Testing || HasStrictFDerivAt.sinh : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : E → ℝ} {f' : E →L[ℝ] ℝ} {x : E},
  HasStrictFDerivAt f f' x → HasStrictFDerivAt (fun x => Real.sinh (f x)) (Real.cosh (f x) • f') x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Submodule.traceDual_bot : ∀ {A : Type u_1} {K : Type u_2} {L : Type u} {B : Type u_3} [inst : CommRing A] [inst_1 : Field K] [inst_2 : CommRing B]
  [inst_3 : Field L] [inst_4 : Algebra A K] [inst_5 : Algebra B L] [inst_6 : Algebra A B] [inst_7 : Algebra K L]
  [inst_8 : Algebra A L] [inst_9 : IsScalarTower A K L] [inst_10 : IsScalarTower A B L], Submodule.traceDual A K ⊥ = ⊤
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ENNReal.hasSum : ∀ {α : Type u_1} {f : α → ENNReal}, HasSum f (⨆ s, ∑ a ∈ s, f a)
Result.autoException ::
Duper saturated

Testing || Fin.consOrderIso_apply : ∀ {n : ℕ} (α : Fin (n + 1) → Type u_2) [inst : (i : Fin (n + 1)) → LE (α i)] (f : α 0 × ((i : Fin n) → α i.succ))
  (i : Fin (n + 1)), (Fin.consOrderIso α) f i = Fin.cons f.1 f.2 i
Result.autoException ::
Auto.Monomorphization.ConstInst.toExpr :: Unexpected error

Testing || UpperSet.iciSupHom_apply : ∀ {α : Type u_1} [inst : SemilatticeSup α] (a : α), UpperSet.iciSupHom a = UpperSet.Ici a
Result.autoException ::
Duper saturated

Testing || StrictConvex.eq : ∀ {𝕜 : Type u_1} {E : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : TopologicalSpace E] [inst_2 : AddCommMonoid E]
  [inst_3 : SMul 𝕜 E] {s : Set E} {x y : E} {a b : 𝕜},
  StrictConvex 𝕜 s → x ∈ s → y ∈ s → 0 < a → 0 < b → a + b = 1 → a • x + b • y ∉ interior s → x = y
Result.success

Testing || TopCat.GlueData.ι_openEmbedding : ∀ (D : TopCat.GlueData) (i : D.J), Topology.IsOpenEmbedding ⇑(D.ι i)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_5
    x_0).topologicalSpace_coe`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || iff_def' : ∀ {a b : Prop}, (a ↔ b) ↔ (b → a) ∧ (a → b)
Result.success

Testing || Set.diff_iUnion : ∀ {β : Type u_2} {ι : Sort u_4} [inst : Nonempty ι] (s : Set β) (t : ι → Set β), s \ ⋃ i, t i = ⋂ i, s \ t i
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, (∀ x1 : #0, ((!0 x0 x1) = (!5 x0 (λx2 : #2, ((!7 x1 x2) → False)))))) is not type correct

Testing || orthogonalProjection_add_orthogonalProjection_orthogonal : ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : RCLike 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]
  (K : Submodule 𝕜 E) [inst_3 : HasOrthogonalProjection K] (w : E),
  ↑((orthogonalProjection K) w) + ↑((orthogonalProjection Kᗮ) w) = w
Result.autoException ::
Duper saturated

Testing || HurwitzZeta.hasSum_nat_sinKernel : ∀ (a : ℝ) {t : ℝ},
  0 < t →
    HasSum (fun n => 2 * ↑n * Real.sin (2 * Real.pi * a * ↑n) * Real.exp (-Real.pi * ↑n ^ 2 * t))
      (HurwitzZeta.sinKernel (↑a) t)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Asymptotics.superpolynomialDecay_iff_abs_isBoundedUnder : ∀ {α : Type u_1} {β : Type u_2} {l : Filter α} {k : α → β} (f : α → β) [inst : TopologicalSpace β]
  [inst_1 : LinearOrderedField β] [inst_2 : OrderTopology β],
  Filter.Tendsto k l Filter.atTop →
    (Asymptotics.SuperpolynomialDecay l k f ↔
      ∀ (z : ℕ), Filter.IsBoundedUnder (fun x1 x2 => x1 ≤ x2) l fun a => |k a ^ z * f a|)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.isIso_ΓSpec_adjunction_unit_app_basicOpen : ∀ {X : AlgebraicGeometry.Scheme} [inst : CompactSpace ↑↑X.toPresheafedSpace]
  [inst : QuasiSeparatedSpace ↑↑X.toPresheafedSpace] (f : ↑(X.presheaf.obj (Opposite.op ⊤))),
  CategoryTheory.IsIso ((AlgebraicGeometry.ΓSpec.adjunction.unit.app X).c.app (Opposite.op (PrimeSpectrum.basicOpen f)))
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.Nonempty.add : ∀ {α : Type u_2} [inst : DecidableEq α] [inst_1 : Add α] {s t : Finset α}, s.Nonempty → t.Nonempty → (s + t).Nonempty
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SimpleGraph.map_singletonSubgraph : ∀ {V : Type u} {W : Type v} {G : SimpleGraph V} {G' : SimpleGraph W} (f : G →g G') {v : V},
  SimpleGraph.Subgraph.map f (G.singletonSubgraph v) = G'.singletonSubgraph (f v)
Result.autoException ::
Duper saturated

Testing || upperSemicontinuous_iff_isOpen_preimage : ∀ {α : Type u_1} [inst : TopologicalSpace α] {β : Type u_2} [inst_1 : Preorder β] {f : α → β},
  UpperSemicontinuous f ↔ ∀ (y : β), IsOpen (f ⁻¹' Set.Iio y)
Result.autoException ::
Duper saturated

Testing || DifferentiableAt.arctan : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {f : E → ℝ} {x : E},
  DifferentiableAt ℝ f x → DifferentiableAt ℝ (fun x => Real.arctan (f x)) x
Result.success

Testing || Subfield.relfinrank_comap_comap_eq_relfinrank_of_surjective : ∀ {E : Type v} [inst : Field E] {L : Type w} [inst_1 : Field L] (A B : Subfield E) (f : L →+* E),
  Function.Surjective ⇑f → (Subfield.comap f A).relfinrank (Subfield.comap f B) = A.relfinrank B
Result.autoException ::
Duper saturated

Testing || map_extChartAt_nhds' : ∀ {𝕜 : Type u_1} {E : Type u_2} {M : Type u_3} {H : Type u_4} [inst : NontriviallyNormedField 𝕜]
  [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace 𝕜 E] [inst_3 : TopologicalSpace H] [inst_4 : TopologicalSpace M]
  {I : ModelWithCorners 𝕜 E H} [inst_5 : ChartedSpace H M] {x y : M},
  y ∈ (extChartAt I x).source →
    Filter.map (↑(extChartAt I x)) (nhds y) = nhdsWithin (↑(extChartAt I x) y) (Set.range ↑I)
Result.autoException ::
Duper saturated

Testing || SubgroupClass.subtype_comp_inclusion : ∀ {G : Type u_1} [inst : Group G] {S : Type u_4} [inst_1 : SetLike S G] [inst_2 : SubgroupClass S G] {H K : S}
  (hH : H ≤ K), (↑K).comp (SubgroupClass.inclusion hH) = ↑H
Result.autoException ::
Duper saturated

Testing || ZeroHom.comp.proof_1 : ∀ {M : Type u_3} {N : Type u_2} {P : Type u_1} [inst : _root_.Zero M] [inst_1 : _root_.Zero N] [inst_2 : _root_.Zero P]
  (hnp : ZeroHom N P) (hmn : ZeroHom M N), hnp (hmn 0) = 0
Result.success

Testing || SubgroupClass.inclusion_right : ∀ {G : Type u_1} [inst : Group G] {S : Type u_4} {H K : S} [inst_1 : SetLike S G] [inst_2 : SubgroupClass S G]
  (h : H ≤ K) (x : ↥K) (hx : ↑x ∈ H), (SubgroupClass.inclusion h) ⟨↑x, hx⟩ = x
Result.autoException ::
Duper saturated

Testing || CategoryTheory.GrothendieckTopology.yonedaULiftEquiv_symm_naturality_right : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (J : CategoryTheory.GrothendieckTopology C)
  [inst_1 : J.Subcanonical] (X : C) {F F' : CategoryTheory.Sheaf J (Type (max v v'))} (f : F ⟶ F')
  (x : F.val.obj (Opposite.op X)),
  CategoryTheory.CategoryStruct.comp (J.yonedaULiftEquiv.symm x) f =
    J.yonedaULiftEquiv.symm (f.val.app (Opposite.op X) x)
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: F.val.obj (Opposite.op X) ⟶ F'.val.obj (Opposite.op X) is not a `∀`

Testing || OrderHom.lfp_le_fixed : ∀ {α : Type u} [inst : CompleteLattice α] (f : α →o α) {a : α}, f a = a → OrderHom.lfp f ≤ a
Result.success

Testing || summable_norm_pow_mul_geometric_of_norm_lt_one : ∀ {R : Type u_2} [inst : NormedRing R] (k : ℕ) {r : R}, ‖r‖ < 1 → Summable fun n => ‖↑n ^ k * r ^ n‖
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Real.volume_Icc : ∀ {a b : ℝ}, MeasureTheory.volume (Set.Icc a b) = ENNReal.ofReal (b - a)
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Bicategory.LeftExtension.whiskerOfCompIdIsoSelf_inv_right : ∀ {B : Type u} [inst : CategoryTheory.Bicategory B] {a b c : B} {f : a ⟶ b} {g : a ⟶ c}
  (t : CategoryTheory.Bicategory.LeftExtension f g),
  t.whiskerOfCompIdIsoSelf.inv.right = (CategoryTheory.Bicategory.rightUnitor t.extension).inv
Result.autoException ::
Duper saturated

Testing || CauSeq.mul_equiv_zero : ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrderedField α] [inst_1 : Ring β] {abv : β → α}
  [inst_2 : IsAbsoluteValue abv] (g : CauSeq β abv) {f : CauSeq β abv}, f ≈ 0 → g * f ≈ 0
Result.success

Testing || Auto.Embedding.Lam.LamEquiv.lshr_equiv : ∀ {lctx : ℕ → Embedding.Lam.LamSort} {a : Embedding.Lam.LamTerm} {n : ℕ} {b : Embedding.Lam.LamTerm}
  {lval : Embedding.Lam.LamValuation},
  Embedding.Lam.LamWF lval.toLamTyVal
      { lctx := lctx, rterm := a, rty := Embedding.Lam.LamSort.base (Embedding.Lam.LamBaseSort.bv n) } →
    Embedding.Lam.LamWF lval.toLamTyVal
        { lctx := lctx, rterm := b, rty := Embedding.Lam.LamSort.base Embedding.Lam.LamBaseSort.nat } →
      Embedding.Lam.LamEquiv lval lctx (Embedding.Lam.LamSort.base (Embedding.Lam.LamBaseSort.bv n))
        (Embedding.Lam.LamTerm.mkBvNatBinOp n (Embedding.Lam.BitVecConst.bvlshr n) a b)
        (Embedding.Lam.LamTerm.lshr_equiv n a b (Embedding.Lam.LamTerm.mkBvofNat n b))
Result.autoException ::
Duper saturated

Testing || PFunctor.M.cases_mk : ∀ {F : PFunctor.{u}} {r : F.M → Sort u_2} (x : ↑F F.M) (f : (x : ↑F F.M) → r (PFunctor.M.mk x)),
  PFunctor.M.cases f (PFunctor.M.mk x) = f x
Result.autoException ::
Duper saturated

Testing || SetLike.homogeneous_one : ∀ {ι : Type u_1} {R : Type u_2} {S : Type u_3} [inst : SetLike S R] [inst_1 : _root_.Zero ι] [inst_2 : _root_.One R]
  (A : ι → S) [inst_3 : SetLike.GradedOne A], SetLike.Homogeneous A 1
Result.autoException ::
Duper saturated

Testing || vadd_closure_orbit_subset : ∀ {M : Type u_1} {α : Type u_2} [inst : TopologicalSpace α] [inst_1 : AddMonoid M] [inst_2 : AddAction M α]
  [inst_3 : ContinuousConstVAdd M α] (c : M) (x : α), c +ᵥ closure (AddAction.orbit M x) ⊆ closure (AddAction.orbit M x)
Result.success

Testing || ProjectiveSpectrum.vanishingIdeal_anti_mono : ∀ {R : Type u_1} {A : Type u_2} [inst : CommSemiring R] [inst_1 : CommRing A] [inst_2 : Algebra R A]
  (𝒜 : ℕ → Submodule R A) [inst_3 : GradedAlgebra 𝒜] {s t : Set (ProjectiveSpectrum 𝒜)},
  s ⊆ t → ProjectiveSpectrum.vanishingIdeal t ≤ ProjectiveSpectrum.vanishingIdeal s
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: In α →
  Prop, type of ∀ bound variable is not of sort `Prop`, and depends on bound variables

Testing || abs_eq_max_neg : ∀ {α : Type u_1} [inst : AddGroup α] [inst_1 : LinearOrder α] {a : α}, |a| = a ⊔ -a
Result.success

Testing || AddCommGroup.ModEq.of_intCast : ∀ {α : Type u_1} [inst : AddCommGroupWithOne α] [inst_1 : CharZero α] {a b z : ℤ}, ↑a ≡ ↑b [PMOD ↑z] → a ≡ b [PMOD z]
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Polynomial.exists_eq_pow_rootMultiplicity_mul_and_not_dvd : ∀ {R : Type u} [inst : Ring R] (p : Polynomial R),
  p ≠ 0 →
    ∀ (a : R),
      ∃ q,
        p = (Polynomial.X - Polynomial.C a) ^ Polynomial.rootMultiplicity a p * q ∧ ¬Polynomial.X - Polynomial.C a ∣ q
Result.autoException ::
(deterministic) timeout at `printProof`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Submodule.lt_top_of_finrank_lt_finrank : ∀ {R : Type u} {M : Type v} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M] {s : Submodule R M},
  Module.finrank R ↥s < Module.finrank R M → s < ⊤
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.Ioc_diff_Ioo_self : ∀ {α : Type u_2} [inst : PartialOrder α] [inst_1 : LocallyFiniteOrder α] {a b : α} [inst_2 : DecidableEq α],
  a < b → Finset.Ioc a b \ Finset.Ioo a b = {b}
Result.success

Testing || FixedPoints.finrank_eq_card : ∀ (G : Type u_1) (F : Type u_2) [inst : Group G] [inst_1 : Field F] [inst_2 : MulSemiringAction G F]
  [inst_3 : Fintype G] [inst_4 : FaithfulSMul G F], Module.finrank (↥(FixedPoints.subfield G F)) F = Fintype.card G
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.InjectiveResolution.cocomplex_exactAt_succ : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroObject C]
  [inst_2 : CategoryTheory.Limits.HasZeroMorphisms C] {Z : C} (I : CategoryTheory.InjectiveResolution Z) (n : ℕ),
  HomologicalComplex.ExactAt I.cocomplex (n + 1)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.ι`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Finset.forall_mem_map : ∀ {α : Type u_1} {β : Type u_2} {f : α ↪ β} {s : Finset α} {p : (a : β) → a ∈ Finset.map f s → Prop},
  (∀ (y : β) (H : y ∈ Finset.map f s), p y H) ↔ ∀ (x : α) (H : x ∈ s), p (f x) ⋯
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `p y H✝`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || List.getElem?_len_le : ∀ {α : Type u_1} {l : List α} {n : ℕ}, l.length ≤ n → l[n]? = none
Result.autoException ::
Duper saturated

Testing || Ideal.finite_setOf_absNorm_le : ∀ {S : Type u_1} [inst : CommRing S] [inst_1 : Nontrivial S] [inst_2 : IsDedekindDomain S] [inst_3 : Module.Free ℤ S]
  [inst_4 : Module.Finite ℤ S] [inst_5 : CharZero S] (n : ℕ), {I | Ideal.absNorm I ≤ n}.Finite
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x_1 of λ binder contains bound variables

Testing || Finset.forall_mem_cons : ∀ {α : Type u_1} {s : Finset α} {a : α} (h : a ∉ s) (p : α → Prop), (∀ x ∈ Finset.cons a s h, p x) ↔ p a ∧ ∀ x ∈ s, p x
Result.autoException ::
Duper saturated

Testing || MeasureTheory.ProbabilityMeasure.apply_le_one : ∀ {Ω : Type u_1} [inst : MeasurableSpace Ω] (μ : MeasureTheory.ProbabilityMeasure Ω) (s : Set Ω), μ s ≤ 1
Result.success

Testing || LinearMap.toMatrixAlgEquiv'_apply : ∀ {R : Type u_1} [inst : CommSemiring R] {n : Type u_5} [inst_1 : DecidableEq n] [inst_2 : Fintype n]
  (f : (n → R) →ₗ[R] n → R) (i j : n), LinearMap.toMatrixAlgEquiv' f i j = f (fun j' => if j' = j then 1 else 0) i
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: Matrix n n R is not a `∀`

Testing || MeasureTheory.volume_preserving_pi_empty : ∀ {ι : Type u} (α : ι → Type v) [inst : Fintype ι] [inst_1 : IsEmpty ι]
  [inst_2 : (i : ι) → MeasureTheory.MeasureSpace (α i)],
  MeasureTheory.MeasurePreserving (⇑(MeasurableEquiv.ofUniqueOfUnique ((i : ι) → α i) Unit)) MeasureTheory.volume
    MeasureTheory.volume
Result.autoException ::
Duper saturated

Testing || Nat.zero_div : ∀ (b : ℕ), 0 / b = 0
Result.success

Testing || Filter.NeBot.vsub : ∀ {α : Type u_2} {β : Type u_3} [inst : VSub α β] {f g : Filter β}, f.NeBot → g.NeBot → (f -ᵥ g).NeBot
Result.success

Testing || _private.Mathlib.Tactic.Positivity.Basic.0.Mathlib.Meta.Positivity.ite_ne_zero_of_pos_of_ne_zero : ∀ {α : Type u_1} [inst : _root_.Zero α] (p : Prop) [inst_1 : Decidable p] {a b : α} [inst_2 : Preorder α],
  0 < a → b ≠ 0 → (if p then a else b) ≠ 0
Result.success

Testing || CategoryTheory.comp_inv_eq_id : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} (g : X ⟶ Y) [inst_1 : CategoryTheory.IsIso g]
  {f : X ⟶ Y}, CategoryTheory.CategoryStruct.comp f (CategoryTheory.inv g) = CategoryTheory.CategoryStruct.id X ↔ f = g
Result.autoException ::
Duper saturated

Testing || Ideal.IsHomogeneous.top : ∀ {ι : Type u_1} {σ : Type u_2} {A : Type u_3} [inst : Semiring A] [inst_1 : DecidableEq ι] [inst_2 : AddMonoid ι]
  [inst_3 : SetLike σ A] [inst_4 : AddSubmonoidClass σ A] (𝒜 : ι → σ) [inst_5 : GradedRing 𝒜], Ideal.IsHomogeneous 𝒜 ⊤
Result.autoException ::
Duper saturated

Testing || Std.DHashMap.Internal.List.Option.get_congr : ∀ {α : Type u} {o o' : Option α} {ho : o.isSome = true} (h : o = o'), o.get ho = o'.get ⋯
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SimpleGraph.irrefl : ∀ {V : Type u} (G : SimpleGraph V) {v : V}, ¬G.Adj v v
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.Topology.Algebra.UniformGroup.Basic.0.IsDenseInducing.extend_Z_bilin_aux : ∀ {α : Type u_1} {β : Type u_2} {δ : Type u_4} {G : Type u_5} [inst : TopologicalSpace α] [inst_1 : AddCommGroup α]
  [inst_2 : TopologicalAddGroup α] [inst_3 : TopologicalSpace β] [inst_4 : AddCommGroup β] [inst_5 : TopologicalSpace δ]
  [inst_6 : AddCommGroup δ] [inst_7 : UniformSpace G] [inst_8 : AddCommGroup G] {e : β →+ α},
  IsDenseInducing ⇑e →
    ∀ {φ : β →+ δ →+ G},
      (Continuous fun p => (φ p.1) p.2) →
        ∀ {W' : Set G},
          W' ∈ nhds 0 →
            ∀ (x₀ : α) (y₁ : δ),
              ∃ U₂ ∈ Filter.comap (⇑e) (nhds x₀), ∀ x ∈ U₂, ∀ x' ∈ U₂, (fun p => (φ p.1) p.2) (x' - x, y₁) ∈ W'
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `instTopologicalSpaceProd`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.WellFoundedOn.union : ∀ {α : Type u_2} {r : α → α → Prop} [inst : IsStrictOrder α r] {s t : Set α},
  s.WellFoundedOn r → t.WellFoundedOn r → (s ∪ t).WellFoundedOn r
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `RelEmbedding.instFunLike`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Basis.eq_of_apply_eq : ∀ {ι : Type u_1} {R : Type u_3} {M : Type u_6} [inst : Semiring R] [inst_1 : AddCommMonoid M]
  [inst_2 : _root_.Module R M] {b₁ b₂ : Basis ι R M}, (∀ (i : ι), b₁ i = b₂ i) → b₁ = b₂
Result.success

Testing || Polynomial.degree_neg_le_of_le : ∀ {R : Type u} [inst : Ring R] {a : WithBot ℕ} {p : Polynomial R}, p.degree ≤ a → (-p).degree ≤ a
Result.success

Testing || Filter.Eventually.of_forall : ∀ {α : Type u} {p : α → Prop} {f : Filter α}, (∀ (x : α), p x) → ∀ᶠ (x : α) in f, p x
Result.autoException ::
Duper saturated

Testing || Finset.Nonempty.of_compls : ∀ {α : Type u_2} [inst : BooleanAlgebra α] {s : Finset α}, s.compls.Nonempty → s.Nonempty
Result.success

Testing || ProbabilityTheory.preCDF_le_one : ∀ {α : Type u_1} {mα : MeasurableSpace α} (ρ : MeasureTheory.Measure (α × ℝ)) [inst : MeasureTheory.IsFiniteMeasure ρ],
  ∀ᵐ (a : α) ∂ρ.fst, ∀ (r : ℚ), ProbabilityTheory.preCDF ρ r a ≤ 1
Result.autoException ::
Auto.Monomorphization.FVarRep.constInst2FVarId :: Cannot find canonicalized instance of ConstInst ⦗⦗ @MeasureTheory.IsFiniteMeasure ((α ×
    ℝ) ×
  ℝ) (Prod.instMeasurableSpace) ⦘⦘

Testing || TensorProduct.comm_symm_tmul : ∀ (R : Type u_1) [inst : CommSemiring R] (M : Type u_4) (N : Type u_5) [inst_1 : AddCommMonoid M]
  [inst_2 : AddCommMonoid N] [inst_3 : _root_.Module R M] [inst_4 : _root_.Module R N] (m : M) (n : N),
  (TensorProduct.comm R M N).symm (n ⊗ₜ[R] m) = m ⊗ₜ[R] n
Result.autoException ::
Duper saturated

Testing || jacobiSum_nontrivial_inv : ∀ {F : Type u_1} {R : Type u_2} [inst : Field F] [inst_1 : Fintype F] [inst_2 : CommRing R] [inst_3 : IsDomain R]
  {χ : MulChar F R}, χ ≠ 1 → jacobiSum χ χ⁻¹ = -χ (-1)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `HasDistribNeg.toInvolutiveNeg`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Matrix.exp_blockDiagonal : ∀ (𝕂 : Type u_1) {m : Type u_2} {n : Type u_3} {𝔸 : Type u_5} [inst : Fintype m] [inst_1 : DecidableEq m]
  [inst_2 : Fintype n] [inst_3 : DecidableEq n] [inst_4 : Field 𝕂] [inst_5 : Ring 𝔸] [inst_6 : TopologicalSpace 𝔸]
  [inst_7 : TopologicalRing 𝔸] [inst_8 : Algebra 𝕂 𝔸] [inst_9 : T2Space 𝔸] (v : m → Matrix n n 𝔸),
  NormedSpace.exp 𝕂 (Matrix.blockDiagonal v) = Matrix.blockDiagonal (NormedSpace.exp 𝕂 v)
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: FormalMultilinearSeries 𝕂 (Matrix (n✝ × m) (n✝ × m) 𝔸)
  (Matrix (n✝ × m) (n✝ × m) 𝔸) is not a `∀`

Testing || MeasureTheory.Memℒp.exists_snorm_indicator_compl_lt : ∀ {α : Type u_1} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α} {β : Type u_5}
  [inst : NormedAddCommGroup β],
  p ≠ ⊤ →
    ∀ {f : α → β},
      MeasureTheory.Memℒp f p μ →
        ∀ {ε : ENNReal}, ε ≠ 0 → ∃ s, MeasurableSet s ∧ μ s < ⊤ ∧ MeasureTheory.eLpNorm (sᶜ.indicator f) p μ < ε
Result.success

Testing || AddCon.correspondence.proof_1 : ∀ {M : Type u_1} [inst : Add M] (c : AddCon M) (x x_1 : M), ↑(x + x_1) = ↑(x + x_1)
Result.success

Testing || ProbabilityTheory.set_integral_condCDF : ∀ {α : Type u_1} {mα : MeasurableSpace α} (ρ : MeasureTheory.Measure (α × ℝ)) [inst : MeasureTheory.IsFiniteMeasure ρ]
  (x : ℝ) {s : Set α},
  MeasurableSet s → ∫ (a : α) in s, ↑(ProbabilityTheory.condCDF ρ a) x ∂ρ.fst = (ρ (s ×ˢ Set.Iic x)).toReal
Result.success

Testing || Asymptotics.IsLittleO.of_neg_right : ∀ {α : Type u_1} {E : Type u_3} {F' : Type u_7} [inst : Norm E] [inst_1 : SeminormedAddCommGroup F'] {f : α → E}
  {g' : α → F'} {l : Filter α}, (f =o[l] fun x => -g' x) → f =o[l] g'
Result.success

Testing || CategoryTheory.Limits.image.fac_lift : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} {f : X ⟶ Y}
  [inst_1 : CategoryTheory.Limits.HasImage f] (F' : CategoryTheory.Limits.MonoFactorisation f),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.factorThruImage f) (CategoryTheory.Limits.image.lift F') =
    F'.e
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.lift x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Batteries.UnionFind.root_link.go : ∀ {self : Batteries.UnionFind} {x y : Fin self.size},
  self.parent ↑x = ↑x →
    self.parent ↑y = ↑y →
      ∀ {m : Batteries.UnionFind},
        (∀ (i : ℕ), m.parent i = if ↑y = i then ↑x else self.parent i) →
          ∀ (i : ℕ), m.rootD i = if self.rootD i = ↑x ∨ self.rootD i = ↑y then ↑x else self.rootD i
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Submodule.liftQ_mkQ : ∀ {R : Type u_1} {M : Type u_2} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : _root_.Module R M]
  (p : Submodule R M) {R₂ : Type u_3} {M₂ : Type u_4} [inst_3 : Ring R₂] [inst_4 : AddCommGroup M₂]
  [inst_5 : _root_.Module R₂ M₂] {τ₁₂ : R →+* R₂} (f : M →ₛₗ[τ₁₂] M₂) (h : p ≤ LinearMap.ker f),
  (p.liftQ f h).comp p.mkQ = f
Result.autoException ::
Duper saturated

Testing || toAlgHom_comp_sectionOfRetractionKerToTensor : ∀ {R P S : Type u} [inst : CommRing R] [inst_1 : CommRing P] [inst_2 : CommRing S] [inst_3 : Algebra R P]
  [inst_4 : Algebra P S] (l : TensorProduct P S (Ω[P⁄R]) →ₗ[P] ↥(RingHom.ker (algebraMap P S)))
  (hl : l ∘ₗ KaehlerDifferential.kerToTensor R P S = LinearMap.id) [inst_5 : Algebra R S] [inst_6 : IsScalarTower R P S]
  (hf' : RingHom.ker (algebraMap P S) ^ 2 = ⊥) (hf : Function.Surjective ⇑(algebraMap P S)),
  (IsScalarTower.toAlgHom R P S).comp (sectionOfRetractionKerToTensor l hl hf' hf) = AlgHom.id R S
Result.autoException ::
Duper saturated

Testing || NonUnitalAlgebra.map_top : ∀ {R : Type u} {A : Type v} {B : Type w} [inst : CommSemiring R] [inst_1 : NonUnitalNonAssocSemiring A]
  [inst_2 : _root_.Module R A] [inst_3 : NonUnitalNonAssocSemiring B] [inst_4 : _root_.Module R B]
  [inst_5 : IsScalarTower R A A] [inst_6 : SMulCommClass R A A] (f : A →ₙₐ[R] B),
  NonUnitalSubalgebra.map f ⊤ = NonUnitalAlgHom.range f
Result.autoException ::
Duper saturated

Testing || Set.image2_iInter₂_subset_right : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} {ι : Sort u_4} {κ : ι → Sort u_7} (f : α → β → γ) (s : Set α)
  (t : (i : ι) → κ i → Set β), Set.image2 f s (⋂ i, ⋂ j, t i j) ⊆ ⋂ i, ⋂ j, Set.image2 f s (t i j)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type κ i✝ of λ binder contains bound variables

Testing || Cycle.formPerm_eq_formPerm_iff : ∀ {α : Type u_2} [inst : DecidableEq α] {s s' : Cycle α} {hs : s.Nodup} {hs' : s'.Nodup},
  s.formPerm hs = s'.formPerm hs' ↔ s = s' ∨ s.Subsingleton ∧ s'.Subsingleton
Result.autoException ::
Duper saturated

Testing || ne_neg_of_mem_sphere : ∀ (𝕜 : Type u_1) {E : Type u_3} [inst : NormedField 𝕜] [inst_1 : SeminormedAddCommGroup E] [inst_2 : NormedSpace 𝕜 E]
  [inst : CharZero 𝕜] {r : ℝ}, r ≠ 0 → ∀ (x : ↑(Metric.sphere 0 r)), x ≠ -x
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Module.toMulActionWithZero`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Mon_.EquivLaxMonoidalFunctorPUnit.monToLaxMonoidalObj_ε : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] (A : Mon_ C),
  CategoryTheory.Functor.LaxMonoidal.ε (Mon_.EquivLaxMonoidalFunctorPUnit.monToLaxMonoidalObj A) = A.one
Result.success

Testing || Tropical.untrop_lt_iff : ∀ {R : Type u} [inst : LT R] {x y : Tropical R}, Tropical.untrop x < Tropical.untrop y ↔ x < y
Result.autoException ::
application type mismatch
  y = Tropical.untrop y
argument
  Tropical.untrop y
has type
  R : Type u
but is expected to have type
  Tropical R : Type u

Testing || Cardinal.principal_add_ord : ∀ {c : Cardinal.{u_1}}, Cardinal.aleph0 ≤ c → Ordinal.Principal (fun x1 x2 => x1 + x2) c.ord
Result.autoException ::
Duper saturated

Testing || RingHom.eq_of_eqOn_set_top : ∀ {R : Type u} [inst : Ring R] {S : Type v} [inst_1 : Semiring S] {f g : R →+* S}, Set.EqOn ⇑f ⇑g ↑⊤ → f = g
Result.autoException ::
Duper saturated

Testing || Complex.tan_ofReal_im : ∀ (x : ℝ), (Complex.tan ↑x).im = 0
Result.success

Testing || if_pos : ∀ {c : Prop} {h : Decidable c}, c → ∀ {α : Sort u} {t e : α}, (if c then t else e) = t
Result.success

Testing || CategoryTheory.Grothendieck.grothendieckTypeToCat_counitIso_hom_app_coe : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (G : CategoryTheory.Functor C (Type w)) (X : G.Elements),
  ↑((CategoryTheory.Grothendieck.grothendieckTypeToCat G).counitIso.hom.app X) = CategoryTheory.CategoryStruct.id X.fst
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: G.obj
    (((CategoryTheory.Grothendieck.grothendieckTypeToCat G).inverse.comp
            (CategoryTheory.Grothendieck.grothendieckTypeToCat G).functor).obj
        X).fst ⟶
  G.obj ((CategoryTheory.Functor.id G.Elements).obj X).fst is not a `∀`

Testing || Measurable.mul_iff_right : ∀ {α : Type u_1} {G : Type u_2} [inst : MeasurableSpace G] [inst_1 : MeasurableSpace α] [inst_2 : CommGroup G]
  [inst_3 : MeasurableMul₂ G] [inst_4 : MeasurableInv G] {f g : α → G},
  Measurable f → (Measurable (f * g) ↔ Measurable g)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Filter.atBot_Iic_eq : ∀ {α : Type u_3} [inst : Preorder α] [inst_1 : IsDirected α fun x1 x2 => x1 ≥ x2] (a : α),
  Filter.atBot = Filter.comap Subtype.val Filter.atBot
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Subtype.preorder fun x =>
  cifvar_10 (cifvar_11 x_1) x`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || nnnorm_nsmul_le : ∀ {E : Type u_5} [inst : SeminormedAddCommGroup E] (n : ℕ) (a : E), ‖n • a‖₊ ≤ ↑n * ‖a‖₊
Result.autoException ::
Duper saturated

Testing || Set.Ioo_subset_Ioo_union_Ioo : ∀ {α : Type u_1} [inst : LinearOrder α] {a a₁ b b₁ c d : α},
  a ≤ a₁ → c < b → b₁ ≤ d → Set.Ioo a₁ b₁ ⊆ Set.Ioo a b ∪ Set.Ioo c d
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Filter.NeBot.of_mul_left : ∀ {α : Type u_2} [inst : Mul α] {f g : Filter α}, (f * g).NeBot → f.NeBot
Result.autoException ::
Duper saturated

Testing || Ideal.factors_decreasing : ∀ {α : Type u} [inst : CommSemiring α] [inst_1 : IsDomain α] (b₁ b₂ : α),
  b₁ ≠ 0 → ¬IsUnit b₂ → Ideal.span {b₁ * b₂} < Ideal.span {b₁}
Result.autoException ::
Duper saturated

Testing || AffineSubspace.wOppSide_lineMap_left : ∀ {R : Type u_1} {V : Type u_2} {P : Type u_4} [inst : StrictOrderedCommRing R] [inst_1 : AddCommGroup V]
  [inst_2 : _root_.Module R V] [inst_3 : AddTorsor V P] {s : AffineSubspace R P} {x : P} (y : P),
  x ∈ s → ∀ {t : R}, t ≤ 0 → s.WOppSide ((AffineMap.lineMap x y) t) y
Result.autoException ::
Duper saturated

Testing || TensorProduct.finsuppRight_apply_tmul : ∀ {R : Type u_1} [inst : CommSemiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]
  {N : Type u_3} [inst_3 : AddCommMonoid N] [inst_4 : _root_.Module R N] {ι : Type u_4} [inst_5 : DecidableEq ι] (m : M)
  (p : ι →₀ N), (TensorProduct.finsuppRight R M N ι) (m ⊗ₜ[R] p) = p.sum fun i n => fun₀ | i => m ⊗ₜ[R] n
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Int.le_neg_of_le_neg : ∀ {a b : ℤ}, a ≤ -b → b ≤ -a
Result.success

Testing || AddGroup.fintypeOfKerOfCodom.proof_2 : ∀ {G H : Type u_1} [inst : AddGroup G] [inst_1 : AddGroup H] (g : G →+ H),
  ∀ x ∈ g.ker, ∃ y, (AddSubgroup.topEquiv.toAddMonoidHom.comp (AddSubgroup.inclusion ⋯)) y = x
Result.autoException ::
Duper saturated

Testing || Nat.choose_symm : ∀ {n k : ℕ}, k ≤ n → n.choose (n - k) = n.choose k
Result.success

Testing || tendsto_self_mul_const_pow_of_abs_lt_one : ∀ {r : ℝ}, |r| < 1 → Filter.Tendsto (fun n => ↑n * r ^ n) Filter.atTop (nhds 0)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || UInt64.pow_def : ∀ (a : UInt64) (n : ℕ), a ^ n = { toBitVec := { toFin := a.val ^ n } }
Result.success

Testing || ContDiffAt.contDiffAt_norm_smul : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {n : WithTop ℕ∞} {x : E} {t : ℝ},
  t ≠ 0 → ContDiffAt ℝ n (fun x => ‖x‖) x → ContDiffAt ℝ n (fun x => ‖x‖) (t • x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LT.lt.trans_le' : ∀ {α : Type u_2} [inst : Preorder α] {a b c : α}, b < c → a ≤ b → a < c
Result.success

Testing || Matrix.Fin.circulant_inj : ∀ {α : Type u_1} {n : ℕ} {v w : Fin n → α}, Matrix.circulant v = Matrix.circulant w ↔ v = w
Result.success

Testing || Matrix.inv_kronecker : ∀ {R : Type u_1} {m : Type u_9} {n : Type u_10} [inst : Fintype m] [inst_1 : Fintype n] [inst_2 : DecidableEq m]
  [inst_3 : DecidableEq n] [inst_4 : CommRing R] (A : Matrix m m R) (B : Matrix n n R),
  (Matrix.kroneckerMap (fun x1 x2 => x1 * x2) A B)⁻¹ = Matrix.kroneckerMap (fun x1 x2 => x1 * x2) A⁻¹ B⁻¹
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, ((!13 (!14 !15 x0)) → ((!7 x0 (!0 x0)) = !8))) is not type correct

Testing || ContinuousMap.HomotopyEquiv.continuous : ∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]
  (h : ContinuousMap.HomotopyEquiv X Y), Continuous ↑h
Result.success

Testing || PrincipalSeg.toRelEmbedding_inj : ∀ {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop} [inst : IsIrrefl β s] [inst : IsTrichotomous β s]
  {f g : r ≺i s}, f.toRelEmbedding = g.toRelEmbedding ↔ f = g
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x_0 ≺i x_1 of λ binder contains bound variables

Testing || CategoryTheory.mop_inv_rightUnitor : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] (X : C),
  (CategoryTheory.MonoidalCategory.rightUnitor X).inv.mop =
    (CategoryTheory.MonoidalCategory.leftUnitor { unmop := X }).inv
Result.autoException ::
Duper saturated

Testing || CauSeq.const_one : ∀ {α : Type u_1} {β : Type u_2} [inst : LinearOrderedField α] [inst_1 : Ring β] {abv : β → α}
  [inst_2 : IsAbsoluteValue abv], CauSeq.const abv 1 = 1
Result.success

Testing || Polynomial.aeval_X_left_apply : ∀ {R : Type u} [inst : CommSemiring R] (p : Polynomial R), (Polynomial.aeval Polynomial.X) p = p
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.SetTheory.Ordinal.Principal.0.Ordinal.principal_nfp_iSup : ∀ (op : Ordinal.{u_1} → Ordinal.{u_1} → Ordinal.{u_1}) (o : Ordinal.{u_1}),
  Ordinal.Principal op (Ordinal.nfp (fun x => ⨆ y, Order.succ (op (↑y).1 (↑y).2)) o)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || List.attach_filterMap : ∀ {α : Type u_1} {β : Type u_2} {l : List α} {f : α → Option β},
  (List.filterMap f l).attach =
    List.filterMap
      (fun x =>
        match x with
        | ⟨x, h⟩ => (f x).pbind fun b m => some ⟨b, ⋯⟩)
      l.attach
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type b ∈ f ↑x✝ of λ binder contains bound variables

Testing || Trunc.out_eq : ∀ {α : Sort u_1} (q : Trunc α), Trunc.mk q.out = q
Result.autoException ::
Duper saturated

Testing || Std.HashMap.getElem?_erase : ∀ {α : Type u} {β : Type v} {x : BEq α} {x_1 : Hashable α} {m : Std.HashMap α β} [inst : EquivBEq α]
  [inst : LawfulHashable α] {k a : α}, (m.erase k)[a]? = if (k == a) = true then none else m[a]?
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || IsBoundedLinearMap.hasFDerivAt : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {x : E} (h : IsBoundedLinearMap 𝕜 f), HasFDerivAt f h.toContinuousLinearMap x
Result.autoException ::
Duper saturated

Testing || IsLocalHomeomorph.isLocallyInjective : ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] {f : X → Y},
  IsLocalHomeomorph f → IsLocallyInjective f
Result.autoException ::
Duper saturated

Testing || NumberField.mixedEmbedding.convexBodyLT'_volume : ∀ (K : Type u_1) [inst : Field K] (f : NumberField.InfinitePlace K → NNReal) (w₀ : { w // w.IsComplex })
  [inst_1 : NumberField K],
  MeasureTheory.volume (NumberField.mixedEmbedding.convexBodyLT' K f w₀) =
    ↑(NumberField.mixedEmbedding.convexBodyLT'Factor K) * ↑(∏ w : NumberField.InfinitePlace K, f w ^ w.mult)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || WeierstrassCurve.Affine.evalEval_polynomialX : ∀ {R : Type u} [inst : CommRing R] (W : WeierstrassCurve.Affine R) (x y : R),
  Polynomial.evalEval x y W.polynomialX = W.a₁ * y - (3 * x ^ 2 + 2 * W.a₂ * x + W.a₄)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MvPolynomial.cardinal_mk_eq_max : ∀ {σ R : Type u} [inst : CommSemiring R] [inst_1 : Nonempty σ] [inst_2 : Nontrivial R],
  Cardinal.mk (MvPolynomial σ R) = Cardinal.mk R ⊔ Cardinal.mk σ ⊔ Cardinal.aleph0
Result.autoException ::
Duper saturated

Testing || Metric.preimage_smul_ball : ∀ {G : Type v} {X : Type w} [inst : PseudoMetricSpace X] [inst_1 : Group G] [inst_2 : MulAction G X]
  [inst_3 : IsometricSMul G X] (c : G) (x : X) (r : ℝ), (fun x => c • x) ⁻¹' Metric.ball x r = Metric.ball (c⁻¹ • x) r
Result.success

Testing || Part.neg_some : ∀ {α : Type u_1} [inst : Neg α] (a : α), -Part.some a = Part.some (-a)
Result.autoException ::
Duper saturated

Testing || AddMonoidHom.isOpenMap_of_sigmaCompact : ∀ {G : Type u_1} [inst : TopologicalSpace G] [inst_1 : AddGroup G] [inst_2 : TopologicalAddGroup G]
  [inst_3 : SigmaCompactSpace G] {H : Type u_3} [inst_4 : AddGroup H] [inst_5 : TopologicalSpace H]
  [inst_6 : BaireSpace H] [inst_7 : T2Space H] [inst_8 : ContinuousAdd H] (f : G →+ H),
  Function.Surjective ⇑f → Continuous ⇑f → IsOpenMap ⇑f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `AddAction.toVAdd`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Finset.vadd_finset_sdiff : ∀ {α : Type u_2} {β : Type u_3} [inst : DecidableEq β] [inst_1 : AddGroup α] [inst_2 : AddAction α β] {s t : Finset β}
  {a : α}, a +ᵥ s \ t = (a +ᵥ s) \ (a +ᵥ t)
Result.autoException ::
Duper saturated

Testing || isPurelyInseparable_iff_fd_isPurelyInseparable : ∀ {F : Type u} {E : Type v} [inst : Field F] [inst_1 : Field E] [inst_2 : Algebra F E]
  [inst_3 : Algebra.IsAlgebraic F E],
  IsPurelyInseparable F E ↔ ∀ (L : IntermediateField F E), FiniteDimensional F ↥L → IsPurelyInseparable F ↥L
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `L.toField`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.Lp.edist_dist : ∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}
  [inst : NormedAddCommGroup E] (f g : ↥(MeasureTheory.Lp E p μ)), edist f g = ENNReal.ofReal (dist f g)
Result.success

Testing || Matroid.Base.basis_ground : ∀ {α : Type u_1} {M : Matroid α} {B : Set α}, M.Base B → M.Basis B M.E
Result.success

Testing || is_ascending_rev_series_of_is_descending : ∀ (G : Type u_1) [inst : Group G] {H : ℕ → Subgroup G} {n : ℕ},
  H n = ⊥ → IsDescendingCentralSeries H → IsAscendingCentralSeries fun m => H (n - m)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || WeierstrassCurve.VariableChange.comp_left_inv : ∀ {R : Type u} [inst : CommRing R] (C : WeierstrassCurve.VariableChange R),
  C.inv.comp C = WeierstrassCurve.VariableChange.id
Result.autoException ::
Duper saturated

Testing || Multiset.fold_add : ∀ {α : Type u_1} (op : α → α → α) [hc : Std.Commutative op] [ha : Std.Associative op] (b₁ b₂ : α) (s₁ s₂ : Multiset α),
  Multiset.fold op (op b₁ b₂) (s₁ + s₂) = op (Multiset.fold op b₁ s₁) (Multiset.fold op b₂ s₂)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.WithTerminal.inclLift_inv_app : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {D : Type u_1} [inst_1 : CategoryTheory.Category.{u_2, u_1} D]
  {Z : D} (F : CategoryTheory.Functor C D) (M : (x : C) → F.obj x ⟶ Z)
  (hM : ∀ (x y : C) (f : x ⟶ y), CategoryTheory.CategoryStruct.comp (F.map f) (M y) = M x) (x : C),
  (CategoryTheory.WithTerminal.inclLift F M hM).inv.app x = CategoryTheory.CategoryStruct.id (F.obj x)
Result.autoException ::
Duper saturated

Testing || Set.ite_univ : ∀ {α : Type u} (s s' : Set α), Set.univ.ite s s' = s
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, (∀ x1 : #0, ((!5 x0 x1) = (!4 x0 (λx2 : #1, ((!8 x1 x2) → False)))))) is not type correct

Testing || Finset.nonempty_of_sum_ne_zero : ∀ {α : Type u_3} {β : Type u_4} {s : Finset α} {f : α → β} [inst : AddCommMonoid β], ∑ x ∈ s, f x ≠ 0 → s.Nonempty
Result.success

Testing || MeasureTheory.OuterMeasure.isCaratheodory_iff_le' : ∀ {α : Type u} (m : MeasureTheory.OuterMeasure α) {s : Set α},
  m.IsCaratheodory s ↔ ∀ (t : Set α), m (t ∩ s) + m (t \ s) ≤ m t
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #1, (∀ x1 : #1, ((!7 x0 x1) = (!6 x0 (λx2 : #3, ((!8 x1 x2) → False)))))) is not type correct

Testing || WithZero.coe_inj : ∀ {α : Type u} {a b : α}, ↑a = ↑b ↔ a = b
Result.autoException ::
Duper saturated

Testing || CategoryTheory.InjectiveResolution.exact_succ : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroObject C]
  [inst_2 : CategoryTheory.Limits.HasZeroMorphisms C] {Z : C} (I : CategoryTheory.InjectiveResolution Z) (n : ℕ),
  (CategoryTheory.ShortComplex.mk (I.cocomplex.d n (n + 1)) (I.cocomplex.d (n + 1) (n + 2)) ⋯).Exact
Result.autoException ::
Duper saturated

Testing || Auto.Embedding.pushLCtxsDep_cons : ∀ {α : Type u_1} {lctxty : α → Sort u} {ty : α} (x : lctxty ty) {tys : List α} (xs : HList lctxty tys) {rty : ℕ → α}
  (lctx : (n : ℕ) → lctxty (rty n)),
  HEq (Embedding.pushLCtxsDep (HList.cons x xs) lctx) (Embedding.pushLCtxDep x (Embedding.pushLCtxsDep xs lctx))
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Auto.HList.getD cifvar_14
  (cifvar_15 cifvar_16 cifvar_17) n✝¹`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Mathlib.Vector.tail_cons : ∀ {α : Type u_1} {n : ℕ} (a : α) (v : Mathlib.Vector α n), (a ::ᵥ v).tail = v
Result.autoException ::
Duper saturated

Testing || Orientation.oangle_rotation_right : ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : Fact (Module.finrank ℝ V = 2)]
  (o : Orientation ℝ V (Fin 2)) {x y : V},
  x ≠ 0 → y ≠ 0 → ∀ (θ : Real.Angle), o.oangle x ((o.rotation θ) y) = o.oangle x y + θ
Result.autoException ::
(deterministic) timeout at `«backward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || BoundedContinuousFunction.isEmbedding_coeFn : ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β],
  Topology.IsEmbedding (⇑UniformFun.ofFun ∘ DFunLike.coe)
Result.autoException ::
Duper saturated

Testing || Finsupp.mul_prod_erase : ∀ {α : Type u_1} {M : Type u_8} {N : Type u_10} [inst : _root_.Zero M] [inst_1 : CommMonoid N] (f : α →₀ M) (y : α)
  (g : α → M → N), y ∈ f.support → g y (f y) * (Finsupp.erase y f).prod g = f.prod g
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_1.erase x_3`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Finset.coe_offDiag : ∀ {α : Type u_1} [inst : DecidableEq α] (s : Finset α), ↑s.offDiag = (↑s).offDiag
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_1.offDiag`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || IsSimpleRing.injective_ringHom_or_subsingleton_codomain : ∀ {R : Type u_2} {S : Type u_3} [inst : NonAssocRing R] [inst_1 : IsSimpleRing R] [inst_2 : NonAssocSemiring S]
  (f : R →+* S), Function.Injective ⇑f ∨ Subsingleton S
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LinearOrderedField.cutMap_nonempty : ∀ {α : Type u_2} (β : Type u_3) [inst : LinearOrderedField α] [inst_1 : LinearOrderedField β] [inst_2 : Archimedean α]
  (a : α), (LinearOrderedField.cutMap β a).Nonempty
Result.autoException ::
Duper saturated

Testing || Monoid.PushoutI.NormalWord.cons_toList : ∀ {ι : Type u_1} {G : ι → Type u_2} {H : Type u_3} [inst : (i : ι) → Group (G i)] [inst_1 : Group H]
  {φ : (i : ι) → H →* G i} {d : Monoid.PushoutI.NormalWord.Transversal φ} {i : ι} (g : G i)
  (w : Monoid.PushoutI.NormalWord d) (hmw : w.fstIdx ≠ some i) (hgr : g ∉ (φ i).range),
  (Monoid.PushoutI.NormalWord.cons g w hmw hgr).toList = ⟨i, ↑(⋯.equiv (g * (φ i) w.head)).2⟩ :: w.toList
Result.autoException ::
Duper saturated

Testing || List.Subperm.length_le : ∀ {α : Type u_1} {l₁ l₂ : List α}, l₁.Subperm l₂ → l₁.length ≤ l₂.length
Result.autoException ::
Duper saturated

Testing || isPiSystem_Ioi : ∀ {α : Type u_1} [inst : LinearOrder α], IsPiSystem (Set.range Set.Ioi)
Result.success

Testing || nullMeasurableSet_region_between_oc : ∀ {α : Type u_1} [inst : MeasurableSpace α] (μ : MeasureTheory.Measure α) {f g : α → ℝ},
  AEMeasurable f μ →
    AEMeasurable g μ →
      ∀ {s : Set α},
        MeasureTheory.NullMeasurableSet s μ →
          MeasureTheory.NullMeasurableSet {p | p.1 ∈ s ∧ p.2 ∈ Set.Ioc (f p.1) (g p.1)} (μ.prod MeasureTheory.volume)
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #3, (∀ x1 : #3, ((!15 x0 x1) = (!22 (!15 x0 x1))))) is not type correct

Testing || OmegaCompletePartialOrder.ContinuousHom.id_comp : ∀ {β : Type u_3} {γ : Type u_4} [inst : OmegaCompletePartialOrder β] [inst_1 : OmegaCompletePartialOrder γ]
  (f : β →𝒄 γ), OmegaCompletePartialOrder.ContinuousHom.id.comp f = f
Result.autoException ::
Duper saturated

Testing || TopologicalSpace.IsTopologicalBasis.sigma : ∀ {ι : Type u_1} {E : ι → Type u_2} [inst : (i : ι) → TopologicalSpace (E i)] {s : (i : ι) → Set (Set (E i))},
  (∀ (i : ι), TopologicalSpace.IsTopologicalBasis (s i)) →
    TopologicalSpace.IsTopologicalBasis (⋃ i, (fun u => Sigma.mk i '' u) '' s i)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝ x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Fin.val_ne_of_ne : ∀ {n : ℕ} {i j : Fin n}, i ≠ j → ↑i ≠ ↑j
Result.success

Testing || Nat.totient_even : ∀ {n : ℕ}, 2 < n → Even n.totient
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Units.instNeg`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || HomologicalComplex.dgoEquivHomologicalComplexCounitIso_inv_app_f : ∀ {β : Type u_1} [inst : AddCommGroup β] (b : β) (V : Type u_2) [inst_1 : CategoryTheory.Category.{u_3, u_2} V]
  [inst_2 : CategoryTheory.Limits.HasZeroMorphisms V] (X : HomologicalComplex V (ComplexShape.up' b)) (i : β),
  ((HomologicalComplex.dgoEquivHomologicalComplexCounitIso b V).inv.app X).f i =
    CategoryTheory.CategoryStruct.id (X.X i)
Result.autoException ::
Duper saturated

Testing || ConvexOn.comp_linearMap : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} {β : Type u_5} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]
  [inst_2 : AddCommMonoid F] [inst_3 : OrderedAddCommMonoid β] [inst_4 : _root_.Module 𝕜 E] [inst_5 : _root_.Module 𝕜 F]
  [inst_6 : SMul 𝕜 β] {f : F → β} {s : Set F}, ConvexOn 𝕜 s f → ∀ (g : E →ₗ[𝕜] F), ConvexOn 𝕜 (⇑g ⁻¹' s) (f ∘ ⇑g)
Result.autoException ::
Duper saturated

Testing || Prod.normedAddCommGroup.proof_2 : ∀ {E : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedAddCommGroup F] {x y : E × F},
  dist x y = 0 → x = y
Result.success

Testing || MeasureTheory.pdf.uniformPDF_ite : ∀ {E : Type u_1} [inst : MeasurableSpace E] {μ : MeasureTheory.Measure E} {s : Set E} {x : E},
  MeasureTheory.pdf.uniformPDF s x μ = if x ∈ s then (μ s)⁻¹ else 0
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Monad.left_unit_assoc : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] (self : CategoryTheory.Monad C) (X : C) {Z : C}
  (h : self.obj X ⟶ Z),
  CategoryTheory.CategoryStruct.comp (self.η.app (self.obj X)) (CategoryTheory.CategoryStruct.comp (self.μ.app X) h) = h
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.compl_eq_univ_iff : ∀ {α : Type u_1} [inst : Fintype α] [inst_1 : DecidableEq α] (s : Finset α), sᶜ = Finset.univ ↔ s = ∅
Result.success

Testing || CategoryTheory.Grothendieck.id_fiber : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {F : CategoryTheory.Functor C CategoryTheory.Cat}
  (X : CategoryTheory.Grothendieck F), (CategoryTheory.CategoryStruct.id X).fiber = CategoryTheory.eqToHom ⋯
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: In ∀
  (p : (F.map (CategoryTheory.CategoryStruct.id X).base).obj X.fiber = X.fiber),
  (CategoryTheory.CategoryStruct.id X).fiber =
    CategoryTheory.eqToHom p, type of dependent ∀ bound variable is of sort `Prop`

Testing || tsum_def : ∀ {α : Type u_4} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {β : Type u_5} (f : β → α),
  tsum f = if h : Summable f then if (Function.support f).Finite then finsum f else Exists.choose h else 0
Result.autoException ::
Duper saturated

Testing || Function.update_mono : ∀ {ι : Type u_1} {π : ι → Type u_3} [inst : DecidableEq ι] [inst_1 : (i : ι) → Preorder (π i)] {f : (i : ι) → π i}
  {i : ι}, Monotone (Function.update f i)
Result.autoException ::
Duper saturated

Testing || MeasureTheory.SignedMeasure.toSignedMeasure_toJordanDecomposition : ∀ {α : Type u_1} [inst : MeasurableSpace α] (s : MeasureTheory.SignedMeasure α),
  s.toJordanDecomposition.toSignedMeasure = s
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type MeasurableSet i of λ binder contains bound variables

Testing || threeGPFree_smul_set : ∀ {α : Type u_2} [inst : CancelCommMonoid α] {s : Set α} {a : α}, ThreeGPFree (a • s) ↔ ThreeGPFree s
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || QuadraticMap.polar_neg : ∀ {M : Type u_4} {N : Type u_5} [inst : AddCommGroup M] [inst_1 : AddCommGroup N] (f : M → N) (x y : M),
  QuadraticMap.polar (-f) x y = -QuadraticMap.polar f x y
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || BialgHomClass.map_comp_comulAlgHom : ∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} {F : Type u_4} [inst : CommSemiring R] [inst_1 : Semiring A]
  [inst_2 : Bialgebra R A] [inst_3 : Semiring B] [inst_4 : Bialgebra R B] [inst_5 : FunLike F A B]
  [inst_6 : BialgHomClass F R A B] (f : F),
  (Algebra.TensorProduct.map ↑f ↑f).comp (Bialgebra.comulAlgHom R A) = (Bialgebra.comulAlgHom R B).comp ↑f
Result.autoException ::
Duper saturated

Testing || Finset.Ico_inter_Ico_consecutive : ∀ {α : Type u_2} [inst : PartialOrder α] [inst_1 : LocallyFiniteOrder α] [inst_2 : DecidableEq α] (a b c : α),
  Finset.Ico a b ∩ Finset.Ico b c = ∅
Result.success

Testing || _private.Mathlib.Order.Interval.Set.Image.0.Set.image_subtype_val_Ixx_Iix : ∀ {α : Type u_1} {p q r : α → α → Prop} {a b : α} (c : { x // p a x ∧ q x b }),
  (∀ {x : α}, r x ↑c → q x b) → Subtype.val '' {y | r ↑y ↑c} = {y | p a y ∧ r y ↑c}
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_0 } of λ binder contains bound variables

Testing || FiniteField.sum_pow_units : ∀ (K : Type u_1) [inst : Field K] [inst_1 : Fintype K] [inst_2 : DecidableEq K] (i : ℕ),
  ∑ x : Kˣ, ↑x ^ i = if Fintype.card K - 1 ∣ i then -1 else 0
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || WeierstrassCurve.Projective.nonsingular_some : ∀ {R : Type u} {W' : WeierstrassCurve.Projective R} [inst : CommRing R] (X Y : R),
  W'.Nonsingular ![X, Y, 1] ↔ W'.toAffine.Nonsingular X Y
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.unopUnop_map : ∀ (C : Type u₁) [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : Cᵒᵖᵒᵖ} (f : X ⟶ Y),
  (CategoryTheory.unopUnop C).map f = f.unop.unop
Result.autoException ::
application type mismatch
  X✝ = Opposite.unop (Opposite.op X✝)
argument
  Opposite.unop (Opposite.op X✝)
has type
  Cᵒᵖ : Type u₁
but is expected to have type
  Cᵒᵖᵒᵖ : Type u₁

Testing || Function.Surjective.lieAlgebra_isSolvable : ∀ {R : Type u} {L : Type v} {L' : Type w₁} [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]
  [inst_3 : LieRing L'] [inst_4 : LieAlgebra R L'] {f : L' →ₗ⁅R⁆ L} [h₁ : LieAlgebra.IsSolvable R L'],
  Function.Surjective ⇑f → LieAlgebra.IsSolvable R L
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || isAddFreimanIso_empty : ∀ {α : Type u_2} {β : Type u_3} [inst : AddCommMonoid α] [inst_1 : AddCommMonoid β] {f : α → β} {n : ℕ},
  IsAddFreimanIso n ∅ ∅ f
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Measure.ofMeasurable_apply : ∀ {α : Type u_1} [inst : MeasurableSpace α] {m : (s : Set α) → MeasurableSet s → ENNReal} {m0 : m ∅ ⋯ = 0}
  {mU :
    ∀ ⦃f : ℕ → Set α⦄ (h : ∀ (i : ℕ), MeasurableSet (f i)),
      Pairwise (Disjoint on f) → m (⋃ i, f i) ⋯ = ∑' (i : ℕ), m (f i) ⋯}
  (s : Set α) (hs : MeasurableSet s), (MeasureTheory.Measure.ofMeasurable m m0 mU) s = m s hs
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.WalkingParallelPairHom.comp_id : ∀ {X Y : CategoryTheory.Limits.WalkingParallelPair} (f : CategoryTheory.Limits.WalkingParallelPairHom X Y),
  f.comp (CategoryTheory.Limits.WalkingParallelPairHom.id Y) = f
Result.autoException ::
Duper saturated

Testing || CategoryTheory.StrongOplaxNatTrans.naturality_comp_assoc : ∀ {B : Type u₁} [inst : CategoryTheory.Bicategory B] {C : Type u₂} [inst_1 : CategoryTheory.Bicategory C]
  {F G : CategoryTheory.OplaxFunctor B C} (self : CategoryTheory.StrongOplaxNatTrans F G) {a b c : B} (f : a ⟶ b)
  (g : b ⟶ c) {Z : F.obj a ⟶ G.obj c}
  (h : CategoryTheory.CategoryStruct.comp (self.app a) (CategoryTheory.CategoryStruct.comp (G.map f) (G.map g)) ⟶ Z),
  CategoryTheory.CategoryStruct.comp (self.naturality (CategoryTheory.CategoryStruct.comp f g)).hom
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (self.app a) (G.mapComp f g)) h) =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (F.mapComp f g) (self.app c))
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator (F.map f) (F.map g) (self.app c)).hom
        (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (self.naturality g).hom)
          (CategoryTheory.CategoryStruct.comp
            (CategoryTheory.Bicategory.associator (F.map f) (self.app b) (G.map g)).inv
            (CategoryTheory.CategoryStruct.comp
              (CategoryTheory.Bicategory.whiskerRight (self.naturality f).hom (G.map g))
              (CategoryTheory.CategoryStruct.comp
                (CategoryTheory.Bicategory.associator (self.app a) (G.map f) (G.map g)).hom h)))))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Order.Ideal.lt_sup_principal_of_not_mem : ∀ {P : Type u_1} [inst : SemilatticeSup P] [inst_1 : IsDirected P fun x1 x2 => x1 ≥ x2] {x : P} {I : Order.Ideal P},
  x ∉ I → I < I ⊔ Order.Ideal.principal x
Result.success

Testing || ProbabilityTheory.Kernel.iIndepFun.indepFun_add_left : ∀ {α : Type u_1} {Ω : Type u_2} {ι : Type u_3} {_mα : MeasurableSpace α} {_mΩ : MeasurableSpace Ω}
  {κ : ProbabilityTheory.Kernel α Ω} {μ : MeasureTheory.Measure α} {β : Type u_8} {m : MeasurableSpace β} [inst : Add β]
  [inst_1 : MeasurableAdd₂ β] {f : ι → Ω → β},
  ProbabilityTheory.Kernel.iIndepFun (fun x => m) f κ μ →
    (∀ (i : ι), Measurable (f i)) →
      ∀ (i j k : ι), i ≠ k → j ≠ k → ProbabilityTheory.Kernel.IndepFun (f i + f j) (f k) κ μ
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ProbabilityTheory.Kernel.isSFiniteKernel_prodMkLeft_unit : ∀ {α : Type u_1} {β : Type u_2} {mα : MeasurableSpace α} {mβ : MeasurableSpace β} {κ : ProbabilityTheory.Kernel α β},
  ProbabilityTheory.IsSFiniteKernel (ProbabilityTheory.Kernel.prodMkLeft Unit κ) ↔ ProbabilityTheory.IsSFiniteKernel κ
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.NumberTheory.FLT.Three.0.FermatLastTheoremForThreeGen.Solution.formula3 : ∀ {K : Type u_1} [inst : Field K] {ζ : K} {hζ : IsPrimitiveRoot ζ ↑3} (S : FermatLastTheoremForThreeGen.Solution hζ)
  [inst_1 : NumberField K] [inst_2 : IsCyclotomicExtension {3} ℚ K],
  FermatLastTheoremForThreeGen.Solution.Y S ^ 3 +
      (↑(FermatLastTheoremForThreeGen.Solution.u₄ S) * FermatLastTheoremForThreeGen.Solution.Z S) ^ 3 =
    ↑(FermatLastTheoremForThreeGen.Solution.u₅ S) *
      ((hζ.toInteger - 1) ^ (S.multiplicity - 1) * FermatLastTheoremForThreeGen.Solution.X S) ^ 3
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LipschitzWith.dist_right : ∀ {α : Type u} [inst : PseudoMetricSpace α] (x : α), LipschitzWith 1 (dist x)
Result.success

Testing || NumberField.InfinitePlace.isReal_or_isComplex : ∀ {K : Type u_2} [inst : Field K] (w : NumberField.InfinitePlace K), w.IsReal ∨ w.IsComplex
Result.success

Testing || LinearIsometry.coe_toContinuousLinearMap : ∀ {R : Type u_1} {R₂ : Type u_2} {E : Type u_5} {E₂ : Type u_6} [inst : Semiring R] [inst_1 : Semiring R₂]
  {σ₁₂ : R →+* R₂} [inst_2 : SeminormedAddCommGroup E] [inst_3 : SeminormedAddCommGroup E₂] [inst_4 : _root_.Module R E]
  [inst_5 : _root_.Module R₂ E₂] (f : E →ₛₗᵢ[σ₁₂] E₂), ⇑f.toContinuousLinearMap = ⇑f
Result.autoException ::
Duper saturated

Testing || MeasureTheory.condexp_stronglyMeasurable_mul_of_bound₀ : ∀ {α : Type u_1} {m m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α},
  m ≤ m0 →
    ∀ [inst : MeasureTheory.IsFiniteMeasure μ] {f g : α → ℝ},
      MeasureTheory.AEStronglyMeasurable' m f μ →
        MeasureTheory.Integrable g μ →
          ∀ (c : ℝ),
            (∀ᵐ (x : α) ∂μ, ‖f x‖ ≤ c) → MeasureTheory.condexp m μ (f * g) =ᵐ[μ] f * MeasureTheory.condexp m μ g
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Fin.predAbove_of_succ_le : ∀ {n : ℕ} (p : Fin n) (i : Fin (n + 1)) (h : p.succ ≤ i) (hi : optParam (i ≠ 0) ⋯), p.predAbove i = i.pred hi
Result.autoException ::
Duper saturated

Testing || NormedAddGroupHom.ratio_le_opNorm : ∀ {V₁ : Type u_2} {V₂ : Type u_3} [inst : SeminormedAddCommGroup V₁] [inst_1 : SeminormedAddCommGroup V₂]
  (f : NormedAddGroupHom V₁ V₂) (x : V₁), ‖f x‖ / ‖x‖ ≤ ‖f‖
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SetTheory.PGame.add_congr : ∀ {w x y z : SetTheory.PGame}, w ≈ x → y ≈ z → w + y ≈ x + z
Result.autoException ::
Duper saturated

Testing || ContinuousLinearEquiv.symm_toLinearEquiv : ∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ₁₂ : R₁ →+* R₂} {σ₂₁ : R₂ →+* R₁}
  [inst_2 : RingHomInvPair σ₁₂ σ₂₁] [inst_3 : RingHomInvPair σ₂₁ σ₁₂] {M₁ : Type u_4} [inst_4 : TopologicalSpace M₁]
  [inst_5 : AddCommMonoid M₁] {M₂ : Type u_5} [inst_6 : TopologicalSpace M₂] [inst_7 : AddCommMonoid M₂]
  [inst_8 : _root_.Module R₁ M₁] [inst_9 : _root_.Module R₂ M₂] (e : M₁ ≃SL[σ₁₂] M₂), e.symm.toLinearEquiv = e.symm
Result.autoException ::
Duper saturated

Testing || List.length_tails : ∀ {α : Type u_1} (l : List α), l.tails.length = l.length + 1
Result.autoException ::
Duper saturated

Testing || egauge_smul_left : ∀ {𝕜 : Type u_1} [inst : NormedDivisionRing 𝕜] {E : Type u_2} [inst_1 : AddCommGroup E] [inst_2 : _root_.Module 𝕜 E]
  {c : 𝕜}, c ≠ 0 → ∀ (s : Set E) (x : E), egauge 𝕜 (c • s) x = egauge 𝕜 s x / ↑‖c‖₊
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || _private.Mathlib.Logic.Denumerable.0.Nat.Subtype.right_inverse_aux : ∀ {s : Set ℕ} [inst : Infinite ↑s] [inst_1 : DecidablePred fun x => x ∈ s] (n : ℕ),
  Nat.Subtype.toFunAux (Nat.Subtype.ofNat s n) = n
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.StructureSheaf.comap_comp : ∀ {R : Type u} [inst : CommRing R] {S : Type u} [inst_1 : CommRing S] {P : Type u} [inst_2 : CommRing P] (f : R →+* S)
  (g : S →+* P) (U : TopologicalSpace.Opens ↑(AlgebraicGeometry.PrimeSpectrum.Top R))
  (V : TopologicalSpace.Opens ↑(AlgebraicGeometry.PrimeSpectrum.Top S))
  (W : TopologicalSpace.Opens ↑(AlgebraicGeometry.PrimeSpectrum.Top P)) (hUV : ∀ p ∈ V, (PrimeSpectrum.comap f) p ∈ U)
  (hVW : ∀ p ∈ W, (PrimeSpectrum.comap g) p ∈ V),
  AlgebraicGeometry.StructureSheaf.comap (g.comp f) U W ⋯ =
    (AlgebraicGeometry.StructureSheaf.comap g V W hVW).comp (AlgebraicGeometry.StructureSheaf.comap f U V hUV)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Stream'.Seq.toList_ofList : ∀ {α : Type u} (l : List α), (↑l).toList ⋯ = l
Result.autoException ::
Duper saturated

Testing || Set.pi_inter_compl : ∀ {ι : Type u_1} {α : ι → Type u_2} {t : (i : ι) → Set (α i)} (s : Set ι), s.pi t ∩ sᶜ.pi t = Set.univ.pi t
Result.success

Testing || MultilinearMap.uncurryRight_apply : ∀ {R : Type uR} {n : ℕ} {M : Fin n.succ → Type v} {M₂ : Type v₂} [inst : CommSemiring R]
  [inst_1 : (i : Fin n.succ) → AddCommMonoid (M i)] [inst_2 : AddCommMonoid M₂]
  [inst_3 : (i : Fin n.succ) → _root_.Module R (M i)] [inst_4 : _root_.Module R M₂]
  (f : MultilinearMap R (fun i => M i.castSucc) (M (Fin.last n) →ₗ[R] M₂)) (m : (i : Fin n.succ) → M i),
  f.uncurryRight m = (f (Fin.init m)) (m (Fin.last n))
Result.autoException ::
Duper saturated

Testing || Set.encard_univ_coe : ∀ {α : Type u_1} (s : Set α), Set.univ.encard = s.encard
Result.autoException ::
Duper saturated

Testing || EMetric.hausdorffEdist_closure₁ : ∀ {α : Type u} [inst : PseudoEMetricSpace α] {s t : Set α},
  EMetric.hausdorffEdist (closure s) t = EMetric.hausdorffEdist s t
Result.success

Testing || Fin.Ioo_eq_finset_subtype : ∀ {n : ℕ} (a b : Fin n), Finset.Ioo a b = Finset.fin n (Finset.Ioo ↑a ↑b)
Result.autoException ::
Duper saturated

Testing || mfderivWithin_eq_mfderiv : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}
  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] {E' : Type u_5} [inst_6 : NormedAddCommGroup E']
  [inst_7 : NormedSpace 𝕜 E'] {H' : Type u_6} [inst_8 : TopologicalSpace H'] {I' : ModelWithCorners 𝕜 E' H'}
  {M' : Type u_7} [inst_9 : TopologicalSpace M'] [inst_10 : ChartedSpace H' M'] {f : M → M'} {x : M} {s : Set M},
  UniqueMDiffWithinAt I s x → MDifferentiableAt I I' f x → mfderivWithin I I' f s x = mfderiv I I' f x
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `instTopologicalSpaceTangentSpace
  x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.isSeparable_of_sigmaFinite : ∀ {X : Type u_1} [m : MeasurableSpace X] {μ : MeasureTheory.Measure X} [inst : MeasurableSpace.CountablyGenerated X]
  [inst : MeasureTheory.SigmaFinite μ], MeasureTheory.IsSeparable μ
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `MeasurableSpace.generateFrom x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || isOfFinOrder_one : ∀ {G : Type u_1} [inst : Monoid G], IsOfFinOrder 1
Result.success

Testing || MulAut.inv_def : ∀ (M : Type u_2) [inst : Mul M] (e₁ : MulAut M), e₁⁻¹ = MulEquiv.symm e₁
Result.success

Testing || Multiset.count_map_eq_count : ∀ {α : Type u_1} {β : Type v} [inst : DecidableEq α] [inst_1 : DecidableEq β] (f : α → β) (s : Multiset α),
  Set.InjOn f {x | x ∈ s} → ∀ x ∈ s, Multiset.count (f x) (Multiset.map f s) = Multiset.count x s
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝ x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || DomAddAct.instAddActionSubtypeAEEqFunMemAddAddSubgroupLp.proof_1 : ∀ {E : Type u_1} [inst : NormedAddCommGroup E], TopologicalAddGroup E
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Integrable.comp_inv : ∀ {G : Type u_4} {F : Type u_6} [inst : MeasurableSpace G] [inst_1 : NormedAddCommGroup F] {μ : MeasureTheory.Measure G}
  [inst_2 : Group G] [inst_3 : MeasurableInv G] [inst_4 : μ.IsInvInvariant] {f : G → F},
  MeasureTheory.Integrable f μ → MeasureTheory.Integrable (fun t => f t⁻¹) μ
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Nat.ord_proj_mul_ord_compl_eq_self : ∀ (n p : ℕ), p ^ n.factorization p * (n / p ^ n.factorization p) = n
Result.success

Testing || FractionalIdeal.mul_le : ∀ {R : Type u_1} [inst : CommRing R] {S : Submonoid R} {P : Type u_2} [inst_1 : CommRing P] [inst_2 : Algebra R P]
  {I J K : FractionalIdeal S P}, I * J ≤ K ↔ ∀ i ∈ I, ∀ j ∈ J, i * j ∈ K
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `FractionalIdeal.isFractional x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.mem_Ioi : ∀ {α : Type u_1} [inst : Preorder α] {a x : α}, x ∈ Set.Ioi a ↔ a < x
Result.autoException ::
Duper saturated

Testing || CoxeterSystem.IsReflection.mul_self : ∀ {B : Type u_1} {W : Type u_2} [inst : Group W] {M : CoxeterMatrix B} {cs : CoxeterSystem M W} {t : W},
  cs.IsReflection t → t * t = 1
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Sum.one_le_elim_iff : ∀ {α₁ : Type u_1} {α₂ : Type u_2} {β : Type u_3} [inst : LE β] [inst_1 : _root_.One β] {v₁ : α₁ → β} {v₂ : α₂ → β},
  1 ≤ Sum.elim v₁ v₂ ↔ 1 ≤ v₁ ∧ 1 ≤ v₂
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || List.mapIdx_cons : ∀ {α : Type u_1} {α_1 : Type u_2} {f : ℕ → α → α_1} {l : List α} {a : α},
  List.mapIdx f (a :: l) = f 0 a :: List.mapIdx (fun i => f (i + 1)) l
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastVar : ∀ {w : ℕ} (aig : Std.Sat.AIG Std.Tactic.BVDecide.BVBit) (var : Std.Tactic.BVDecide.BVExpr.bitblast.BVVar w)
  (assign : Std.Tactic.BVDecide.BVExpr.Assignment) (idx : ℕ) (hidx : idx < w),
  ⟦assign.toAIGAssignment,
      { aig := (Std.Tactic.BVDecide.BVExpr.bitblast.blastVar aig var).aig,
        ref := (Std.Tactic.BVDecide.BVExpr.bitblast.blastVar aig var).vec.get idx hidx }⟧ =
    (Std.Tactic.BVDecide.BVExpr.eval assign (Std.Tactic.BVDecide.BVExpr.var var.ident)).getLsbD idx
Result.autoException ::
application type mismatch
  Lean.Omega.LinearCombo.coordinate i = { ident := { const := 0, coeffs := Lean.Omega.Coeffs.set [] i 1 } }.ident
argument
  { ident := { const := 0, coeffs := Lean.Omega.Coeffs.set [] i 1 } }.ident
has type
  ℕ : Type
but is expected to have type
  Lean.Omega.LinearCombo : Type

Testing || Irreducible.addVal_pow : ∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] [inst_2 : DiscreteValuationRing R] {ϖ : R},
  Irreducible ϖ → ∀ (n : ℕ), (DiscreteValuationRing.addVal R) (ϖ ^ n) = ↑n
Result.autoException ::
Duper saturated

Testing || Real.rpow_lt_rpow_iff_of_neg : ∀ {x y z : ℝ}, 0 < x → 0 < y → z < 0 → (x ^ z < y ^ z ↔ y < x)
Result.success

Testing || MeasureTheory.IsStoppingTime.measurableSet_lt_of_countable_range' : ∀ {Ω : Type u_1} {ι : Type u_3} {m : MeasurableSpace Ω} [inst : LinearOrder ι] {f : MeasureTheory.Filtration ι m}
  {τ : Ω → ι} (hτ : MeasureTheory.IsStoppingTime f τ), (Set.range τ).Countable → ∀ (i : ι), MeasurableSet {ω | τ ω < i}
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #4, (∀ x1 : #4, ((!11 x0 x1) = (!6 (!11 x0 x1))))) is not type correct

Testing || Derivation.apply_aeval_eq : ∀ {R : Type u_1} {A : Type u_2} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] {B : Type u_4}
  {M' : Type u_5} [inst_3 : CommRing B] [inst_4 : Algebra R B] [inst_5 : Algebra A B] [inst_6 : AddCommGroup M']
  [inst_7 : _root_.Module B M'] [inst_8 : _root_.Module R M'] [inst_9 : _root_.Module A M']
  [inst_10 : IsScalarTower R A B] [inst_11 : IsScalarTower A B M'] (d : Derivation R B M') (x : B) (p : Polynomial A),
  d ((Polynomial.aeval x) p) =
    (PolynomialModule.eval x) ((Derivation.compAlgebraMap A d).mapCoeffs p) +
      (Polynomial.aeval x) (Polynomial.derivative p) • d x
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Convex.second_derivative_within_at_symmetric_of_mem_interior : ∀ {E : Type u_1} {F : Type u_2} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] [inst_2 : NormedAddCommGroup F]
  [inst_3 : NormedSpace ℝ F] {s : Set E},
  Convex ℝ s →
    ∀ {f : E → F} {f' : E → E →L[ℝ] F} {f'' : E →L[ℝ] E →L[ℝ] F},
      (∀ x ∈ interior s, HasFDerivAt f (f' x) x) →
        ∀ {x : E},
          x ∈ s →
            HasFDerivWithinAt f' f'' (interior s) x →
              ∀ {v w : E}, x + 4 • v ∈ interior s → x + 4 • w ∈ interior s → (f'' w) v = (f'' v) w
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, ((!3 x0) = (!27 (!28 (!29 (λx1 : #0, ((!30 x1) ∧ (!31 x1 x0)))))))) is not type correct

Testing || baseChange_ext : ∀ {R : Type uR} {A : Type uA} {M₂ : Type uM₂} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : AddCommGroup M₂]
  [inst_3 : Algebra R A] [inst_4 : _root_.Module R M₂] ⦃Q₁ Q₂ : QuadraticForm A (TensorProduct R A M₂)⦄,
  (∀ (m : M₂), Q₁ (1 ⊗ₜ[R] m) = Q₂ (1 ⊗ₜ[R] m)) → Q₁ = Q₂
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.morphismRestrict_comp : ∀ {X Y Z : AlgebraicGeometry.Scheme} (f : X ⟶ Y) (g : Y ⟶ Z) (U : TopologicalSpace.Opens ↑↑Z.toPresheafedSpace),
  CategoryTheory.CategoryStruct.comp f g ∣_ U =
    CategoryTheory.CategoryStruct.comp (f ∣_ (TopologicalSpace.Opens.map g.base).obj U) (g ∣_ U)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ENat.lt_add_one_iff : ∀ {m n : ℕ∞}, n ≠ ⊤ → (m < n + 1 ↔ m ≤ n)
Result.success

Testing || Stream'.corec_id_id_eq_const : ∀ {α : Type u} (a : α), Stream'.corec id id a = Stream'.const a
Result.success

Testing || HahnSeries.embDomain_mul : ∀ {Γ : Type u_1} {R : Type u_3} [inst : OrderedCancelAddCommMonoid Γ] {Γ' : Type u_6}
  [inst_1 : OrderedCancelAddCommMonoid Γ'] [inst_2 : NonUnitalNonAssocSemiring R] (f : Γ ↪o Γ'),
  (∀ (x y : Γ), f (x + y) = f x + f y) →
    ∀ (x y : HahnSeries Γ R), HahnSeries.embDomain f (x * y) = HahnSeries.embDomain f x * HahnSeries.embDomain f y
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Groupoid.invEquiv_symm_apply : ∀ {C : Type u} [inst : CategoryTheory.Groupoid C] {X Y : C} (a : Y ⟶ X),
  CategoryTheory.Groupoid.invEquiv.symm a = CategoryTheory.Groupoid.inv a
Result.autoException ::
Duper saturated

Testing || Set.subset_image_iff : ∀ {α : Type u_1} {β : Type u_2} {f : α → β} {s : Set α} {t : Set β}, t ⊆ f '' s ↔ ∃ u ⊆ s, f '' u = t
Result.success

Testing || StarAlgHom.snd_prod : ∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} {C : Type u_4} [inst : CommSemiring R] [inst_1 : Semiring A]
  [inst_2 : Algebra R A] [inst_3 : Star A] [inst_4 : Semiring B] [inst_5 : Algebra R B] [inst_6 : Star B]
  [inst_7 : Semiring C] [inst_8 : Algebra R C] [inst_9 : Star C] (f : A →⋆ₐ[R] B) (g : A →⋆ₐ[R] C),
  (StarAlgHom.snd R B C).comp (f.prod g) = g
Result.autoException ::
Duper saturated

Testing || Subring.toSubmonoid_mono : ∀ {R : Type u} [inst : Ring R], Monotone fun s => s.toSubmonoid
Result.success

Testing || CoxeterSystem.isLeftInversion_inv_iff : ∀ {B : Type u_1} {W : Type u_2} [inst : Group W] {M : CoxeterMatrix B} (cs : CoxeterSystem M W) {w t : W},
  cs.IsLeftInversion w⁻¹ t ↔ cs.IsRightInversion w t
Result.success

Testing || PiTensorProduct.lift_reindex_symm : ∀ {ι : Type u_1} {ι₂ : Type u_2} {R : Type u_4} [inst : CommSemiring R] {s : ι → Type u_7}
  [inst_1 : (i : ι) → AddCommMonoid (s i)] [inst_2 : (i : ι) → _root_.Module R (s i)] {E : Type u_9}
  [inst_3 : AddCommMonoid E] [inst_4 : _root_.Module R E] (e : ι ≃ ι₂) (φ : MultilinearMap R s E)
  (x : PiTensorProduct R fun i => s (e.symm i)),
  (PiTensorProduct.lift φ) ((PiTensorProduct.reindex R s e).symm x) =
    (PiTensorProduct.lift ((MultilinearMap.domDomCongrLinearEquiv' R R s E e) φ)) x
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Auto.Embedding.Lam.LamThmEquiv.fromLam : ∀ {lval : Embedding.Lam.LamValuation} {lctx : List Embedding.Lam.LamSort} {w s : Embedding.Lam.LamSort}
  {a b : Embedding.Lam.LamTerm},
  Embedding.Lam.LamThmEquiv lval lctx (w.func s) (Embedding.Lam.LamTerm.lam w a) (Embedding.Lam.LamTerm.lam w b) →
    Embedding.Lam.LamThmEquiv lval (w :: lctx) s a b
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Real.log_le_rpow_div : ∀ {x ε : ℝ}, 0 ≤ x → 0 < ε → Real.log x ≤ x ^ ε / ε
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || measurable_from_prod_countable : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} {m : MeasurableSpace α} {mβ : MeasurableSpace β} [inst : Countable β]
  [inst : MeasurableSingletonClass β] {x : MeasurableSpace γ} {f : α × β → γ},
  (∀ (y : β), Measurable fun x => f (x, y)) → Measurable f
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Monotone.of_le_map_sup : ∀ {α : Type u} {β : Type v} [inst : SemilatticeSup α] [inst_1 : SemilatticeSup β] {f : α → β},
  (∀ (x y : α), f x ⊔ f y ≤ f (x ⊔ y)) → Monotone f
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || IsOpen.interior_eq : ∀ {X : Type u} {s : Set X} [inst : TopologicalSpace X], IsOpen s → interior s = s
Result.success

Testing || Interval.bot_sub : ∀ {α : Type u_2} [inst : Preorder α] [inst_1 : AddCommSemigroup α] [inst_2 : Sub α] [inst_3 : OrderedSub α]
  [inst_4 : AddLeftMono α] (t : Interval α), ⊥ - t = ⊥
Result.autoException ::
Duper saturated

Testing || TopCat.fst_openEmbedding_of_right_openEmbedding : ∀ {X Y S : TopCat} (f : X ⟶ S) {g : Y ⟶ S},
  Topology.IsOpenEmbedding ⇑g → Topology.IsOpenEmbedding ⇑(CategoryTheory.Limits.pullback.fst f g)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Limits.hasLimitOfHasLimitsOfShape
  (cifvar_11 x_0 x_1)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Bool.not_eq_true' : ∀ (b : Bool), ((!b) = true) = (b = false)
Result.success

Testing || variationOnFromTo.eq_of_le : ∀ {α : Type u_1} [inst : LinearOrder α] {E : Type u_2} [inst_1 : PseudoEMetricSpace E] (f : α → E) (s : Set α)
  {a b : α}, a ≤ b → variationOnFromTo f s a b = (eVariationOn f (s ∩ Set.Icc a b)).toReal
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, (∀ x1 : #0, ((!9 x0 x1) = (!8 (!0 x0) (λx2 : #0, (!0 x2 x1)))))) is not type correct

Testing || RatFunc.coe_smul : ∀ {F : Type u} [inst : Field F] (f : RatFunc F) (r : F), ↑(r • f) = r • ↑f
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasureTheory.continuous_setToFun_of_dominated : ∀ {α : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]
  [inst_2 : NormedAddCommGroup F] [inst_3 : NormedSpace ℝ F] {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}
  [inst_4 : CompleteSpace F] {T : Set α → E →L[ℝ] F} {C : ℝ} {X : Type u_7} [inst_5 : TopologicalSpace X]
  [inst_6 : FirstCountableTopology X] (hT : MeasureTheory.DominatedFinMeasAdditive μ T C) {fs : X → α → E}
  {bound : α → ℝ},
  (∀ (x : X), MeasureTheory.AEStronglyMeasurable (fs x) μ) →
    (∀ (x : X), ∀ᵐ (a : α) ∂μ, ‖fs x a‖ ≤ bound a) →
      MeasureTheory.Integrable bound μ →
        (∀ᵐ (a : α) ∂μ, Continuous fun x => fs x a) → Continuous fun x => MeasureTheory.setToFun μ T hT (fs x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || RelSeries.length_ne_zero_of_nontrivial : ∀ {α : Type u_1} {r : Rel α α} {s : RelSeries r}, {x | x ∈ s}.Nontrivial → s.length ≠ 0
Result.success

Testing || UniqueMul.to_mulOpposite : ∀ {G : Type u_1} [inst : Mul G] {A B : Finset G} {a0 b0 : G},
  UniqueMul A B a0 b0 →
    UniqueMul (Finset.map { toFun := MulOpposite.op, inj' := ⋯ } B)
      (Finset.map { toFun := MulOpposite.op, inj' := ⋯ } A) (MulOpposite.op b0) (MulOpposite.op a0)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || continuous_iff_continuous_dist : ∀ {α : Type u_1} {β : Type u_2} [inst : PseudoMetricSpace α] [inst_1 : TopologicalSpace β] {f : β → α},
  Continuous f ↔ Continuous fun x => dist (f x.1) (f x.2)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || TypeVec.append1_drop_last : ∀ {n : ℕ} (α : TypeVec.{u_1} (n + 1)), α.drop ::: α.last = α
Result.autoException ::
Duper saturated

Testing || Mathlib.Tactic.RingNF.nat_rawCast_2 : ∀ {R : Type u_1} [inst : CommSemiring R] {n : ℕ} [inst_1 : n.AtLeastTwo], n.rawCast = OfNat.ofNat n
Result.success

Testing || LinearLocallyFiniteOrder.succFn_spec : ∀ {ι : Type u_1} [inst : LinearOrder ι] (i : ι), IsGLB (Set.Ioi i) (LinearLocallyFiniteOrder.succFn i)
Result.autoException ::
Duper saturated

Testing || Polynomial.evalEval_surjective : ∀ {R : Type u_1} [inst : Semiring R] (x y : R), Function.Surjective (Polynomial.evalEval x y)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || BoundedContinuousFunction.dist_zero_of_empty : ∀ {α : Type u} {β : Type v} [inst : TopologicalSpace α] [inst_1 : PseudoMetricSpace β]
  {f g : BoundedContinuousFunction α β} [inst_2 : IsEmpty α], dist f g = 0
Result.autoException ::
Duper saturated

Testing || right_eq_mul₀ : ∀ {M₀ : Type u_1} [inst : CancelMonoidWithZero M₀] {a b : M₀}, b ≠ 0 → (b = a * b ↔ a = 1)
Result.success

Testing || mul_ball : ∀ {E : Type u_1} [inst : SeminormedCommGroup E] (δ : ℝ) (s : Set E) (x : E),
  s * Metric.ball x δ = x • Metric.thickening δ s
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `instHMul`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.IsSetSemiring.sUnion_insert_diffFinset : ∀ {α : Type u_1} {C : Set (Set α)} {s t : Set α} (hC : MeasureTheory.IsSetSemiring C) (hs : s ∈ C) (ht : t ∈ C),
  t ⊆ s → ⋃₀ insert t ↑(hC.diffFinset hs ht) = s
Result.autoException ::
Duper saturated

Testing || Tropical.trop_smul : ∀ {R : Type u} {α : Type u_1} [inst : SMul α R] (x : R) (n : α), Tropical.trop (n • x) = Tropical.trop x ^ n
Result.autoException ::
application type mismatch
  x = Tropical.trop x
argument
  Tropical.trop x
has type
  Tropical R : Type u
but is expected to have type
  R : Type u

Testing || add_lt_iff_neg_left : ∀ {α : Type u_1} [inst : AddZeroClass α] [inst_1 : LT α] [inst_2 : AddLeftStrictMono α] [inst_3 : AddLeftReflectLT α]
  {a b : α}, a + b < a ↔ b < 0
Result.success

Testing || BitVec.truncate_eq_setWidth : ∀ {w v : ℕ} {x : BitVec w}, BitVec.truncate v x = BitVec.setWidth v x
Result.success

Testing || Fin.coe_covBy_iff : ∀ {n : ℕ} {a b : Fin n}, ↑a ⋖ ↑b ↔ a ⋖ b
Result.autoException ::
Duper saturated

Testing || Function.sSup_div_semiconj : ∀ {α : Type u_1} {G : Type u_4} [inst : CompleteLattice α] [inst_1 : Group G] (f₁ f₂ : G →* α ≃o α) (g : G),
  Function.Semiconj (fun x => ⨆ g', (f₁ g')⁻¹ ((f₂ g') x)) ⇑(f₂ g) ⇑(f₁ g)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || FormalMultilinearSeries.le_radius_of_tendsto : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {r : NNReal}
  (p : FormalMultilinearSeries 𝕜 E F) {l : ℝ},
  Filter.Tendsto (fun n => ‖p n‖ * ↑r ^ n) Filter.atTop (nhds l) → ↑r ≤ p.radius
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: FormalMultilinearSeries 𝕜 E F is not a `∀`

Testing || FirstOrder.Language.Hom.eq_of_eqOn_dense : ∀ {L : FirstOrder.Language} {M : Type w} {N : Type u_1} [inst : L.Structure M] [inst_1 : L.Structure N] {s : Set M},
  (FirstOrder.Language.Substructure.closure L).toFun s = ⊤ → ∀ {f g : L.Hom M N}, Set.EqOn (⇑f) (⇑g) s → f = g
Result.success

Testing || Multiset.coe_sections : ∀ {α : Type u_1} (l : List (List α)), (↑(List.map (fun l => ↑l) l)).Sections = ↑(List.map (fun l => ↑l) l.sections)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LinearEquiv.congrQuadraticMap_refl : ∀ {R : Type u_3} {M : Type u_4} {N : Type u_5} [inst : CommSemiring R] [inst_1 : AddCommMonoid M]
  [inst_2 : _root_.Module R M] [inst_3 : AddCommMonoid N] [inst_4 : _root_.Module R N],
  (LinearEquiv.refl R N).congrQuadraticMap = LinearEquiv.refl R (QuadraticMap R M N)
Result.autoException ::
Duper saturated

Testing || PFunctor.M.head_mk : ∀ {F : PFunctor.{u}} (x : ↑F F.M), (PFunctor.M.mk x).head = x.fst
Result.autoException ::
Duper saturated

Testing || MeasurableSet.ite' : ∀ {α : Type u_1} {m : MeasurableSpace α} {s t : Set α} {p : Prop},
  (p → MeasurableSet s) → (¬p → MeasurableSet t) → MeasurableSet (if p then s else t)
Result.success

Testing || MeasureTheory.measure_add_measure_eq : ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : AddGroup G] [inst_2 : MeasurableAdd₂ G] [inst_3 : MeasurableNeg G]
  (μ' ν' : MeasureTheory.Measure G) [inst_4 : MeasureTheory.SigmaFinite μ'] [inst_5 : MeasureTheory.SigmaFinite ν']
  [inst_6 : μ'.IsAddLeftInvariant] [inst_7 : ν'.IsAddLeftInvariant] (s t : Set G),
  ν' s ≠ 0 → ν' s ≠ ⊤ → μ' s * ν' t = ν' s * μ' t
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || _private.Mathlib.AlgebraicGeometry.EllipticCurve.Projective.0.WeierstrassCurve.Projective.toAffine_negAddY_of_ne : ∀ {F : Type v} [inst : Field F] {W : WeierstrassCurve.Projective F} {P Q : Fin 3 → F},
  P 2 ≠ 0 →
    Q 2 ≠ 0 →
      ∀ {n d : F},
        d ≠ 0 →
          W.toAffine.negAddY (P 0 / P 2) (Q 0 / Q 2) (P 1 / P 2) (n / d) =
            (n *
                    (n ^ 2 * P 2 * Q 2 + W.a₁ * n * P 2 * Q 2 * d - W.a₂ * P 2 * Q 2 * d ^ 2 - P 0 * Q 2 * d ^ 2 -
                        Q 0 * P 2 * d ^ 2 -
                      P 0 * Q 2 * d ^ 2) +
                  P 1 * Q 2 * d ^ 3) /
                (P 2 * Q 2) ^ 2 /
              (d ^ 3 / (P 2 * Q 2))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasureTheory.exists_ne_zero_mem_lattice_of_measure_mul_two_pow_le_measure : ∀ {E : Type u_1} [inst : MeasurableSpace E] {μ : MeasureTheory.Measure E} {F s : Set E} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace ℝ E] [inst_3 : BorelSpace E] [inst_4 : FiniteDimensional ℝ E] [inst_5 : Nontrivial E]
  [inst_6 : μ.IsAddHaarMeasure] {L : AddSubgroup E} [inst_7 : Countable ↥L] [inst_8 : DiscreteTopology ↥L],
  MeasureTheory.IsAddFundamentalDomain (↥L) F μ →
    (∀ x ∈ s, -x ∈ s) → Convex ℝ s → IsCompact s → μ F * 2 ^ Module.finrank ℝ E ≤ μ s → ∃ x, x ≠ 0 ∧ ↑x ∈ s
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type ↥x_4 of λ binder contains bound variables

Testing || Tree.left_node_right_eq_self : ∀ {x : Tree Unit}, x ≠ Tree.nil → Tree.node () x.left x.right = x
Result.autoException ::
Duper saturated

Testing || Set.mulIndicator_image : ∀ {α : Type u_1} {β : Type u_2} {M : Type u_3} [inst : _root_.One M] {s : Set α} {f : β → M} {g : α → β},
  Function.Injective g → ∀ {x : α}, (g '' s).mulIndicator f (g x) = s.mulIndicator (f ∘ g) x
Result.success

Testing || ENat.isOpenEmbedding_natCast : Topology.IsOpenEmbedding Nat.cast
Result.autoException ::
Duper saturated

Testing || AddEquiv.subsemigroupMap_symm_apply_coe : ∀ {M : Type u_1} {N : Type u_2} [inst : Add M] [inst_1 : Add N] (e : M ≃+ N) (S : AddSubsemigroup M)
  (x : ↥(AddSubsemigroup.map (↑e) S)), ↑((e.subsemigroupMap S).symm x) = e.symm ↑x
Result.autoException ::
Duper saturated

Testing || Finset.sdiff_nonempty : ∀ {α : Type u_1} [inst : DecidableEq α] {s t : Finset α}, (s \ t).Nonempty ↔ ¬s ⊆ t
Result.success

Testing || LinearOrderedField.inducedMap_one : ∀ (α : Type u_2) (β : Type u_3) [inst : LinearOrderedField α] [inst_1 : ConditionallyCompleteLinearOrderedField β]
  [inst_2 : Archimedean α], LinearOrderedField.inducedMap α β 1 = 1
Result.success

Testing || EuclideanGeometry.oangle_add_oangle_add_oangle_eq_pi : ∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]
  [inst_3 : NormedAddTorsor V P] [inst_4 : Module.Oriented ℝ V (Fin 2)] [inst_5 : Fact (Module.finrank ℝ V = 2)]
  {p1 p2 p3 : P},
  p2 ≠ p1 →
    p3 ≠ p2 →
      p1 ≠ p3 →
        EuclideanGeometry.oangle p1 p2 p3 + EuclideanGeometry.oangle p2 p3 p1 + EuclideanGeometry.oangle p3 p1 p2 =
          ↑Real.pi
Result.autoException ::
Duper saturated

Testing || Order.Ico_succ_right : ∀ {α : Type u_1} [inst : LinearOrder α] [inst_1 : SuccOrder α] [inst_2 : NoMaxOrder α] (a b : α),
  Set.Ico a (Order.succ b) = Set.Icc a b
Result.success

Testing || CategoryTheory.Limits.biprod.map_eq : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Preadditive C]
  [inst_2 : CategoryTheory.Limits.HasBinaryBiproducts C] {W X Y Z : C} {f : W ⟶ Y} {g : X ⟶ Z},
  CategoryTheory.Limits.biprod.map f g =
    CategoryTheory.CategoryStruct.comp CategoryTheory.Limits.biprod.fst
        (CategoryTheory.CategoryStruct.comp f CategoryTheory.Limits.biprod.inl) +
      CategoryTheory.CategoryStruct.comp CategoryTheory.Limits.biprod.snd
        (CategoryTheory.CategoryStruct.comp g CategoryTheory.Limits.biprod.inr)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.inl`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MulChar.card_eq_card_units_of_hasEnoughRootsOfUnity : ∀ (M : Type u_1) (R : Type u_2) [inst : CommMonoid M] [inst_1 : CommRing R] [inst_2 : Finite M]
  [inst_3 : HasEnoughRootsOfUnity R (Monoid.exponent Mˣ)], Nat.card (MulChar M R) = Nat.card Mˣ
Result.autoException ::
Duper saturated

Testing || Finset.Pi.cons_same : ∀ {α : Type u_1} {δ : α → Sort v} [inst : DecidableEq α] (s : Finset α) (a : α) (b : δ a) (f : (a : α) → a ∈ s → δ a)
  (h : a ∈ insert a s), Finset.Pi.cons s a b f a h = b
Result.autoException ::
Duper saturated

Testing || Asymptotics.IsLittleO.of_const_mul_right : ∀ {α : Type u_1} {E : Type u_3} {R : Type u_13} [inst : Norm E] [inst_1 : SeminormedRing R] {f : α → E} {l : Filter α}
  {g : α → R} {c : R}, (f =o[l] fun x => c * g x) → f =o[l] g
Result.success

Testing || continuous_sInf_dom : ∀ {α : Type u} {β : Type v} {f : α → β} {t₁ : Set (TopologicalSpace α)} {t₂ : TopologicalSpace β}
  {t : TopologicalSpace α}, t ∈ t₁ → Continuous f → Continuous f
Result.success

Testing || LowerSet.bot_prod : ∀ {α : Type u_1} {β : Type u_2} [inst : Preorder α] [inst_1 : Preorder β] (t : LowerSet β), ⊥ ×ˢ t = ⊥
Result.autoException ::
Duper saturated

Testing || HurwitzZeta.differentiable_completedSinZeta : ∀ (a : UnitAddCircle), Differentiable ℂ (HurwitzZeta.completedSinZeta a)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ProbabilityTheory.Kernel.swapRight_apply : ∀ {α : Type u_1} {β : Type u_2} {mα : MeasurableSpace α} {mβ : MeasurableSpace β} {γ : Type u_4}
  {mγ : MeasurableSpace γ} (κ : ProbabilityTheory.Kernel α (β × γ)) (a : α),
  κ.swapRight a = MeasureTheory.Measure.map Prod.swap (κ a)
Result.autoException ::
Duper saturated

Testing || AddSemiconjBy.addUnits_neg_right : ∀ {M : Type u_1} [inst : AddMonoid M] {a : M} {x y : AddUnits M}, AddSemiconjBy a ↑x ↑y → AddSemiconjBy a ↑(-x) ↑(-y)
Result.success

Testing || DifferentiableWithinAt.const_smul : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {x : E} {s : Set E} {R : Type u_4} [inst_5 : Semiring R] [inst_6 : _root_.Module R F] [inst_7 : SMulCommClass 𝕜 R F]
  [inst_8 : ContinuousConstSMul R F],
  DifferentiableWithinAt 𝕜 f s x → ∀ (c : R), DifferentiableWithinAt 𝕜 (fun y => c • f y) s x
Result.autoException ::
Duper saturated

Testing || tsum_smul_const : ∀ {ι : Type u_5} {R : Type u_7} {M : Type u_9} [inst : Semiring R] [inst_1 : TopologicalSpace R]
  [inst_2 : TopologicalSpace M] [inst_3 : AddCommMonoid M] [inst_4 : _root_.Module R M] [inst_5 : ContinuousSMul R M]
  {f : ι → R} [inst_6 : T2Space M], Summable f → ∀ (a : M), ∑' (z : ι), f z • a = (∑' (z : ι), f z) • a
Result.success

Testing || Array.anyM_loop_iff_exists : ∀ {α : Type u_1} {p : α → Bool} {as : Array α} {start stop : ℕ} (h : stop ≤ as.size),
  Array.anyM.loop p as stop h start = true ↔ ∃ i, start ≤ ↑i ∧ ↑i < stop ∧ p as[i] = true
Result.autoException ::
application type mismatch
  (a✝¹ ≤ a✝) = { toList := a✝¹ ≤ a✝ }.toList
argument
  { toList := a✝¹ ≤ a✝ }.toList
has type
  List α : Type u_1
but is expected to have type
  Prop : Type

Testing || minpoly.ker_eval : ∀ {R : Type u_1} {S : Type u_2} [inst : CommRing R] [inst_1 : CommRing S] [inst_2 : IsDomain R] [inst_3 : Algebra R S]
  [inst_4 : IsDomain S] [inst_5 : NoZeroSMulDivisors R S] [inst_6 : IsIntegrallyClosed R] {s : S},
  IsIntegral R s → RingHom.ker (Polynomial.aeval s).toRingHom = Ideal.span {minpoly R s}
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_25 →ₐ[cifvar_24] cifvar_26`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || HahnSeries.add_coeff : ∀ {Γ : Type u_1} {R : Type u_3} [inst : PartialOrder Γ] [inst_1 : AddMonoid R] {x y : HahnSeries Γ R} {a : Γ},
  (x + y).coeff a = x.coeff a + y.coeff a
Result.autoException ::
Duper saturated

Testing || AffineSubspace.affineSpan_eq_top_iff_vectorSpan_eq_top_of_nonempty : ∀ (k : Type u_1) (V : Type u_2) (P : Type u_3) [inst : Ring k] [inst_1 : AddCommGroup V] [inst_2 : _root_.Module k V]
  [S : AddTorsor V P] {s : Set P}, s.Nonempty → (affineSpan k s = ⊤ ↔ vectorSpan k s = ⊤)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Filter.atBot_Iio_eq : ∀ {α : Type u_3} [inst : Preorder α] [inst_1 : IsDirected α fun x1 x2 => x1 ≥ x2] (a : α),
  Filter.atBot = Filter.comap Subtype.val Filter.atBot
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Subtype.preorder fun x =>
  cifvar_10 (cifvar_11 x_1) x`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ProbabilityTheory.lintegral_mul_eq_lintegral_mul_lintegral_of_indepFun'' : ∀ {Ω : Type u_1} {mΩ : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} {f g : Ω → ENNReal},
  AEMeasurable f μ →
    AEMeasurable g μ →
      ProbabilityTheory.IndepFun f g μ → ∫⁻ (ω : Ω), f ω * g ω ∂μ = (∫⁻ (ω : Ω), f ω ∂μ) * ∫⁻ (ω : Ω), g ω ∂μ
Result.success

Testing || AlgebraicGeometry.Proj.one_apply : ∀ {R : Type u_1} {A : Type u_2} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (𝒜 : ℕ → Submodule R A)
  [inst_3 : GradedAlgebra 𝒜] {V : (TopologicalSpace.Opens ↑(ProjectiveSpectrum.top 𝒜))ᵒᵖ} (x : ↥(Opposite.unop V)),
  ↑1 x = 1
Result.autoException ::
application type mismatch
  Submodule R A = Opposite.unop (Opposite.op (Submodule R A))
argument
  Opposite.unop (Opposite.op (Submodule R A))
has type
  TopologicalSpace.Opens ↑(ProjectiveSpectrum.top 𝒜) : Type u_2
but is expected to have type
  Type u_2 : Type (u_2 + 1)

Testing || TensorProduct.span_tmul_eq_top : ∀ (R : Type u_1) [inst : CommSemiring R] (M : Type u_4) (N : Type u_5) [inst_1 : AddCommMonoid M]
  [inst_2 : AddCommMonoid N] [inst_3 : _root_.Module R M] [inst_4 : _root_.Module R N],
  Submodule.span R {t | ∃ m n, m ⊗ₜ[R] n = t} = ⊤
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #1, (!7 x0 (!8 (!0 x0)))) is not type correct

Testing || List.rdrop_concat_succ : ∀ {α : Type u_1} (l : List α) (n : ℕ) (x : α), (l ++ [x]).rdrop (n + 1) = l.rdrop n
Result.autoException ::
Duper saturated

Testing || Stream'.Seq.map_get? : ∀ {α : Type u} {β : Type v} (f : α → β) (s : Stream'.Seq α) (n : ℕ),
  (Stream'.Seq.map f s).get? n = Option.map f (s.get? n)
Result.autoException ::
Duper saturated

Testing || List.Chain'.drop : ∀ {α : Type u} {R : α → α → Prop} {l : List α}, List.Chain' R l → ∀ (n : ℕ), List.Chain' R (List.drop n l)
Result.success

Testing || MonoidHom.mker_one : ∀ {M : Type u_1} {N : Type u_2} [inst : MulOneClass M] [inst_1 : MulOneClass N], MonoidHom.mker 1 = ⊤
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CauSeq.Completion.zero_ne_one : ∀ {α : Type u_1} [inst : LinearOrderedField α] {β : Type u_2} [inst_1 : DivisionRing β] {abv : β → α}
  [inst_2 : IsAbsoluteValue abv], 0 ≠ 1
Result.autoException ::
Duper saturated

Testing || Equiv.piCongrLeft_apply_eq_cast : ∀ {α : Sort u_1} {β : Sort u_4} {P : β → Sort v} {e : α ≃ β} (f : (a : α) → P (e a)) (b : β),
  (Equiv.piCongrLeft P e) f b = cast ⋯ (f (e.symm b))
Result.autoException ::
Auto.Monomorphization.ConstInst.toExpr :: Unexpected error

Testing || RingCon.eq : ∀ {R : Type u_1} [inst : Add R] [inst_1 : Mul R] (c : RingCon R) {a b : R}, ↑a = ↑b ↔ c a b
Result.autoException ::
Duper saturated

Testing || zero_sub_add_zero_sub : ∀ {α : Type u_1} [inst : SubtractionCommMonoid α] (a b : α), 0 - a + (0 - b) = 0 - (a + b)
Result.success

Testing || analyticWithinAt_insert : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F} {s : Set E}
  {x y : E}, AnalyticWithinAt 𝕜 f (insert y s) x ↔ AnalyticWithinAt 𝕜 f s x
Result.autoException ::
Duper saturated

Testing || NonUnitalAlgHom.coe_injective : ∀ {R : Type u} {S : Type u₁} [inst : Monoid R] [inst_1 : Monoid S] {φ : R →* S} {A : Type v} {B : Type w}
  [inst_2 : NonUnitalNonAssocSemiring A] [inst_3 : DistribMulAction R A] [inst_4 : NonUnitalNonAssocSemiring B]
  [inst_5 : DistribMulAction S B], Function.Injective DFunLike.coe
Result.autoException ::
Duper saturated

Testing || Metric.uniformity_basis_dist_inv_nat_succ : ∀ {α : Type u} [inst : PseudoMetricSpace α],
  (uniformity α).HasBasis (fun x => True) fun n => {p | dist p.1 p.2 < 1 / (↑n + 1)}
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Computation.LiftRelAux.swap : ∀ {α : Type u} {β : Type v} (R : α → β → Prop) (C : Computation α → Computation β → Prop) (a : α ⊕ Computation α)
  (b : β ⊕ Computation β),
  Computation.LiftRelAux (Function.swap R) (Function.swap C) b a = Computation.LiftRelAux R C a b
Result.autoException ::
Duper saturated

Testing || Finset.indicator_biUnion_apply : ∀ {ι : Type u_1} {β : Type u_4} [inst : AddCommMonoid β] {κ : Type u_7} (s : Finset ι) (t : ι → Set κ) {f : κ → β},
  (↑s).PairwiseDisjoint t → ∀ (x : κ), (⋃ i ∈ s, t i).indicator f x = ∑ i ∈ s, (t i).indicator f x
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type i✝ ∈ s of λ binder contains bound variables

Testing || Filter.comap_coe_neBot_of_le_principal : ∀ {γ : Type w} {s : Set γ} {l : Filter γ} [h : l.NeBot], l ≤ Filter.principal s → (Filter.comap Subtype.val l).NeBot
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_0 } of λ binder contains bound variables

Testing || WithTop.coe_eq_ofNat : ∀ {α : Type u} [inst : AddMonoidWithOne α] (n : ℕ) [inst_1 : n.AtLeastTwo] (m : α),
  ↑m = OfNat.ofNat n ↔ m = OfNat.ofNat n
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Functor.Monoidal.εIso_hom : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}
  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] [inst_3 : CategoryTheory.MonoidalCategory D]
  (F : CategoryTheory.Functor C D) [inst_4 : F.Monoidal],
  (CategoryTheory.Functor.Monoidal.εIso F).hom = CategoryTheory.Functor.LaxMonoidal.ε F
Result.autoException ::
Duper saturated

Testing || List.head_mem : ∀ {α : Type u_1} {l : List α} (h : l ≠ []), l.head h ∈ l
Result.autoException ::
Duper saturated

Testing || CategoryTheory.hasExt_of_hasDerivedCategory : ∀ (C : Type u) [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Abelian C]
  [inst_2 : HasDerivedCategory C], CategoryTheory.HasExt C
Result.autoException ::
Duper saturated

Testing || MvPolynomial.degrees_pow : ∀ {R : Type u} {σ : Type u_1} [inst : CommSemiring R] (p : MvPolynomial σ R) (n : ℕ), (p ^ n).degrees ≤ n • p.degrees
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Elapsed time: 283013 ms
