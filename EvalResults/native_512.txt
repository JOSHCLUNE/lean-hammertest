Config = {maxHeartbeats := 65536, timeout := 10, solverConfig = native, logFile := evalOut.txt}

Testing || Nonneg.toNonneg_of_nonneg : ∀ {α : Type u_1} [inst : Zero α] [inst_1 : LinearOrder α] {a : α} (h : 0 ≤ a), Nonneg.toNonneg a = ⟨a, h⟩
Result.autoException ::
Duper saturated

Testing || MulOpposite.one_le_op : ∀ {α : Type u_1} [inst : OrderedCommMonoid α] {a : α}, 1 ≤ MulOpposite.op a ↔ 1 ≤ a
Result.autoException ::
Duper saturated

Testing || Finpartition.card_bind : ∀ {α : Type u_1} [inst : DistribLattice α] [inst_1 : OrderBot α] [inst_2 : DecidableEq α] {a : α} {P : Finpartition a}
  (Q : (i : α) → i ∈ P.parts → Finpartition i), (P.bind Q).parts.card = ∑ A ∈ P.parts.attach, (Q ↑A ⋯).parts.card
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `A.property`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.biUnion_insert : ∀ {α : Type u_1} {β : Type u_2} (a : α) (s : Set α) (t : α → Set β), ⋃ x ∈ insert a s, t x = t a ∪ ⋃ x ∈ s, t x
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x✝ ∈ insert a s of λ binder contains bound variables

Testing || ProbabilityTheory.Kernel.setLIntegral_density : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} {mα : MeasurableSpace α} {mβ : MeasurableSpace β}
  {mγ : MeasurableSpace γ} [inst : MeasurableSpace.CountablyGenerated γ] {κ : ProbabilityTheory.Kernel α (γ × β)}
  {ν : ProbabilityTheory.Kernel α γ},
  κ.fst ≤ ν →
    ∀ [inst_1 : ProbabilityTheory.IsFiniteKernel ν] (a : α) {s : Set β},
      MeasurableSet s →
        ∀ {A : Set γ}, MeasurableSet A → ∫⁻ (x : γ) in A, ENNReal.ofReal (κ.density ν a x s) ∂ν a = (κ a) (A ×ˢ s)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Bicategory.lanLeftExtension_extension : ∀ {B : Type u} [inst : CategoryTheory.Bicategory B] {a b c : B} (f : a ⟶ b) (g : a ⟶ c)
  [inst_1 : CategoryTheory.Bicategory.HasLeftKanExtension f g],
  (CategoryTheory.Bicategory.lanLeftExtension f g).extension = CategoryTheory.Bicategory.lan f g
Result.autoException ::
Duper saturated

Testing || Complex.norm_natCast_cpow_of_re_ne_zero : ∀ (n : ℕ) {s : ℂ}, s.re ≠ 0 → ‖↑n ^ s‖ = ↑n ^ s.re
Result.success

Testing || Finset.product_val : ∀ {α : Type u_1} {β : Type u_2} {s : Finset α} {t : Finset β}, (s ×ˢ t).val = s.val ×ˢ t.val
Result.autoException ::
Duper saturated

Testing || EllipticCurve.ofJ1728_j : ∀ (R : Type u) [inst : CommRing R] [inst_1 : Invertible 2], (EllipticCurve.ofJ1728 R).j = 1728
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `HasDistribNeg.toInvolutiveNeg`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || max_comm : ∀ {α : Type u_1} [inst : LinearOrder α] (a b : α), max a b = max b a
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || polarCoord_target : polarCoord.target = Set.Ioi 0 ×ˢ Set.Ioo (-Real.pi) Real.pi
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (¬ ((!0 (!1 !2)) = (!3 (!4 !5) (!6 (!7 !8) !8)))) is not type correct

Testing || Function.support_update_eq_ite : ∀ {α : Type u_1} {M : Type u_5} [inst : Zero M] [inst_1 : DecidableEq α] [inst_2 : DecidableEq M] (f : α → M) (x : α)
  (y : M),
  Function.support (Function.update f x y) = if y = 0 then Function.support f \ {x} else insert x (Function.support f)
Result.success

Testing || MonoidHom.mrange_top_of_surjective : ∀ {M : Type u_1} {N : Type u_2} [inst : MulOneClass M] [inst_1 : MulOneClass N] {F : Type u_4} [inst_2 : FunLike F M N]
  [mc : MonoidHomClass F M N] (f : F), Function.Surjective ⇑f → MonoidHom.mrange f = ⊤
Result.autoException ::
Duper saturated

Testing || measurable_dist : ∀ {α : Type u_1} [inst : PseudoMetricSpace α] [inst_1 : MeasurableSpace α] [inst_2 : OpensMeasurableSpace α]
  [inst_3 : SecondCountableTopology α], Measurable fun p => dist p.1 p.2
Result.success

Testing || HomologicalComplex.homologyπ_naturality : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  {ι : Type u_2} {c : ComplexShape ι} {K L : HomologicalComplex C c} (φ : K ⟶ L) (i : ι) [inst_2 : K.HasHomology i]
  [inst_3 : L.HasHomology i],
  CategoryTheory.CategoryStruct.comp (K.homologyπ i) (HomologicalComplex.homologyMap φ i) =
    CategoryTheory.CategoryStruct.comp (HomologicalComplex.cyclesMap φ i) (L.homologyπ i)
Result.autoException ::
Duper saturated

Testing || exists_and_iff_of_antitone : ∀ {α : Type u} [inst : SemilatticeInf α] {P Q : α → Prop},
  Antitone P → Antitone Q → (((∃ x, P x) ∧ ∃ x, Q x) ↔ ∃ x, P x ∧ Q x)
Result.autoException ::
Duper saturated

Testing || Real.volume_ball : ∀ (a r : ℝ), MeasureTheory.volume (Metric.ball a r) = ENNReal.ofReal (2 * r)
Result.success

Testing || ProbabilityTheory.Kernel.iIndepSet_congr : ∀ {α : Type u_1} {Ω : Type u_2} {ι : Type u_3} {_mα : MeasurableSpace α} {_mΩ : MeasurableSpace Ω}
  {κ η : ProbabilityTheory.Kernel α Ω} {μ : MeasureTheory.Measure α} {s : ι → Set Ω},
  ⇑κ =ᵐ[μ] ⇑η → (ProbabilityTheory.Kernel.iIndepSet s κ μ ↔ ProbabilityTheory.Kernel.iIndepSet s η μ)
Result.autoException ::
Duper saturated

Testing || lowerClosure_mul_distrib : ∀ {α : Type u_1} [inst : OrderedCommGroup α] (s t : Set α), lowerClosure (s * t) = lowerClosure s * lowerClosure t
Result.success

Testing || Language.add_def : ∀ {α : Type u_1} (l m : Language α), l + m = l ∪ m
Result.autoException ::
Duper saturated

Testing || ContDiffWithinAt.comp_inter_of_eq : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type uG}
  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {n : ℕ∞} {s : Set E} {t : Set F} {g : F → G} {f : E → F}
  {y : F} (x : E),
  ContDiffWithinAt 𝕜 n g t y → ContDiffWithinAt 𝕜 n f s x → f x = y → ContDiffWithinAt 𝕜 n (g ∘ f) (s ∩ f ⁻¹' t) x
Result.success

Testing || TypeVec.typevecCasesNil₂_appendFun : ∀ {β : TypeVec.Arrow Fin2.elim0 Fin2.elim0 → Sort u_1} (f : β TypeVec.nilFun),
  TypeVec.typevecCasesNil₂ f TypeVec.nilFun = f
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.CategoryTheory.Galois.EssSurj.0.CategoryTheory.PreGaloisCategory.coconeQuotientDiag_pt : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{u₂, u₁} C] {F : CategoryTheory.Functor C FintypeCat}
  [inst_1 : CategoryTheory.GaloisCategory C] [inst_2 : CategoryTheory.PreGaloisCategory.FiberFunctor F]
  {V U : OpenSubgroup (CategoryTheory.Aut F)} (h : (↑U).Normal) {A : C}
  (u :
    (CategoryTheory.PreGaloisCategory.functorToAction F).obj A ≅
      Action.FintypeCat.ofMulAction (CategoryTheory.Aut F) (FintypeCat.of (CategoryTheory.Aut F ⧸ ↑U)))
  (hUinV : U ≤ V),
  (CategoryTheory.PreGaloisCategory.coconeQuotientDiag h u hUinV).pt =
    Action.FintypeCat.ofMulAction (CategoryTheory.Aut F) (FintypeCat.of (CategoryTheory.Aut F ⧸ ↑V))
Result.autoException ::
Duper saturated

Testing || Finset.cons_induction : ∀ {α : Type u_4} {p : Finset α → Prop},
  p ∅ → (∀ (a : α) (s : Finset α) (h : a ∉ s), p s → p (Finset.cons a s h)) → ∀ (s : Finset α), p s
Result.autoException ::
Duper saturated

Testing || mem_rightAddCoset_rightAddCoset : ∀ {α : Type u_1} [inst : AddMonoid α] (s : AddSubmonoid α) {a : α}, AddOpposite.op a +ᵥ ↑s = ↑s → a ∈ s
Result.success

Testing || CategoryTheory.Functor.Full.of_comp_faithful_iso : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  {E : Type u₃} [inst_2 : CategoryTheory.Category.{v₃, u₃} E] {F : CategoryTheory.Functor C D}
  {G : CategoryTheory.Functor D E} {H : CategoryTheory.Functor C E} [inst_3 : H.Full] [inst_4 : G.Faithful],
  (F.comp G ≅ H) → F.Full
Result.autoException ::
Duper saturated

Testing || Prod.instAddRightCancelMonoid.proof_4 : ∀ {M : Type u_1} {N : Type u_2} [inst : AddRightCancelMonoid M] [inst_1 : AddRightCancelMonoid N] (n : ℕ) (x : M × N),
  nsmulRecAuto (n + 1) x = nsmulRecAuto (n + 1) x
Result.success

Testing || List.map_mk_disjoint_sym2 : ∀ {α : Type u_1} (x : α) (xs : List α), x ∉ xs → (List.map (fun y => s(x, y)) xs).Disjoint xs.sym2
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Quaternion.star_smul : ∀ {S : Type u_1} {R : Type u_3} [inst : CommRing R] [inst_1 : Monoid S] [inst_2 : DistribMulAction S R] (s : S)
  (a : Quaternion R), star (s • a) = s • star a
Result.success

Testing || le_egauge_smul_left : ∀ {𝕜 : Type u_1} [inst : NormedDivisionRing 𝕜] {E : Type u_2} [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E] (c : 𝕜)
  (s : Set E) (x : E), egauge 𝕜 s x / ↑‖c‖₊ ≤ egauge 𝕜 (c • s) x
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `egauge cifvar_16 x_1 x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Seminorm.smul_inf : ∀ {R : Type u_1} {𝕜 : Type u_3} {E : Type u_7} [inst : NormedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]
  [inst_3 : SMul R ℝ] [inst_4 : SMul R NNReal] [inst_5 : IsScalarTower R NNReal ℝ] (r : R) (p q : Seminorm 𝕜 E),
  r • (p ⊓ q) = r • p ⊓ r • q
Result.autoException ::
Duper saturated

Testing || Function.Injective2.right : ∀ {α : Sort u_1} {β : Sort u_2} {γ : Sort u_3} {f : α → β → γ},
  Function.Injective2 f → ∀ (a : α), Function.Injective (f a)
Result.autoException ::
Duper saturated

Testing || deriv_const_smul : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {F : Type v} [inst_1 : NormedAddCommGroup F]
  [inst_2 : NormedSpace 𝕜 F] {f : 𝕜 → F} {x : 𝕜} {R : Type u_2} [inst_3 : Semiring R] [inst_4 : Module R F]
  [inst_5 : SMulCommClass 𝕜 R F] [inst_6 : ContinuousConstSMul R F] (c : R),
  DifferentiableAt 𝕜 f x → deriv (fun y => c • f y) x = c • deriv f x
Result.success

Testing || Batteries.RBNode.Any_reverse : ∀ {α : Type u_1} {p : α → Prop} {t : Batteries.RBNode α}, Batteries.RBNode.Any p t.reverse ↔ Batteries.RBNode.Any p t
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Doset.doset_eq_of_mem : ∀ {G : Type u_1} [inst : Group G] {H K : Subgroup G} {a b : G},
  b ∈ Doset.doset a ↑H ↑K → Doset.doset b ↑H ↑K = Doset.doset a ↑H ↑K
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Doset.doset x_3 x_1 x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || SimpleGraph.adjMatrix_mulVec_const_apply_of_regular : ∀ {V : Type u_1} {α : Type u_2} {G : SimpleGraph V} [inst : DecidableRel G.Adj] [inst_1 : Fintype V]
  [inst_2 : NonAssocSemiring α] {d : ℕ} {a : α},
  G.IsRegularOfDegree d → ∀ {v : V}, (SimpleGraph.adjMatrix α G).mulVec (Function.const V a) v = ↑d * a
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_13.neighborSetFintype x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.measure_setLaverage_le_pos : ∀ {α : Type u_1} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} {s : Set α} {f : α → ENNReal},
  μ s ≠ 0 →
    MeasureTheory.NullMeasurableSet s μ →
      ∫⁻ (a : α) in s, f a ∂μ ≠ ⊤ → 0 < μ {x | x ∈ s ∧ ⨍⁻ (a : α) in s, f a ∂μ ≤ f x}
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : (#3 → Prop), (∀ x1 : #2, ((!10 (λx2 : #3, ((!11 x1 x2) ∧ (x0 x2)))) = (!24 (!10 (λx2 : #3, (x0 x2))) x1)))) is not type correct

Testing || Antisymmetrization.induction_on : ∀ {α : Type u_1} (r : α → α → Prop) [inst : IsPreorder α r] {p : Antisymmetrization α r → Prop}
  (a : Antisymmetrization α r), (∀ (a : α), p (toAntisymmetrization r a)) → p a
Result.autoException ::
Duper saturated

Testing || Multiset.cons_add : ∀ {α : Type u_1} (a : α) (s t : Multiset α), a ::ₘ s + t = a ::ₘ (s + t)
Result.success

Testing || csInf_Ici : ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {a : α}, sInf (Set.Ici a) = a
Result.success

Testing || Array.toList_filterMap : ∀ {α : Type u_1} {β : Type u_2} (f : α → Option β) (l : Array α),
  (Array.filterMap f l).toList = List.filterMap f l.toList
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CauSeq.sup_equiv_sup : ∀ {α : Type u_1} [inst : LinearOrderedField α] {a₁ b₁ a₂ b₂ : CauSeq α abs}, a₁ ≈ a₂ → b₁ ≈ b₂ → a₁ ⊔ b₁ ≈ a₂ ⊔ b₂
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Polynomial.isUnit_of_isUnit_leadingCoeff_of_isUnit_map : ∀ {R : Type u} {S : Type v} [inst : Semiring R] [inst_1 : CommRing S] [inst_2 : IsDomain S] (φ : R →+* S)
  {f : Polynomial R}, IsUnit f.leadingCoeff → IsUnit (Polynomial.map φ f) → IsUnit f
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Array.getElem_ofFn : ∀ {n : ℕ} {α : Type u_1} (f : Fin n → α) (i : ℕ) (h : i < (Array.ofFn f).size), (Array.ofFn f)[i] = f ⟨i, ⋯⟩
Result.autoException ::
Duper saturated

Testing || Orientation.right_ne_zero_of_oangle_eq_pi : ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : Fact (Module.finrank ℝ V = 2)]
  (o : Orientation ℝ V (Fin 2)) {x y : V}, o.oangle x y = ↑Real.pi → y ≠ 0
Result.autoException ::
Duper saturated

Testing || Function.const_pos : ∀ {α : Type u_2} {β : Type u_3} [inst : Zero α] [inst_1 : Preorder α] {a : α} [inst_2 : Nonempty β],
  0 < Function.const β a ↔ 0 < a
Result.autoException ::
Duper saturated

Testing || nonpos_of_add_le_right : ∀ {α : Type u_1} [inst : AddZeroClass α] [inst_1 : LE α] [inst_2 : AddLeftReflectLE α] {a b : α}, a + b ≤ a → b ≤ 0
Result.success

Testing || ContinuousMap.inf_apply : ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] [inst_2 : SemilatticeInf β]
  [inst_3 : ContinuousInf β] (f g : C(α, β)) (a : α), (f ⊓ g) a = f a ⊓ g a
Result.autoException ::
Duper saturated

Testing || MeasureTheory.measurable_restrict_cylinderEvents : ∀ {ι : Type u_2} {π : ι → Type u_3} [m : (i : ι) → MeasurableSpace (π i)] (Δ : Set ι), Measurable Δ.restrict
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `m (cifvar_7 a)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Asymptotics.IsBigOWith.right_le_sub_of_lt_one : ∀ {α : Type u_1} {E' : Type u_6} [inst : SeminormedAddCommGroup E'] {c : ℝ} {l : Filter α} {f₁ f₂ : α → E'},
  Asymptotics.IsBigOWith c l f₁ f₂ → c < 1 → Asymptotics.IsBigOWith (1 / (1 - c)) l f₂ fun x => f₂ x - f₁ x
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_23 < cifvar_10 x_2 x_3`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || LinearMap.iInf_ker_proj_le_iSup_range_stdBasis : ∀ (R : Type u_1) {ι : Type u_2} [inst : Semiring R] (φ : ι → Type u_3) [inst_1 : (i : ι) → AddCommMonoid (φ i)]
  [inst_2 : (i : ι) → Module R (φ i)] [inst_3 : DecidableEq ι] {I : Finset ι} {J : Set ι},
  Set.univ ⊆ ↑I ∪ J → ⨅ i ∈ J, LinearMap.ker (LinearMap.proj i) ≤ ⨆ i ∈ I, LinearMap.range (LinearMap.stdBasis R φ i)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type i✝² ∈ J of λ binder contains bound variables

Testing || IsLocalization.map_map : ∀ {R : Type u_1} [inst : CommSemiring R] {M : Submonoid R} {S : Type u_2} [inst_1 : CommSemiring S]
  [inst_2 : Algebra R S] {P : Type u_3} [inst_3 : CommSemiring P] [inst_4 : IsLocalization M S] {g : R →+* P}
  {T : Submonoid P} {Q : Type u_4} [inst_5 : CommSemiring Q] [inst_6 : Algebra P Q] [inst_7 : IsLocalization T Q]
  (hy : M ≤ Submonoid.comap g T) {A : Type u_5} [inst_8 : CommSemiring A] {U : Submonoid A} {W : Type u_6}
  [inst_9 : CommSemiring W] [inst_10 : Algebra A W] [inst_11 : IsLocalization U W] {l : P →+* A}
  (hl : T ≤ Submonoid.comap l U) (x : S),
  (IsLocalization.map W l hl) ((IsLocalization.map Q g hy) x) = (IsLocalization.map W (l.comp g) ⋯) x
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: M ≤ Submonoid.comap g T is not a `∀`

Testing || isConnected_Iio : ∀ {α : Type u} [inst : ConditionallyCompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]
  [inst_3 : DenselyOrdered α] {a : α} [inst_4 : NoMinOrder α], IsConnected (Set.Iio a)
Result.autoException ::
Duper saturated

Testing || ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorHom : ∀ {R : Type u} [inst : CommRing R] {X₁ Y₁ X₂ Y₂ : ModuleCat R} (f : X₁ ⟶ Y₁) (g : X₂ ⟶ Y₂),
  CategoryTheory.MonoidalCategory.tensorHom f g = TensorProduct.map f g
Result.autoException ::
Duper saturated

Testing || topologicalAddGroup_inf : ∀ {G : Type w} [inst : AddGroup G] {t₁ t₂ : TopologicalSpace G},
  TopologicalAddGroup G → TopologicalAddGroup G → TopologicalAddGroup G
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Module.moduleEndSelf_symm_apply : ∀ (R : Type u_1) [inst : Semiring R] (f : Module.End R R), (Module.moduleEndSelf R).symm f = MulOpposite.op (f 1)
Result.autoException ::
Duper saturated

Testing || StrictMonoOn.compares : ∀ {α : Type u} {β : Type v} [inst : LinearOrder α] [inst_1 : Preorder β] {f : α → β} {s : Set α},
  StrictMonoOn f s → ∀ {a b : α}, a ∈ s → b ∈ s → ∀ {o : Ordering}, o.Compares (f a) (f b) ↔ o.Compares a b
Result.autoException ::
Duper saturated

Testing || BddAbove.inter_of_left : ∀ {α : Type u} [inst : Preorder α] {s t : Set α}, BddAbove s → BddAbove (s ∩ t)
Result.success

Testing || AddSubgroup.relindex_ne_zero_trans : ∀ {G : Type u_1} [inst : AddGroup G] {H K L : AddSubgroup G}, H.relindex K ≠ 0 → K.relindex L ≠ 0 → H.relindex L ≠ 0
Result.success

Testing || MeasureTheory.eLpNorm_sum_le : ∀ {α : Type u_1} {E : Type u_2} {m : MeasurableSpace α} [inst : NormedAddCommGroup E] {p : ENNReal}
  {μ : MeasureTheory.Measure α} {ι : Type u_3} {f : ι → α → E} {s : Finset ι},
  (∀ i ∈ s, MeasureTheory.AEStronglyMeasurable (f i) μ) →
    1 ≤ p → MeasureTheory.eLpNorm (∑ i ∈ s, f i) p μ ≤ ∑ i ∈ s, MeasureTheory.eLpNorm (f i) p μ
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Matrix.toLinearMap₂'_toMatrix' : ∀ {R : Type u_1} {S₁ : Type u_3} {S₂ : Type u_5} {N₂ : Type u_11} {n : Type u_12} {m : Type u_13}
  [inst : CommSemiring R] [inst_1 : AddCommMonoid N₂] [inst_2 : Module R N₂] [inst_3 : Semiring S₁]
  [inst_4 : Semiring S₂] [inst_5 : Module S₁ N₂] [inst_6 : Module S₂ N₂] [inst_7 : SMulCommClass S₁ R N₂]
  [inst_8 : SMulCommClass S₂ R N₂] [inst_9 : SMulCommClass S₂ S₁ N₂] [inst_10 : Fintype n] [inst_11 : Fintype m]
  [inst_12 : DecidableEq n] [inst_13 : DecidableEq m] (B : (n → S₁) →ₗ[S₁] (m → S₂) →ₗ[S₂] N₂),
  (Matrix.toLinearMap₂' R) ((LinearMap.toMatrix₂' R) B) = B
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AlgHom.fieldRange_eq_map : ∀ {F : Type u_1} [inst : Field F] {E : Type u_2} [inst_1 : Field E] [inst_2 : Algebra F E] {K : Type u_3}
  [inst_3 : Field K] [inst_4 : Algebra F K] (f : E →ₐ[F] K), f.fieldRange = IntermediateField.map f ⊤
Result.autoException ::
Duper saturated

Testing || ContinuousMap.smul_comp : ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {R : Type u_3} {M : Type u_5}
  [inst_2 : TopologicalSpace M] [inst_3 : SMul R M] [inst_4 : ContinuousConstSMul R M] (r : R) (f : C(β, M))
  (g : C(α, β)), (r • f).comp g = r • f.comp g
Result.autoException ::
Duper saturated

Testing || eq_mul_inv_iff_mul_eq : ∀ {G : Type u_3} [inst : Group G] {a b c : G}, a = b * c⁻¹ ↔ a * c = b
Result.success

Testing || Hamming.toHamming_inj : ∀ {ι : Type u_2} {β : ι → Type u_3} {x y : (i : ι) → β i}, Hamming.toHamming x = Hamming.toHamming y ↔ x = y
Result.autoException ::
Duper saturated

Testing || CategoryTheory.LaxMonoidalFunctor.comp_μ : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}
  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] [inst_3 : CategoryTheory.MonoidalCategory D] {E : Type u₃}
  [inst_4 : CategoryTheory.Category.{v₃, u₃} E] [inst_5 : CategoryTheory.MonoidalCategory E]
  (F : CategoryTheory.LaxMonoidalFunctor C D) (G : CategoryTheory.LaxMonoidalFunctor D E) (X Y : C),
  (F ⊗⋙ G).μ X Y = CategoryTheory.CategoryStruct.comp (G.μ (F.obj X) (F.obj Y)) (G.map (F.μ X Y))
Result.autoException ::
Duper saturated

Testing || frobeniusNumber_pair : ∀ {m n : ℕ}, m.Coprime n → 1 < m → 1 < n → FrobeniusNumber (m * n - m - n) {m, n}
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || RightDerivMeasurableAux.D_subset_differentiable_set : ∀ {F : Type u_1} [inst : NormedAddCommGroup F] [inst_1 : NormedSpace ℝ F] {f : ℝ → F} {K : Set F},
  IsComplete K →
    RightDerivMeasurableAux.D f K ⊆ {x | DifferentiableWithinAt ℝ f (Set.Ici x) x ∧ derivWithin f (Set.Ici x) x ∈ K}
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x_1 of λ binder contains bound variables

Testing || ContDiffOn.differentiableOn_iteratedFDerivWithin : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}
  {f : E → F} {n : ℕ∞} {m : ℕ},
  ContDiffOn 𝕜 n f s → ↑m < n → UniqueDiffOn 𝕜 s → DifferentiableOn 𝕜 (iteratedFDerivWithin 𝕜 m f s) s
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type Fin m of λ binder contains bound variables

Testing || WeierstrassCurve.c₆_of_isCharTwoJNeZeroNF : ∀ {R : Type u_1} [inst : CommRing R] (W : WeierstrassCurve R) [inst_1 : W.IsCharTwoJNeZeroNF],
  W.c₆ = -W.b₂ ^ 3 - 864 * W.a₆
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Quiver.starEquivCostar_apply_fst : ∀ {U : Type u_1} [inst : Quiver U] [inst_1 : Quiver.HasInvolutiveReverse U] (u : U) (e : Quiver.Star u),
  ((Quiver.starEquivCostar u) e).fst = e.fst
Result.autoException ::
Duper saturated

Testing || AddCon.sInf_toSetoid : ∀ {M : Type u_1} [inst : Add M] (S : Set (AddCon M)), (sInf S).toSetoid = sInf (AddCon.toSetoid '' S)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `self.toSetoid`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AffineSubspace.SSameSide.not_wOppSide : ∀ {R : Type u_1} {V : Type u_2} {P : Type u_4} [inst : LinearOrderedField R] [inst_1 : AddCommGroup V]
  [inst_2 : Module R V] [inst_3 : AddTorsor V P] {s : AffineSubspace R P} {x y : P}, s.SSameSide x y → ¬s.WOppSide x y
Result.autoException ::
Duper saturated

Testing || exists_true_left : ∀ {p : True → Prop}, Exists p ↔ p True.intro
Result.autoException ::
Duper saturated

Testing || Set.union_smul_inter_subset_union : ∀ {α : Type u_2} {β : Type u_3} [inst : SMul α β] {s₁ s₂ : Set α} {t₁ t₂ : Set β},
  (s₁ ∪ s₂) • (t₁ ∩ t₂) ⊆ s₁ • t₁ ∪ s₂ • t₂
Result.autoException ::
Duper saturated

Testing || Set.set_smul_subset_set_smul_iff₀ : ∀ {α : Type u_2} {β : Type u_3} [inst : GroupWithZero α] [inst_1 : MulAction α β] {a : α},
  a ≠ 0 → ∀ {A B : Set β}, a • A ⊆ a • B ↔ A ⊆ B
Result.autoException ::
Duper saturated

Testing || Submodule.mem_localized' : ∀ {R : Type u} (S : Type u') {M : Type v} {N : Type v'} [inst : CommRing R] [inst_1 : CommRing S]
  [inst_2 : AddCommGroup M] [inst_3 : AddCommGroup N] [inst_4 : Module R M] [inst_5 : Module R N] [inst_6 : Algebra R S]
  [inst_7 : Module S N] [inst_8 : IsScalarTower R S N] (p : Submonoid R) [inst_9 : IsLocalization p S] (f : M →ₗ[R] N)
  [inst_10 : IsLocalizedModule p f] (M' : Submodule R M) (x : N),
  x ∈ Submodule.localized' S p f M' ↔ ∃ m ∈ M', ∃ s, IsLocalizedModule.mk' f m s = x
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || sigmaFinsuppEquivDFinsupp_single : ∀ {ι : Type u_1} {η : ι → Type u_4} {N : Type u_5} [inst : DecidableEq ι] [inst_1 : Zero N] (a : (i : ι) × η i) (n : N),
  (sigmaFinsuppEquivDFinsupp fun₀ | a => n) = fun₀ | a.fst => fun₀ | a.snd => n
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Finsupp.instZero`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Pell.y_mul_dvd : ∀ {a : ℕ} (a1 : 1 < a) (n k : ℕ), Pell.yn a1 n ∣ Pell.yn a1 (n * k)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Bicategory.associator_naturality_left_assoc : ∀ {B : Type u} [inst : CategoryTheory.Bicategory B] {a b c d : B} {f f' : a ⟶ b} (η : f ⟶ f') (g : b ⟶ c) (h : c ⟶ d)
  {Z : a ⟶ d} (h_1 : CategoryTheory.CategoryStruct.comp f' (CategoryTheory.CategoryStruct.comp g h) ⟶ Z),
  CategoryTheory.CategoryStruct.comp
      (CategoryTheory.Bicategory.whiskerRight (CategoryTheory.Bicategory.whiskerRight η g) h)
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator f' g h).hom h_1) =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator f g h).hom
      (CategoryTheory.CategoryStruct.comp
        (CategoryTheory.Bicategory.whiskerRight η (CategoryTheory.CategoryStruct.comp g h)) h_1)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Bicategory.whiskerRight
  x_0 (cifvar_38 cifvar_39 x_1)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AddSubmonoid.coe_topologicalClosure : ∀ {M : Type u_3} [inst : TopologicalSpace M] [inst_1 : AddMonoid M] [inst_2 : ContinuousAdd M] (s : AddSubmonoid M),
  ↑s.topologicalClosure = closure ↑s
Result.autoException ::
Duper saturated

Testing || nat_sub_dvd_pow_sub_pow : ∀ (x y n : ℕ), x - y ∣ x ^ n - y ^ n
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || RCLike.wInner_cWeight_const_left : ∀ {ι : Type u_1} {𝕜 : Type u_3} [inst : Fintype ι] [inst_1 : RCLike 𝕜] (a : 𝕜) (f : ι → 𝕜),
  RCLike.wInner RCLike.cWeight (Function.const ι a) f = (starRingEnd 𝕜) a * Finset.univ.expect fun i => f i
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || HasStrictDerivAt.clog_real : ∀ {f : ℝ → ℂ} {x : ℝ} {f' : ℂ},
  HasStrictDerivAt f f' x → f x ∈ Complex.slitPlane → HasStrictDerivAt (fun t => Complex.log (f t)) (f' / f x) x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || padicValNat_mul_pow_left : ∀ {p q : ℕ} [hp : Fact (Nat.Prime p)] [hq : Fact (Nat.Prime q)] (n m : ℕ), p ≠ q → padicValNat p (p ^ n * q ^ m) = n
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Multiset.countP_le_card : ∀ {α : Type u_1} (p : α → Prop) [inst : DecidablePred p] (s : Multiset α), Multiset.countP p s ≤ Multiset.card s
Result.autoException ::
Duper saturated

Testing || CategoryTheory.orderDualEquivalence_counitIso : ∀ (X : Type u) [inst : Preorder X],
  (CategoryTheory.orderDualEquivalence X).counitIso =
    CategoryTheory.Iso.refl
      ({ obj := fun x => OrderDual.toDual (Opposite.unop x), map := fun {X_1 Y} f => CategoryTheory.homOfLE ⋯,
            map_id := ⋯, map_comp := ⋯ }.comp
        { obj := fun x => Opposite.op (OrderDual.ofDual x), map := fun {X_1 Y} f => (CategoryTheory.homOfLE ⋯).op,
          map_id := ⋯, map_comp := ⋯ })
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.CategoryStruct.id
  (cifvar_5 cifvar_6 (cifvar_7 x_0))`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.Limits.IsLimit.conePointsIsoOfNatIso_inv_comp_assoc : ∀ {J : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} J] {C : Type u₃} [inst_1 : CategoryTheory.Category.{v₃, u₃} C]
  {F G : CategoryTheory.Functor J C} {s : CategoryTheory.Limits.Cone F} {t : CategoryTheory.Limits.Cone G}
  (P : CategoryTheory.Limits.IsLimit s) (Q : CategoryTheory.Limits.IsLimit t) (w : F ≅ G) (j : J) {Z : C}
  (h : F.obj j ⟶ Z),
  CategoryTheory.CategoryStruct.comp (P.conePointsIsoOfNatIso Q w).inv
      (CategoryTheory.CategoryStruct.comp (s.π.app j) h) =
    CategoryTheory.CategoryStruct.comp (t.π.app j) (CategoryTheory.CategoryStruct.comp (w.inv.app j) h)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Limits.IsLimit.map
  x_0 x_1 x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || exists_le_mul_self : ∀ {R : Type u_3} [inst : LinearOrderedSemiring R] (a : R), ∃ x ≥ 0, a ≤ x * x
Result.success

Testing || CategoryTheory.MonoidalOfChosenFiniteProducts.leftUnitor_naturality : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C]
  (𝒯 : CategoryTheory.Limits.LimitCone (CategoryTheory.Functor.empty C))
  (ℬ : (X Y : C) → CategoryTheory.Limits.LimitCone (CategoryTheory.Limits.pair X Y)) {X₁ X₂ : C} (f : X₁ ⟶ X₂),
  CategoryTheory.CategoryStruct.comp
      (CategoryTheory.MonoidalOfChosenFiniteProducts.tensorHom ℬ (CategoryTheory.CategoryStruct.id 𝒯.cone.pt) f)
      (CategoryTheory.Limits.BinaryFan.leftUnitor 𝒯.isLimit (ℬ 𝒯.cone.pt X₂).isLimit).hom =
    CategoryTheory.CategoryStruct.comp
      (CategoryTheory.Limits.BinaryFan.leftUnitor 𝒯.isLimit (ℬ 𝒯.cone.pt X₁).isLimit).hom f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.lift x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Nat.not_prime_of_dvd_of_lt : ∀ {m n : ℕ}, m ∣ n → 2 ≤ m → m < n → ¬Nat.Prime n
Result.autoException ::
Duper saturated

Testing || Polynomial.taylor_apply : ∀ {R : Type u_1} [inst : Semiring R] (r : R) (f : Polynomial R),
  (Polynomial.taylor r) f = f.comp (Polynomial.X + Polynomial.C r)
Result.autoException ::
Duper saturated

Testing || Set.eq_empty_of_ssubset_singleton : ∀ {α : Type u} {s : Set α} {x : α}, s ⊂ {x} → s = ∅
Result.success

Testing || Nat.factorizationLCMRight_dvd_right : ∀ (a b : ℕ), a.factorizationLCMRight b ∣ b
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Nat.sub_add_comm : ∀ {n m k : ℕ}, k ≤ n → n + m - k = n - k + m
Result.success

Testing || BoundedLatticeHom.id_comp : ∀ {α : Type u_3} {β : Type u_4} [inst : Lattice α] [inst_1 : Lattice β] [inst_2 : BoundedOrder α]
  [inst_3 : BoundedOrder β] (f : BoundedLatticeHom α β), (BoundedLatticeHom.id β).comp f = f
Result.autoException ::
Duper saturated

Testing || Filter.monotone_principal : ∀ {α : Type u}, Monotone Filter.principal
Result.autoException ::
Duper saturated

Testing || LiouvilleWith.add_nat : ∀ {p x : ℝ}, LiouvilleWith p x → ∀ (n : ℕ), LiouvilleWith p (x + ↑n)
Result.autoException ::
(deterministic) timeout at `unify`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.integral_finset_sum_measure : ∀ {α : Type u_1} {G : Type u_5} [inst : NormedAddCommGroup G] [inst_1 : NormedSpace ℝ G] {ι : Type u_7}
  {m : MeasurableSpace α} {f : α → G} {μ : ι → MeasureTheory.Measure α} {s : Finset ι},
  (∀ i ∈ s, MeasureTheory.Integrable f (μ i)) → ∫ (a : α), f a ∂∑ i ∈ s, μ i = ∑ i ∈ s, ∫ (a : α), f a ∂μ i
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.OplaxFunctor.bicategory_homCategory_id_app : ∀ (B : Type u₁) [inst : CategoryTheory.Bicategory B] (C : Type u₂) [inst_1 : CategoryTheory.Bicategory C]
  (a b : CategoryTheory.OplaxFunctor B C) (η : a ⟶ b) (a_1 : B),
  (CategoryTheory.CategoryStruct.id η).app a_1 = CategoryTheory.CategoryStruct.id (η.app a_1)
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Limits.pushout.congrHom_inv : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y Z : C} {f₁ f₂ : X ⟶ Y} {g₁ g₂ : X ⟶ Z} (h₁ : f₁ = f₂)
  (h₂ : g₁ = g₂) [inst_1 : CategoryTheory.Limits.HasPushout f₁ g₁] [inst_2 : CategoryTheory.Limits.HasPushout f₂ g₂],
  (CategoryTheory.Limits.pushout.congrHom h₁ h₂).inv =
    CategoryTheory.Limits.pushout.map f₂ g₂ f₁ g₁ (CategoryTheory.CategoryStruct.id Y)
      (CategoryTheory.CategoryStruct.id Z) (CategoryTheory.CategoryStruct.id X) ⋯ ⋯
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Limits.colimit.ι
  (cifvar_7 cifvar_2 cifvar_5) x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.apply_indicator_symmDiff : ∀ {α : Type u_1} {β : Type u_2} {G : Type u_5} [inst : AddGroup G] {g : G → β},
  (∀ (x : G), g (-x) = g x) →
    ∀ (s t : Set α) (f : α → G) (x : α), g ((symmDiff s t).indicator f x) = g (s.indicator f x - t.indicator f x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Limits.BinaryBicones.functoriality_map_hom : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  {D : Type uD} [inst_2 : CategoryTheory.Category.{uD', uD} D] [inst_3 : CategoryTheory.Limits.HasZeroMorphisms D]
  (P Q : C) (F : CategoryTheory.Functor C D) [inst_4 : F.PreservesZeroMorphisms]
  {X Y : CategoryTheory.Limits.BinaryBicone P Q} (f : X ⟶ Y),
  ((CategoryTheory.Limits.BinaryBicones.functoriality P Q F).map f).hom = F.map f.hom
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.inl`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || List.toFinsupp_cons_eq_single_add_embDomain : ∀ {R : Type u_2} [inst : AddZeroClass R] (x : R) (xs : List R)
  [inst_1 : DecidablePred fun x_1 => (x :: xs).getD x_1 0 ≠ 0] [inst_2 : DecidablePred fun x => xs.getD x 0 ≠ 0],
  (x :: xs).toFinsupp =
    (fun₀ | 0 => x) + Finsupp.embDomain { toFun := Nat.succ, inj' := Nat.succ_injective } xs.toFinsupp
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_14 cifvar_15
    (cifvar_16 cifvar_6 cifvar_15)).toFinsupp`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Equiv.Perm.sumCongr_symm : ∀ {α : Type u_9} {β : Type u_10} (e : Equiv.Perm α) (f : Equiv.Perm β),
  Equiv.symm (e.sumCongr f) = Equiv.Perm.sumCongr (Equiv.symm e) (Equiv.symm f)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Nat.log_mul_base : ∀ {b n : ℕ}, 1 < b → n ≠ 0 → Nat.log b (n * b) = Nat.log b n + 1
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || singleton_sub_closedBall : ∀ {E : Type u_1} [inst : SeminormedAddCommGroup E] (δ : ℝ) (x y : E),
  {x} - Metric.closedBall y δ = Metric.closedBall (x - y) δ
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Stream'.Seq.tail_cons : ∀ {α : Type u} (a : α) (s : Stream'.Seq α), (Stream'.Seq.cons a s).tail = s
Result.autoException ::
Duper saturated

Testing || Associates.out_mk : ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : NormalizationMonoid α] (a : α),
  (Associates.mk a).out = normalize a
Result.autoException ::
Duper saturated

Testing || AddUnits.instAddMonoid.proof_6 : ∀ {α : Type u_1} [inst : AddMonoid α] (a : AddUnits α),
  (fun n a => { val := n • ↑a, neg := n • ↑(-a), val_neg := ⋯, neg_val := ⋯ }) 0 a = 0
Result.autoException ::
Duper saturated

Testing || IsPredArchimedean.pred_findAtom : ∀ {α : Type u_1} [inst : PartialOrder α] [inst_1 : PredOrder α] [inst_2 : IsPredArchimedean α] [inst_3 : OrderBot α]
  [inst_4 : DecidableEq α] (r : α), Order.pred (IsPredArchimedean.findAtom r) = ⊥
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Complex.arg_zero : Complex.arg 0 = 0
Result.autoException ::
Duper saturated

Testing || List.range'_eq_range'TR.go : ∀ (step : optParam ℕ 1) (s n m : ℕ),
  List.range'TR.go step n (s + step * n) (List.range' (s + step * n) m step) = List.range' s (n + m) step
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsUpperSet.thickening' : ∀ {α : Type u_1} [inst : NormedOrderedGroup α] {s : Set α}, IsUpperSet s → ∀ (ε : ℝ), IsUpperSet (Metric.thickening ε s)
Result.success

Testing || divp_inv : ∀ {α : Type u} [inst : Monoid α] {a : α} (u : αˣ), a /ₚ u⁻¹ = a * ↑u
Result.autoException ::
Duper saturated

Testing || LinearMap.BilinForm.dualSubmoduleParing_spec : ∀ {R : Type u_1} {S : Type u_3} {M : Type u_2} [inst : CommRing R] [inst_1 : Field S] [inst_2 : AddCommGroup M]
  [inst_3 : Algebra R S] [inst_4 : Module R M] [inst_5 : Module S M] [inst_6 : IsScalarTower R S M]
  (B : LinearMap.BilinForm S M) {N : Submodule R M} (x : ↥(B.dualSubmodule N)) (y : ↥N),
  (algebraMap R S) (B.dualSubmoduleParing x y) = (B ↑x) ↑y
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Discrete.addMonoidalFunctorComp.proof_7 : ∀ {M : Type u_1} [inst : AddMonoid M] {N : Type u_2} [inst_1 : AddMonoid N] {K : Type u_1} [inst_2 : AddMonoid K]
  (F : M →+ N) (G : N →+ K),
  CategoryTheory.CategoryStruct.comp
      {
        app := fun x =>
          CategoryTheory.CategoryStruct.id
            ((CategoryTheory.Discrete.addMonoidalFunctor F ⊗⋙ CategoryTheory.Discrete.addMonoidalFunctor G).obj x),
        naturality := ⋯, unit := ⋯, tensor := ⋯ }
      {
        app := fun x =>
          CategoryTheory.CategoryStruct.id ((CategoryTheory.Discrete.addMonoidalFunctor (G.comp F)).obj x),
        naturality := ⋯, unit := ⋯, tensor := ⋯ } =
    CategoryTheory.CategoryStruct.id
      (CategoryTheory.Discrete.addMonoidalFunctor F ⊗⋙ CategoryTheory.Discrete.addMonoidalFunctor G)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Int.log_ofNat : ∀ {R : Type u_1} [inst : LinearOrderedSemifield R] [inst_1 : FloorSemiring R] (b n : ℕ) [inst_2 : n.AtLeastTwo],
  Int.log b (OfNat.ofNat n) = ↑(Nat.log b (OfNat.ofNat n))
Result.autoException ::
Auto.LamReif.processLam0Arg3 :: OfNat.ofNat instance is not based on a nat literal

Testing || mul_sub : ∀ {α : Type u} [inst : NonUnitalNonAssocRing α] (a b c : α), a * (b - c) = a * b - a * c
Result.success

Testing || Affine.Simplex.centroid_eq_affineCombination_of_pointsWithCircumcenter : ∀ {V : Type u_1} {P : Type u_2} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [inst_2 : MetricSpace P]
  [inst_3 : NormedAddTorsor V P] {n : ℕ} (s : Affine.Simplex ℝ P n) (fs : Finset (Fin (n + 1))),
  Finset.centroid ℝ fs s.points =
    (Finset.affineCombination ℝ Finset.univ s.pointsWithCircumcenter)
      (Affine.Simplex.centroidWeightsWithCircumcenter fs)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.AEEqFun.ext_iff : ∀ {α : Type u_1} {β : Type u_2} [inst : MeasurableSpace α] {μ : MeasureTheory.Measure α} [inst_1 : TopologicalSpace β]
  {f g : α →ₘ[μ] β}, f = g ↔ ↑f =ᵐ[μ] ↑g
Result.success

Testing || ProbabilityTheory.Kernel.set_integral_piecewise : ∀ {α : Type u_1} {β : Type u_2} {mα : MeasurableSpace α} {mβ : MeasurableSpace β} {κ : ProbabilityTheory.Kernel α β}
  {E : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {η : ProbabilityTheory.Kernel α β} {s : Set α}
  {hs : MeasurableSet s} [inst_2 : DecidablePred fun x => x ∈ s] (a : α) (g : β → E) (t : Set β),
  ∫ (b : β) in t, g b ∂(ProbabilityTheory.Kernel.piecewise hs κ η) a =
    if a ∈ s then ∫ (b : β) in t, g b ∂κ a else ∫ (b : β) in t, g b ∂η a
Result.autoException ::
Duper saturated

Testing || PMF.bindOnSupport_pure : ∀ {α : Type u_1} (p : PMF α), (p.bindOnSupport fun a x => PMF.pure a) = p
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type a ∈ p.support of λ binder contains bound variables

Testing || Multiset.count_le_count_cons : ∀ {α : Type u_1} [inst : DecidableEq α] (a b : α) (s : Multiset α), Multiset.count a s ≤ Multiset.count a (b ::ₘ s)
Result.success

Testing || AddLECancellable.lt_add_of_tsub_lt_left : ∀ {α : Type u_1} [inst : PartialOrder α] [inst_1 : AddCommSemigroup α] [inst_2 : Sub α] [inst_3 : OrderedSub α]
  {a b c : α}, AddLECancellable b → a - b < c → a < b + c
Result.success

Testing || Continuous.convolution_integrand_fst : ∀ {𝕜 : Type u𝕜} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]
  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'}
  [inst_3 : NontriviallyNormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜 E'] [inst_6 : NormedSpace 𝕜 F]
  (L : E →L[𝕜] E' →L[𝕜] F) [inst_7 : AddGroup G] [inst_8 : TopologicalSpace G] [inst_9 : ContinuousSub G],
  Continuous g → ∀ (t : G), Continuous fun x => (L (f t)) (g (x - t))
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Nat.pred_add_self : ∀ (n : ℕ), n.pred + n = (2 * n).pred
Result.autoException ::
Duper saturated

Testing || Cardinal.exists_infinite_fiber : ∀ {β α : Type u} (f : β → α), Cardinal.mk α < Cardinal.mk β → Infinite α → ∃ a, Infinite ↑(f ⁻¹' {a})
Result.autoException ::
Duper saturated

Testing || DirectSum.isInternal_submodule_iff_independent_and_iSup_eq_top : ∀ {R : Type u} [inst : Ring R] {ι : Type v} [dec_ι : DecidableEq ι] {M : Type u_1} [inst_1 : AddCommGroup M]
  [inst_2 : Module R M] (A : ι → Submodule R M), DirectSum.IsInternal A ↔ CompleteLattice.Independent A ∧ iSup A = ⊤
Result.success

Testing || Auto.Bool.beq_false : ∀ {a : Bool}, (a == false) = !a
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Int.add_neg_emod_self : ∀ (a b : ℤ), (a + -b) % b = a % b
Result.success

Testing || BoxIntegral.Prepartition.coe_eq_of_mem_split_of_lt_mem : ∀ {ι : Type u_1} {I J : BoxIntegral.Box ι} {i : ι} {x : ℝ} {y : ι → ℝ},
  J ∈ BoxIntegral.Prepartition.split I i x → y ∈ J → x < y i → ↑J = ↑I ∩ {y | x < y i}
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `BoxIntegral.Prepartition.instMembershipBox`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || List.modifyNthTail_id : ∀ {α : Type u_1} (n : ℕ) (l : List α), List.modifyTailIdx id n l = l
Result.success

Testing || Real.sin_half_eq_sqrt : ∀ {x : ℝ}, 0 ≤ x → x ≤ 2 * Real.pi → Real.sin (x / 2) = √((1 - Real.cos x) / 2)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Part.map_map : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} (g : β → γ) (f : α → β) (o : Part α),
  Part.map g (Part.map f o) = Part.map (g ∘ f) o
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Nat.beta_unbeta_coe : ∀ (l : List ℕ) (i : Fin l.length), (Nat.unbeta l).beta ↑i = l.get i
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Fin.fintype (cifvar_9 x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || HasDerivWithinAt.rpow : ∀ {f g : ℝ → ℝ} {f' g' x : ℝ} {s : Set ℝ},
  HasDerivWithinAt f f' s x →
    HasDerivWithinAt g g' s x →
      0 < f x → HasDerivWithinAt (fun x => f x ^ g x) (f' * g x * f x ^ (g x - 1) + g' * f x ^ g x * Real.log (f x)) s x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ENNReal.not_top_le_coe : ∀ {r : NNReal}, ¬⊤ ≤ ↑r
Result.autoException ::
Duper saturated

Testing || StrictConvex.linear_preimage : ∀ {𝕜 : Type u_1} {E : Type u_3} {F : Type u_4} [inst : OrderedSemiring 𝕜] [inst_1 : TopologicalSpace E]
  [inst_2 : TopologicalSpace F] [inst_3 : AddCommMonoid E] [inst_4 : AddCommMonoid F] [inst_5 : Module 𝕜 E]
  [inst_6 : Module 𝕜 F] {s : Set F},
  StrictConvex 𝕜 s → ∀ (f : E →ₗ[𝕜] F), Continuous ⇑f → Function.Injective ⇑f → StrictConvex 𝕜 (⇑f ⁻¹' s)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AdicCompletion.map_ext'' : ∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R) {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]
  {N : Type u_3} [inst_3 : AddCommGroup N] [inst_4 : Module R N] {f g : AdicCompletion I M →ₗ[R] N},
  f ∘ₗ AdicCompletion.mk I M = g ∘ₗ AdicCompletion.mk I M → f = g
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AddMonoid.Coprod.swap.proof_3 : ∀ (M : Type u_1) (N : Type u_2) [inst : AddZeroClass M] [inst_1 : AddZeroClass N] (x y : M),
  AddMonoid.Coprod.inr (x + y) =
    (AddMonoid.Coprod.mk.comp (FreeAddMonoid.map Sum.swap))
      (FreeAddMonoid.of (Sum.inl x) + FreeAddMonoid.of (Sum.inl y))
Result.autoException ::
Duper saturated

Testing || TopCat.GlueData.image_inter : ∀ (D : TopCat.GlueData) (i j : D.J),
  Set.range ⇑(D.ι i) ∩ Set.range ⇑(D.ι j) = Set.range ⇑(CategoryTheory.CategoryStruct.comp (D.f i j) (D.ι i))
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Polynomial.trailingDegree_C_mul_X_pow : ∀ {R : Type u} {a : R} [inst : Semiring R] (n : ℕ), a ≠ 0 → (Polynomial.C a * Polynomial.X ^ n).trailingDegree = ↑n
Result.success

Testing || Nat.exists_mul_pow_lt_factorial : ∀ (a c : ℕ), ∃ n0, ∀ n ≥ n0, a * c ^ n < (n - 1).factorial
Result.success

Testing || Submodule.neg_toAddSubmonoid : ∀ {R : Type u_2} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M] (S : Submodule R M),
  (-S).toAddSubmonoid = -S.toAddSubmonoid
Result.autoException ::
Duper saturated

Testing || Hyperreal.infinitePos_add_not_infiniteNeg : ∀ {x y : ℝ*}, x.InfinitePos → ¬y.InfiniteNeg → (x + y).InfinitePos
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Auto.Embedding.Lam.LamEquiv.mp? : ∀ {lctx : ℕ → Auto.Embedding.Lam.LamSort} {t : Auto.Embedding.Lam.LamTerm} {rty : Auto.Embedding.Lam.LamSort}
  {lval : Auto.Embedding.Lam.LamValuation} {rw t' : Auto.Embedding.Lam.LamTerm},
  Auto.Embedding.Lam.LamWF lval.toLamTyVal { lctx := lctx, rterm := t, rty := rty } →
    Auto.Embedding.Lam.LamValid lval lctx rw → rw.mp? t = some t' → Auto.Embedding.Lam.LamEquiv lval lctx rty t t'
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type Auto.Embedding.Lam.LamWF lval.toLamTyVal
  { lctx := lctx, rterm := x_0,
    rty := Auto.Embedding.Lam.LamSort.base Auto.Embedding.Lam.LamBaseSort.prop } of λ binder contains bound variables

Testing || WithLp.prod_antilipschitzWith_equiv : ∀ (p : ENNReal) (α : Type u_2) (β : Type u_3) [hp : Fact (1 ≤ p)] [inst : PseudoEMetricSpace α]
  [inst_1 : PseudoEMetricSpace β], AntilipschitzWith (2 ^ (1 / p).toReal) ⇑(WithLp.equiv p (α × β))
Result.autoException ::
Duper saturated

Testing || Nat.xor_eq_zero : ∀ {n m : ℕ}, n ^^^ m = 0 ↔ n = m
Result.success

Testing || SetTheory.PGame.lf_neg_iff : ∀ {x y : SetTheory.PGame}, y.LF (-x) ↔ x.LF (-y)
Result.autoException ::
Duper saturated

Testing || Prod.image_mk_segment_right : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E]
  [inst_2 : AddCommMonoid F] [inst_3 : Module 𝕜 E] [inst_4 : Module 𝕜 F] (x : E) (y₁ y₂ : F),
  (fun y => (x, y)) '' segment 𝕜 y₁ y₂ = segment 𝕜 (x, y₁) (x, y₂)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || _private.Mathlib.NumberTheory.JacobiSum.Basic.0.jacobiSum_eq_aux : ∀ {F : Type u_1} {R : Type u_2} [inst : CommRing F] [inst_1 : Nontrivial F] [inst_2 : Fintype F]
  [inst_3 : DecidableEq F] [inst_4 : CommRing R] (χ ψ : MulChar F R),
  jacobiSum χ ψ =
    ∑ x : F, χ x + ∑ x : F, ψ x - ↑(Fintype.card F) + ∑ x ∈ Finset.univ \ {0, 1}, (χ x - 1) * (ψ (1 - x) - 1)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || WriterT.goto_mkLabel : ∀ {m : Type u → Type v} [inst : Monad m] {α : Type u_1} {β ω : Type u} [inst_1 : EmptyCollection ω]
  (x : ContT.Label (α × ω) m β) (i : α), ContT.goto (WriterT.mkLabel x) i = monadLift (ContT.goto x (i, ∅))
Result.autoException ::
Duper saturated

Testing || Multiset.mem_attach : ∀ {α : Type u_1} (s : Multiset α) (x : { x // x ∈ s }), x ∈ s.attach
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Endofunctor.Coalgebra.equivOfNatIso_functor : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {F G : CategoryTheory.Functor C C} (α : F ≅ G),
  (CategoryTheory.Endofunctor.Coalgebra.equivOfNatIso α).functor =
    CategoryTheory.Endofunctor.Coalgebra.functorOfNatTrans α.hom
Result.autoException ::
Duper saturated

Testing || Right.neg_le_self : ∀ {α : Type u} [inst : AddGroup α] [inst_1 : Preorder α] [inst_2 : AddRightMono α] {a : α}, 0 ≤ a → -a ≤ a
Result.success

Testing || Relation.comp_eq : ∀ {α : Type u_1} {β : Type u_2} {r : α → β → Prop}, (Relation.Comp r fun x1 x2 => x1 = x2) = r
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Functor.RightExtension.postcomp₁_map_right : ∀ {C : Type u_1} {H : Type u_3} {D : Type u_4} {D' : Type u_5} [inst : CategoryTheory.Category.{u_6, u_1} C]
  [inst_1 : CategoryTheory.Category.{u_7, u_3} H] [inst_2 : CategoryTheory.Category.{u_8, u_4} D]
  [inst_3 : CategoryTheory.Category.{u_9, u_5} D'] {L : CategoryTheory.Functor C D} {L' : CategoryTheory.Functor C D'}
  (G : CategoryTheory.Functor D D') (f : L.comp G ⟶ L') (F : CategoryTheory.Functor C H)
  {X Y : CategoryTheory.Comma ((CategoryTheory.whiskeringLeft C D' H).obj L') (CategoryTheory.Functor.fromPUnit F)}
  (φ : X ⟶ Y),
  ((CategoryTheory.Functor.RightExtension.postcomp₁ G f F).map φ).right = CategoryTheory.CategoryStruct.id X.right
Result.autoException ::
Duper saturated

Testing || skewAdjoint.val_smul : ∀ {R : Type u_1} {A : Type u_2} [inst : Star R] [inst_1 : TrivialStar R] [inst_2 : AddCommGroup A]
  [inst_3 : StarAddMonoid A] [inst_4 : Monoid R] [inst_5 : DistribMulAction R A] [inst_6 : StarModule R A] (r : R)
  (x : ↥(skewAdjoint A)), ↑(r • x) = r • ↑x
Result.autoException ::
Duper saturated

Testing || Rat.round_cast : ∀ {α : Type u_1} [inst : LinearOrderedField α] [inst_1 : FloorRing α] (x : ℚ), round ↑x = round x
Result.success

Testing || Submodule.span_nat_eq_addSubmonoid_closure : ∀ {M : Type u_4} [inst : AddCommMonoid M] (s : Set M), (Submodule.span ℕ s).toAddSubmonoid = AddSubmonoid.closure s
Result.autoException ::
Duper saturated

Testing || Subgroup.quotientSubgroupOfEmbeddingOfLE_apply_mk : ∀ {α : Type u_1} [inst : Group α] {s t : Subgroup α} (H : Subgroup α) (h : s ≤ t) (g : ↥s),
  (Subgroup.quotientSubgroupOfEmbeddingOfLE H h) ↑g = ↑((Subgroup.inclusion h) g)
Result.autoException ::
Duper saturated

Testing || Rel.leftDual_mem_rightFixedPoint : ∀ {α : Type u_1} {β : Type u_2} (R : Rel α β) (J : Set α), R.leftDual J ∈ R.rightFixedPoints
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || List.length_permutationsAux : ∀ {α : Type u_1} (ts is : List α),
  (ts.permutationsAux is).length + is.length.factorial = (ts.length + is.length).factorial
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Real.sqrt_inj : ∀ {x y : ℝ}, 0 ≤ x → 0 ≤ y → (√x = √y ↔ x = y)
Result.success

Testing || Matrix.frobenius_norm_conjTranspose : ∀ {m : Type u_3} {n : Type u_4} {α : Type u_5} [inst : Fintype m] [inst_1 : Fintype n]
  [inst_2 : SeminormedAddCommGroup α] [inst_3 : StarAddMonoid α] [inst_4 : NormedStarGroup α] (A : Matrix m n α),
  ‖A.conjTranspose‖ = ‖A‖
Result.autoException ::
Duper saturated

Testing || CategoryTheory.ShortComplex.LeftHomologyData.ofHasKernelOfHasCokernel_i : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  (S : CategoryTheory.ShortComplex C) [inst_2 : CategoryTheory.Limits.HasKernel S.g]
  [inst_3 : CategoryTheory.Limits.HasCokernel (CategoryTheory.Limits.kernel.lift S.g S.f ⋯)],
  (CategoryTheory.ShortComplex.LeftHomologyData.ofHasKernelOfHasCokernel S).i = CategoryTheory.Limits.kernel.ι S.g
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.f`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.IsWF.min_mem : ∀ {α : Type u_2} [inst : Preorder α] {s : Set α} (hs : s.IsWF) (hn : s.Nonempty), hs.min hn ∈ s
Result.autoException ::
Duper saturated

Testing || RCLike.im_to_real : ∀ {x : ℝ}, RCLike.im x = 0
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Subobject.functor_obj : ∀ (C : Type u₁) [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Limits.HasPullbacks C] (X : Cᵒᵖ),
  (CategoryTheory.Subobject.functor C).obj X = CategoryTheory.Subobject (Opposite.unop X)
Result.autoException ::
Duper saturated

Testing || Finset.preimage_union : ∀ {α : Type u} {β : Type v} [inst : DecidableEq α] [inst_1 : DecidableEq β] {f : α → β} {s t : Finset β}
  (hst : Set.InjOn f (f ⁻¹' ↑(s ∪ t))), (s ∪ t).preimage f hst = s.preimage f ⋯ ∪ t.preimage f ⋯
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: Set.InjOn f (f ⁻¹' ↑(s ∪ t)) is not a `∀`

Testing || Set.image_subset_image2_right : ∀ {α : Type u_1} {β : Type u_3} {γ : Type u_5} {f : α → β → γ} {s : Set α} {t : Set β} {a : α},
  a ∈ s → f a '' t ⊆ Set.image2 f s t
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : (#1 → #1), (∀ x1 : #0, (∀ x2 : (#1 → Prop), ((∀ x3 : #1, ((!0 (!10 x0 x1) x3) → (x2 x3))) ↔ (∀ x3 : #1, ((!0 x1 x3) → (x2 (x0 x3)))))))) is not type correct

Testing || Polynomial.IsSplittingField.adjoin_rootSet : ∀ {K : Type v} (L : Type w) [inst : Field K] [inst_1 : Field L] [inst_2 : Algebra K L] (f : Polynomial K)
  [inst_3 : Polynomial.IsSplittingField K L f], Algebra.adjoin K (f.rootSet L) = ⊤
Result.success

Testing || upperClosure_add_distrib : ∀ {α : Type u_1} [inst : OrderedAddCommGroup α] (s t : Set α), upperClosure (s + t) = upperClosure s + upperClosure t
Result.success

Testing || AddLocalization.mk_eq_mk_iff : ∀ {M : Type u_1} [inst : AddCommMonoid M] {S : AddSubmonoid M} {a c : M} {b d : ↥S},
  AddLocalization.mk a b = AddLocalization.mk c d ↔ (AddLocalization.r S) (a, b) (c, d)
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Monoidal.toTransported_toLaxMonoidalFunctor_ε : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}
  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] (e : C ≌ D),
  (CategoryTheory.Monoidal.toTransported e).ε =
    (e.symm.toAdjunction.homEquiv (𝟙_ (CategoryTheory.Monoidal.Transported e)) (𝟙_ C))
      (CategoryTheory.inv (e.unitIso.hom.app (𝟙_ C)))
Result.autoException ::
Duper saturated

Testing || Polynomial.mem_nthRoots : ∀ {R : Type u} [inst : CommRing R] [inst_1 : IsDomain R] {n : ℕ},
  0 < n → ∀ {a x : R}, x ∈ Polynomial.nthRoots n a ↔ x ^ n = a
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || TrivSqZeroExt.liftEquivOfComm_symm_apply_coe : ∀ {R' : Type u} {M : Type v} [inst : CommSemiring R'] [inst_1 : AddCommMonoid M] [inst_2 : Module R' M]
  [inst_3 : Module R'ᵐᵒᵖ M] [inst_4 : IsCentralScalar R' M] {A : Type u_2} [inst_5 : Semiring A] [inst_6 : Algebra R' A]
  (a : TrivSqZeroExt R' M →ₐ[R'] A),
  ↑(TrivSqZeroExt.liftEquivOfComm.symm a) = a.toLinearMap ∘ₗ ↑R' (TrivSqZeroExt.inrHom R' M)
Result.autoException ::
Duper saturated

Testing || QuadraticMap.choose_exists_companion : ∀ {R : Type u_3} {M : Type u_4} {N : Type u_5} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : AddCommGroup N]
  [inst_3 : Module R M] [inst_4 : Module R N] (Q : QuadraticMap R M N), ⋯.choose = Q.polarBilin
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || NonUnitalSubring.list_sum_mem : ∀ {R : Type u} [inst : NonUnitalNonAssocRing R] (s : NonUnitalSubring R) {l : List R}, (∀ x ∈ l, x ∈ s) → l.sum ∈ s
Result.success

Testing || EReal.bot_lt_add_iff : ∀ {x y : EReal}, ⊥ < x + y ↔ ⊥ < x ∧ ⊥ < y
Result.success

Testing || Subring.op_le_iff : ∀ {R : Type u_2} [inst : Ring R] {S₁ : Subring R} {S₂ : Subring Rᵐᵒᵖ}, S₁.op ≤ S₂ ↔ S₁ ≤ S₂.unop
Result.autoException ::
Duper saturated

Testing || WeierstrassCurve.Jacobian.addY_of_X_eq : ∀ {F : Type v} [inst : Field F] {W : WeierstrassCurve.Jacobian F} {P Q : Fin 3 → F},
  W.Equation P →
    W.Equation Q →
      P 2 ≠ 0 → Q 2 ≠ 0 → P 0 * Q 2 ^ 2 = Q 0 * P 2 ^ 2 → W.addY P Q = WeierstrassCurve.Jacobian.addU P Q ^ 3
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Filter.map_add_atTop_eq_nat : ∀ (k : ℕ), Filter.map (fun a => a + k) Filter.atTop = Filter.atTop
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Triangulated.Octahedron.triangleMorphism₂_hom₁ : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  [inst_2 : CategoryTheory.Limits.HasZeroObject C] [inst_3 : CategoryTheory.HasShift C ℤ]
  [inst_4 : ∀ (n : ℤ), (CategoryTheory.shiftFunctor C n).Additive] [inst_5 : CategoryTheory.Pretriangulated C]
  {X₁ X₂ X₃ Z₁₂ Z₂₃ Z₁₃ : C} {u₁₂ : X₁ ⟶ X₂} {u₂₃ : X₂ ⟶ X₃} {u₁₃ : X₁ ⟶ X₃}
  {comm : CategoryTheory.CategoryStruct.comp u₁₂ u₂₃ = u₁₃} {v₁₂ : X₂ ⟶ Z₁₂}
  {w₁₂ : Z₁₂ ⟶ (CategoryTheory.shiftFunctor C 1).obj X₁}
  {h₁₂ : CategoryTheory.Pretriangulated.Triangle.mk u₁₂ v₁₂ w₁₂ ∈ CategoryTheory.Pretriangulated.distinguishedTriangles}
  {v₂₃ : X₃ ⟶ Z₂₃} {w₂₃ : Z₂₃ ⟶ (CategoryTheory.shiftFunctor C 1).obj X₂}
  {h₂₃ : CategoryTheory.Pretriangulated.Triangle.mk u₂₃ v₂₃ w₂₃ ∈ CategoryTheory.Pretriangulated.distinguishedTriangles}
  {v₁₃ : X₃ ⟶ Z₁₃} {w₁₃ : Z₁₃ ⟶ (CategoryTheory.shiftFunctor C 1).obj X₁}
  {h₁₃ : CategoryTheory.Pretriangulated.Triangle.mk u₁₃ v₁₃ w₁₃ ∈ CategoryTheory.Pretriangulated.distinguishedTriangles}
  (h : CategoryTheory.Triangulated.Octahedron comm h₁₂ h₂₃ h₁₃), h.triangleMorphism₂.hom₁ = u₁₂
Result.autoException ::
Duper saturated

Testing || Set.ordConnected_iInter : ∀ {α : Type u_1} [inst : Preorder α] {ι : Sort u_3} {s : ι → Set α},
  (∀ (i : ι), (s i).OrdConnected) → (⋂ i, s i).OrdConnected
Result.autoException ::
Duper saturated

Testing || Pell.Solution₁.coe_mk : ∀ {d : ℤ} (x y : ℤ) (prop : x ^ 2 - d * y ^ 2 = 1), ↑(Pell.Solution₁.mk x y prop) = { re := x, im := y }
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Iso.inv_eq_inv : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} (f g : X ≅ Y), f.inv = g.inv ↔ f.hom = g.hom
Result.autoException ::
Duper saturated

Testing || Ordnode.Raised.add_right : ∀ (k : ℕ) {n m : ℕ}, Ordnode.Raised n m → Ordnode.Raised (n + k) (m + k)
Result.success

Testing || Subgroup.pointwise_smul_def : ∀ {α : Type u_1} {G : Type u_2} [inst : Group G] [inst_1 : Monoid α] [inst_2 : MulDistribMulAction α G] {a : α}
  (S : Subgroup G), a • S = Subgroup.map ((MulDistribMulAction.toMonoidEnd α G) a) S
Result.autoException ::
Duper saturated

Testing || CategoryTheory.MorphismProperty.inverseImage_equivalence_inverse_eq_map_functor : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {D : Type u_1} [inst_1 : CategoryTheory.Category.{u_2, u_1} D]
  (P : CategoryTheory.MorphismProperty D) [inst_2 : P.RespectsIso] (E : C ≌ D),
  P.inverseImage E.functor = P.map E.inverse
Result.autoException ::
Duper saturated

Testing || Ordinal.le_add_right : ∀ (a b : Ordinal.{u_3}), a ≤ a + b
Result.autoException ::
Duper saturated

Testing || Monotone.isBoundedUnder_le_comp : ∀ {α : Type u_1} {β : Type u_2} {γ : Type u_3} [inst : Preorder α] [inst_1 : Preorder β] {l : Filter γ} {u : γ → α}
  {v : α → β},
  Monotone v → Filter.IsBoundedUnder (fun x1 x2 => x1 ≤ x2) l u → Filter.IsBoundedUnder (fun x1 x2 => x1 ≤ x2) l (v ∘ u)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AlgebraicGeometry.LocallyRingedSpace.toΓSpec_continuous : ∀ (X : AlgebraicGeometry.LocallyRingedSpace), Continuous X.toΓSpecFun
Result.autoException ::
Duper saturated

Testing || AlgebraicGeometry.Scheme.residue_descResidueField : ∀ {K : Type u} [inst : Field K] {X : AlgebraicGeometry.Scheme} {x : ↑↑X.toPresheafedSpace}
  (f : X.presheaf.stalk x ⟶ CommRingCat.of K) [inst_1 : IsLocalHom f],
  CategoryTheory.CategoryStruct.comp (X.residue x) (AlgebraicGeometry.Scheme.descResidueField f) = f
Result.autoException ::
Duper saturated

Testing || List.splitWrtCompositionAux_cons : ∀ {α : Type u_1} (l : List α) (n : ℕ) (ns : List ℕ),
  l.splitWrtCompositionAux (n :: ns) = List.take n l :: (List.drop n l).splitWrtCompositionAux ns
Result.autoException ::
Duper saturated

Testing || CategoryTheory.LaxMonoidalFunctor.comp_ε : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}
  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] [inst_3 : CategoryTheory.MonoidalCategory D] {E : Type u₃}
  [inst_4 : CategoryTheory.Category.{v₃, u₃} E] [inst_5 : CategoryTheory.MonoidalCategory E]
  (F : CategoryTheory.LaxMonoidalFunctor C D) (G : CategoryTheory.LaxMonoidalFunctor D E),
  (F ⊗⋙ G).ε = CategoryTheory.CategoryStruct.comp G.ε (G.map F.ε)
Result.autoException ::
Duper saturated

Testing || Mathlib.Vector.mapAccumr₂_comm : ∀ {α : Type u_1} {γ : Type u_3} {σ : Type u_5} {n : ℕ} {s : σ} (xs ys : Mathlib.Vector α n) (f : α → α → σ → σ × γ),
  (∀ (a₁ a₂ : α) (s : σ), f a₁ a₂ s = f a₂ a₁ s) →
    Mathlib.Vector.mapAccumr₂ f xs ys s = Mathlib.Vector.mapAccumr₂ f ys xs s
Result.autoException ::
Duper saturated

Testing || MultilinearMap.mkContinuousLinear_norm_le : ∀ {𝕜 : Type u} {ι : Type v} {E : ι → Type wE} {G : Type wG} {G' : Type wG'} [inst : NontriviallyNormedField 𝕜]
  [inst_1 : (i : ι) → SeminormedAddCommGroup (E i)] [inst_2 : (i : ι) → NormedSpace 𝕜 (E i)]
  [inst_3 : SeminormedAddCommGroup G] [inst_4 : NormedSpace 𝕜 G] [inst_5 : SeminormedAddCommGroup G']
  [inst_6 : NormedSpace 𝕜 G'] [inst_7 : Fintype ι] (f : G →ₗ[𝕜] MultilinearMap 𝕜 E G') {C : ℝ},
  0 ≤ C →
    ∀ (H : ∀ (x : G) (m : (i : ι) → E i), ‖(f x) m‖ ≤ C * ‖x‖ * ∏ i : ι, ‖m i‖),
      ‖MultilinearMap.mkContinuousLinear f C H‖ ≤ C
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝⁶ i`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || _private.Mathlib.RingTheory.Polynomial.Basic.0.MvPolynomial.prime_C_iff_of_fintype : ∀ {R : Type u} (σ : Type v) {r : R} [inst : CommRing R] [inst_1 : Fintype σ], Prime (MvPolynomial.C r) ↔ Prime r
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || finprod_mem_dvd : ∀ {α : Type u_1} {N : Type u_6} [inst : CommMonoid N] {f : α → N} (a : α),
  (Function.mulSupport f).Finite → f a ∣ finprod f
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsAddLeftRegular.all : ∀ {R : Type u_1} [inst : Add R] [inst_1 : IsLeftCancelAdd R] (g : R), IsAddLeftRegular g
Result.autoException ::
Duper saturated

Testing || CategoryTheory.NatIso.trans_app : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  {F G H : CategoryTheory.Functor C D} (α : F ≅ G) (β : G ≅ H) (X : C), (α ≪≫ β).app X = α.app X ≪≫ β.app X
Result.autoException ::
Duper saturated

Testing || WithTop.some_lt_none : ∀ {α : Type u_1} [inst : LT α] (a : α), some a < none
Result.autoException ::
Duper saturated

Testing || LinearIndependent.extend_subset : ∀ {K : Type u_3} {V : Type u} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : Module K V] {s t : Set V}
  (hs : LinearIndependent K fun (x : ↑s) => ↑x) (hst : s ⊆ t), hs.extend hst ⊆ t
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ b } of λ binder contains bound variables

Testing || Nat.two_pow_sub_one_mod_two : ∀ {n : ℕ}, (2 ^ n - 1) % 2 = 1 % 2 ^ n
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || smooth_pow : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {H : Type u_2} [inst_1 : TopologicalSpace H] {E : Type u_3}
  [inst_2 : NormedAddCommGroup E] [inst_3 : NormedSpace 𝕜 E] {I : ModelWithCorners 𝕜 E H} {G : Type u_4}
  [inst_4 : Monoid G] [inst_5 : TopologicalSpace G] [inst_6 : ChartedSpace H G] [inst_7 : SmoothMul I G] (n : ℕ),
  Smooth I I fun a => a ^ n
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || HomologicalComplex₂.D₁_D₁_assoc : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_5, u_1} C] [inst_1 : CategoryTheory.Preadditive C] {I₁ : Type u_2}
  {I₂ : Type u_3} {I₁₂ : Type u_4} {c₁ : ComplexShape I₁} {c₂ : ComplexShape I₂} (K : HomologicalComplex₂ C c₁ c₂)
  (c₁₂ : ComplexShape I₁₂) [inst_2 : TotalComplexShape c₁ c₂ c₁₂] [inst_3 : DecidableEq I₁₂] [inst_4 : K.HasTotal c₁₂]
  (i₁₂ i₁₂' i₁₂'' : I₁₂) {Z : C} (h : K.toGradedObject.mapObj (c₁.π c₂ c₁₂) i₁₂'' ⟶ Z),
  CategoryTheory.CategoryStruct.comp (K.D₁ c₁₂ i₁₂ i₁₂') (CategoryTheory.CategoryStruct.comp (K.D₁ c₁₂ i₁₂' i₁₂'') h) =
    CategoryTheory.CategoryStruct.comp 0 h
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.GradedObject (I₁ × I₂) C is not a `∀`

Testing || Subalgebra.zsmul_mem : ∀ {R : Type u} {A : Type v} [inst : CommRing R] [inst_1 : Ring A] [inst_2 : Algebra R A] (S : Subalgebra R A) {x : A},
  x ∈ S → ∀ (n : ℤ), n • x ∈ S
Result.success

Testing || TwoPointing.pi_snd : ∀ (α : Type u_1) {β : Type u_2} (q : TwoPointing β) [inst : Nonempty α],
  (TwoPointing.pi α q).toProd.2 = Function.const α q.toProd.2
Result.autoException ::
Duper saturated

Testing || CategoryTheory.ShortComplex.LeftHomologyMapData.commf'_assoc : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  {S₁ S₂ : CategoryTheory.ShortComplex C} {φ : S₁ ⟶ S₂} {h₁ : S₁.LeftHomologyData} {h₂ : S₂.LeftHomologyData}
  (self : CategoryTheory.ShortComplex.LeftHomologyMapData φ h₁ h₂) {Z : C} (h : h₂.K ⟶ Z),
  CategoryTheory.CategoryStruct.comp h₁.f' (CategoryTheory.CategoryStruct.comp self.φK h) =
    CategoryTheory.CategoryStruct.comp φ.τ₁ (CategoryTheory.CategoryStruct.comp h₂.f' h)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsCyclotomicExtension.Rat.discr_prime_pow_ne_two' : ∀ {p : ℕ+} {k : ℕ} {K : Type u} [inst : Field K] {ζ : K} [hp : Fact (Nat.Prime ↑p)] [inst_1 : CharZero K]
  [inst_2 : IsCyclotomicExtension {p ^ (k + 1)} ℚ K] (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1))),
  p ^ (k + 1) ≠ 2 →
    Algebra.discr ℚ ⇑(IsPrimitiveRoot.subOnePowerBasis ℚ hζ).basis =
      (-1) ^ ((↑p ^ (k + 1)).totient / 2) * ↑↑p ^ (↑p ^ k * ((↑p - 1) * (k + 1) - 1))
Result.autoException ::
Duper saturated

Testing || Set.wellFoundedOn_image : ∀ {α : Type u_2} {β : Type u_3} {r : α → α → Prop} {f : β → α} {s : Set β},
  (f '' s).WellFoundedOn r ↔ s.WellFoundedOn (r on f)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_1 } of λ binder contains bound variables

Testing || StarAlgebra.adjoin_le : ∀ {R : Type u_2} {A : Type u_3} [inst : CommSemiring R] [inst_1 : StarRing R] [inst_2 : Semiring A]
  [inst_3 : Algebra R A] [inst_4 : StarRing A] [inst_5 : StarModule R A] {S : StarSubalgebra R A} {s : Set A},
  s ⊆ ↑S → StarAlgebra.adjoin R s ≤ S
Result.autoException ::
Duper saturated

Testing || Submodule.prod_span : ∀ {R : Type u} [inst : CommSemiring R] {A : Type v} [inst_1 : CommSemiring A] [inst_2 : Algebra R A] {ι : Type u_1}
  (s : Finset ι) (M : ι → Set A), ∏ i ∈ s, Submodule.span R (M i) = Submodule.span R (∏ i ∈ s, M i)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Finset.instInsert`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || SetTheory.PGame.turnBound_ne_zero_of_left_move : ∀ {S : Type u} [inst : SetTheory.PGame.State S] {s t : S},
  t ∈ SetTheory.PGame.State.l s → SetTheory.PGame.State.turnBound s ≠ 0
Result.autoException ::
Duper saturated

Testing || CategoryTheory.rightDistributor_inv_comp_biproduct_π : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  [inst_2 : CategoryTheory.MonoidalCategory C] [inst_3 : CategoryTheory.MonoidalPreadditive C]
  [inst_4 : CategoryTheory.Limits.HasFiniteBiproducts C] {J : Type} [inst_5 : Fintype J] (f : J → C) (X : C) (j : J),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.rightDistributor f X).inv
      (CategoryTheory.MonoidalCategory.whiskerRight (CategoryTheory.Limits.biproduct.π f j) X) =
    CategoryTheory.Limits.biproduct.π (fun j => CategoryTheory.MonoidalCategory.tensorObj (f j) X) j
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_15.π j✝`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Fintype.prod_add : ∀ {ι : Type u_7} {α : Type u_9} [inst : Fintype ι] [inst_1 : CommSemiring α] [inst_2 : DecidableEq ι] (f g : ι → α),
  ∏ a : ι, (f a + g a) = ∑ t : Finset ι, (∏ a ∈ t, f a) * ∏ a ∈ tᶜ, g a
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.integrable_toReal_of_lintegral_ne_top : ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : α → ENNReal},
  AEMeasurable f μ → ∫⁻ (x : α), f x ∂μ ≠ ⊤ → MeasureTheory.Integrable (fun x => (f x).toReal) μ
Result.success

Testing || MeasureTheory.Measure.sum_apply_eq_zero' : ∀ {α : Type u_1} {ι : Type u_5} {m0 : MeasurableSpace α} {μ : ι → MeasureTheory.Measure α} {s : Set α},
  MeasurableSet s → ((MeasureTheory.Measure.sum μ) s = 0 ↔ ∀ (i : ι), (μ i) s = 0)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || GromovHausdorff.ghDist_le_of_approx_subsets : ∀ {X : Type u} [inst : MetricSpace X] [inst_1 : CompactSpace X] [inst_2 : Nonempty X] {Y : Type v}
  [inst_3 : MetricSpace Y] [inst_4 : CompactSpace Y] [inst_5 : Nonempty Y] {s : Set X} (Φ : ↑s → Y) {ε₁ ε₂ ε₃ : ℝ},
  (∀ (x : X), ∃ y ∈ s, dist x y ≤ ε₁) →
    (∀ (x : Y), ∃ y, dist x (Φ y) ≤ ε₃) →
      (∀ (x y : ↑s), |dist x y - dist (Φ x) (Φ y)| ≤ ε₂) → GromovHausdorff.ghDist X Y ≤ ε₁ + ε₂ / 2 + ε₃
Result.autoException ::
Duper saturated

Testing || Ideal.IsMaximal.coprime_of_ne : ∀ {α : Type u} [inst : Semiring α] {M M' : Ideal α}, M.IsMaximal → M'.IsMaximal → M ≠ M' → M ⊔ M' = ⊤
Result.success

Testing || List.nextOr_singleton : ∀ {α : Type u_1} [inst : DecidableEq α] (x y d : α), [y].nextOr x d = d
Result.autoException ::
Duper saturated

Testing || Valuation.map_div : ∀ {Γ₀ : Type u_4} [inst : LinearOrderedCommGroupWithZero Γ₀] {R : Type u_7} [inst_1 : DivisionRing R]
  (v : Valuation R Γ₀) (x y : R), v (x / y) = v x / v y
Result.success

Testing || Bool.and_not_self : ∀ (x : Bool), (x && !x) = false
Result.success

Testing || Measurable.add' : ∀ {M : Type u_2} {α : Type u_3} {β : Type u_4} [inst : MeasurableSpace M] [inst_1 : Add M] {m : MeasurableSpace α}
  {mβ : MeasurableSpace β} [inst_2 : MeasurableAdd₂ M] {f g : α → β → M} {h : α → β},
  Measurable ↿f → Measurable ↿g → Measurable h → Measurable fun a => (f a + g a) (h a)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `instHAdd`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Trivialization.mk_coordChangeL : ∀ {R : Type u_1} {B : Type u_2} {F : Type u_3} {E : B → Type u_4} [inst : Semiring R] [inst_1 : TopologicalSpace F]
  [inst_2 : TopologicalSpace B] [inst_3 : TopologicalSpace (Bundle.TotalSpace F E)] [inst_4 : AddCommMonoid F]
  [inst_5 : Module R F] [inst_6 : (x : B) → AddCommMonoid (E x)] [inst_7 : (x : B) → Module R (E x)]
  (e e' : Trivialization F Bundle.TotalSpace.proj) [inst_8 : Trivialization.IsLinear R e]
  [inst_9 : Trivialization.IsLinear R e'] {b : B},
  b ∈ e.baseSet ∩ e'.baseSet →
    ∀ (y : F), (b, (Trivialization.coordChangeL R e e' b) y) = ↑e' { proj := b, snd := e.symm b y }
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝³ x`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Subgroup.orderOf_mk : ∀ {G : Type u_1} [inst : Group G] {H : Subgroup G} (a : G) (ha : a ∈ H), orderOf ⟨a, ha⟩ = orderOf a
Result.autoException ::
Duper saturated

Testing || Nat.le_minFac : ∀ {m n : ℕ}, n = 1 ∨ m ≤ n.minFac ↔ ∀ (p : ℕ), Nat.Prime p → p ∣ n → m ≤ p
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || SimpleGraph.Colorable.of_embedding : ∀ {V : Type u} {G : SimpleGraph V} {V' : Type u_3} {G' : SimpleGraph V'},
  G ↪g G' → ∀ {n : ℕ}, G'.Colorable n → G.Colorable n
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Fin.fintype x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.addContent_eq_add_diffFinset₀_of_subset : ∀ {α : Type u_1} {C : Set (Set α)} {s : Set α} {I : Finset (Set α)} {m : MeasureTheory.AddContent C}
  (hC : MeasureTheory.IsSetSemiring C) (hs : s ∈ C) (hI : ↑I ⊆ C),
  (∀ t ∈ I, t ⊆ s) → (↑I).PairwiseDisjoint id → m s = ∑ i ∈ I, m i + ∑ i ∈ hC.diffFinset₀ hs hI, m i
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Finset.instUnion`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ProbabilityTheory.cond_empty : ∀ {Ω : Type u_1} {m : MeasurableSpace Ω} (μ : MeasureTheory.Measure Ω), ProbabilityTheory.cond μ ∅ = 0
Result.autoException ::
Duper saturated

Testing || biSup_inf_biSup : ∀ {α : Type u} [inst : Order.Frame α] {ι : Type u_1} {ι' : Type u_2} {f : ι → α} {g : ι' → α} {s : Set ι} {t : Set ι'},
  (⨆ i ∈ s, f i) ⊓ ⨆ j ∈ t, g j = ⨆ p ∈ s ×ˢ t, f p.1 ⊓ g p.2
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type i ∈ s of λ binder contains bound variables

Testing || ConvexCone.to_orderedSMul : ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : LinearOrderedField 𝕜] [inst_1 : OrderedAddCommGroup E] [inst_2 : Module 𝕜 E]
  (S : ConvexCone 𝕜 E), (∀ (x y : E), x ≤ y ↔ y - x ∈ S) → OrderedSMul 𝕜 E
Result.success

Testing || Finset.truncatedSup_empty : ∀ {α : Type u_1} [inst : SemilatticeSup α] [inst_1 : DecidableRel fun x1 x2 => x1 ≤ x2] [inst_2 : OrderTop α] (a : α),
  ∅.truncatedSup a = ⊤
Result.success

Testing || ModuleCat.HasColimit.coconePointSMul_apply : ∀ {R : Type w} [inst : Ring R] {J : Type u} [inst_1 : CategoryTheory.Category.{v, u} J]
  (F : CategoryTheory.Functor J (ModuleCat R))
  [inst_2 : CategoryTheory.Limits.HasColimit (F.comp (CategoryTheory.forget₂ (ModuleCat R) AddCommGrp))] (r : R),
  (ModuleCat.HasColimit.coconePointSMul F) r =
    CategoryTheory.Limits.colimMap { app := fun j => (F.obj j).smul r, naturality := ⋯ }
Result.autoException ::
Auto.Reif.resolveTy :: Unable to resolve ∀ (x x_1 : J) (x_2 : x ⟶ x_1),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.HasForget₂.forget₂.map (F.map x_2)) ((F.obj x_1).smul r) =
    CategoryTheory.CategoryStruct.comp ((F.obj x).smul r) (CategoryTheory.HasForget₂.forget₂.map (F.map x_2))

Testing || Polynomial.natDegree_pow' : ∀ {R : Type u} [inst : Semiring R] {p : Polynomial R} {n : ℕ},
  p.leadingCoeff ^ n ≠ 0 → (p ^ n).natDegree = n * p.natDegree
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Real.Angle.sin_coe : ∀ (x : ℝ), (↑x).sin = Real.sin x
Result.autoException ::
Duper saturated

Testing || FormalMultilinearSeries.changeOrigin_radius : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F]
  (p : FormalMultilinearSeries 𝕜 E F) {x : E}, p.radius - ↑‖x‖₊ ≤ (p.changeOrigin x).radius
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: FormalMultilinearSeries 𝕜 E F is not a `∀`

Testing || MeasureTheory.Measure.eqOn_open_of_ae_eq : ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] {m : MeasurableSpace X} [inst_1 : TopologicalSpace Y]
  [inst_2 : T2Space Y] {μ : MeasureTheory.Measure X} [inst_3 : μ.IsOpenPosMeasure] {U : Set X} {f g : X → Y},
  f =ᵐ[μ.restrict U] g → IsOpen U → ContinuousOn f U → ContinuousOn g U → Set.EqOn f g U
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, (∀ x1 : #4, (∀ x2 : (#2 → Prop), ((!12 (λx3 : #2, (x2 x3)) (!4 (!5 x0 x1))) → (!12 (λx3 : #2, ((!13 x1 x3) → (x2 x3))) (!4 x0)))))) is not type correct

Testing || CategoryTheory.MorphismProperty.LeftFraction.Localization.StrictUniversalPropertyFixedTarget.uniq : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_4, u_1} C] {W : CategoryTheory.MorphismProperty C}
  [inst_1 : W.HasLeftCalculusOfFractions] {E : Type u_3} [inst_2 : CategoryTheory.Category.{u_5, u_3} E]
  (F₁ F₂ : CategoryTheory.Functor (CategoryTheory.MorphismProperty.LeftFraction.Localization W) E),
  (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).comp F₁ =
      (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).comp F₂ →
    F₁ = F₂
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.MorphismProperty C is not a `∀`

Testing || UpperSemicontinuousWithinAt.limsup_le : ∀ {α : Type u_1} [inst : TopologicalSpace α] {x : α} {s : Set α} {γ : Type u_3} [inst_1 : CompleteLinearOrder γ]
  [inst_2 : DenselyOrdered γ] {f : α → γ}, UpperSemicontinuousWithinAt f s x → Filter.limsup f (nhdsWithin x s) ≤ f x
Result.autoException ::
Duper saturated

Testing || Real.arccos_inj : ∀ {x y : ℝ}, -1 ≤ x → x ≤ 1 → -1 ≤ y → y ≤ 1 → (Real.arccos x = Real.arccos y ↔ x = y)
Result.autoException ::
Duper saturated

Testing || MeasureTheory.SignedMeasure.toMeasureOfZeroLE_apply : ∀ {α : Type u_1} {m : MeasurableSpace α} (s : MeasureTheory.SignedMeasure α) {i j : Set α}
  (hi : MeasureTheory.VectorMeasure.restrict 0 i ≤ MeasureTheory.VectorMeasure.restrict s i) (hi₁ : MeasurableSet i),
  MeasurableSet j → (s.toMeasureOfZeroLE i hi₁ hi) j = ↑⟨↑s (i ∩ j), ⋯⟩
Result.autoException ::
Duper saturated

Testing || PiTensorProduct.mapL_coe : ∀ {ι : Type uι} [inst : Fintype ι] {𝕜 : Type u𝕜} [inst_1 : NontriviallyNormedField 𝕜] {E : ι → Type uE}
  [inst_2 : (i : ι) → SeminormedAddCommGroup (E i)] [inst_3 : (i : ι) → NormedSpace 𝕜 (E i)] {E' : ι → Type u_1}
  [inst_4 : (i : ι) → SeminormedAddCommGroup (E' i)] [inst_5 : (i : ι) → NormedSpace 𝕜 (E' i)]
  (f : (i : ι) → E i →L[𝕜] E' i), ↑(PiTensorProduct.mapL f) = PiTensorProduct.map fun i => ↑(f i)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CochainComplex.mk'_d_1_0 : ∀ {V : Type u} [inst : CategoryTheory.Category.{v, u} V] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms V] (X₀ X₁ : V)
  (d₀ : X₀ ⟶ X₁)
  (succ' : {X₀ X₁ : V} → (f : X₀ ⟶ X₁) → (X₂ : V) ×' (d : X₁ ⟶ X₂) ×' CategoryTheory.CategoryStruct.comp f d = 0),
  (CochainComplex.mk' X₀ X₁ d₀ fun {X₀ X₁} => succ').d 0 1 = d₀
Result.autoException ::
Duper saturated

Testing || Pi.hasProd : ∀ {α : Type u_1} {ι : Type u_5} {π : α → Type u_6} [inst : (x : α) → CommMonoid (π x)]
  [inst_1 : (x : α) → TopologicalSpace (π x)] {f : ι → (x : α) → π x} {g : (x : α) → π x},
  HasProd f g ↔ ∀ (x : α), HasProd (fun i => f i x) (g x)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝¹ x`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || BitVec.sub_eq_xor : ∀ {a b : BitVec 1}, a - b = a ^^^ b
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || singleton_mul_ball_one : ∀ {E : Type u_1} [inst : SeminormedCommGroup E] (δ : ℝ) (x : E), {x} * Metric.ball 1 δ = Metric.ball x δ
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Set.mul`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Metric.emetric_closedBall : ∀ {α : Type u} [inst : PseudoMetricSpace α] {x : α} {ε : ℝ},
  0 ≤ ε → EMetric.closedBall x (ENNReal.ofReal ε) = Metric.closedBall x ε
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Equiv.sumCompl_apply_symm_of_pos : ∀ {α : Type u_9} (p : α → Prop) [inst : DecidablePred p] (a : α) (h : p a), (Equiv.sumCompl p).symm a = Sum.inl ⟨a, h⟩
Result.autoException ::
Duper saturated

Testing || Pell.isPell_one : ∀ {a : ℕ} (a1 : 1 < a), Pell.IsPell { re := ↑a, im := 1 }
Result.autoException ::
Duper saturated

Testing || InnerProductSpace.toDual_apply : ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : RCLike 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]
  [inst_3 : CompleteSpace E] {x y : E}, ((InnerProductSpace.toDual 𝕜 E) x) y = inner x y
Result.autoException ::
Duper saturated

Testing || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.success

Testing || Algebra.adjoin_adjoin_coe_preimage : ∀ {R : Type uR} {A : Type uA} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A] {s : Set A},
  Algebra.adjoin R (Subtype.val ⁻¹' s) = ⊤
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Differentiable.const_smul : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {R : Type u_4} [inst_5 : Semiring R] [inst_6 : Module R F] [inst_7 : SMulCommClass 𝕜 R F]
  [inst_8 : ContinuousConstSMul R F], Differentiable 𝕜 f → ∀ (c : R), Differentiable 𝕜 fun y => c • f y
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Content.measure_eq_content_of_regular : ∀ {G : Type w} [inst : TopologicalSpace G] (μ : MeasureTheory.Content G) [inst_1 : MeasurableSpace G]
  [inst_2 : R1Space G] [inst_3 : BorelSpace G],
  μ.ContentRegular → ∀ (K : TopologicalSpace.Compacts G), μ.measure ↑K = (fun s => ↑(μ.toFun s)) K
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || HasFiniteFPowerSeriesOnBall.cPolynomialAt_of_mem : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NontriviallyNormedField 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {p : FormalMultilinearSeries 𝕜 E F} {r : ENNReal} {n : ℕ} {x y : E},
  HasFiniteFPowerSeriesOnBall f p x n r → y ∈ EMetric.ball x r → CPolynomialAt 𝕜 f y
Result.success

Testing || AlgebraicGeometry.Spec.homEquiv_symm_apply : ∀ {R S : CommRingCat} (f : R ⟶ S), AlgebraicGeometry.Spec.homEquiv.symm f = AlgebraicGeometry.Spec.map f
Result.autoException ::
Duper saturated

Testing || LinearMap.BilinForm.inf_orthogonal_self_le_ker_restrict : ∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]
  {B : LinearMap.BilinForm R M} {W : Submodule R M},
  B.IsRefl → W ⊓ B.orthogonal W ≤ Submodule.map W.subtype (LinearMap.ker (B.restrict W))
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x_1 of λ binder contains bound variables

Testing || _private.Batteries.Data.ByteArray.0.ByteArray.ofFn_eq_ofFnAux : @ByteArray.ofFn = @ByteArray.ofFnAux
Result.autoException ::
Duper saturated

Testing || Function.one_le_const_of_one_le : ∀ {α : Type u_2} (β : Type u_3) [inst : One α] [inst_1 : Preorder α] {a : α}, 1 ≤ a → 1 ≤ Function.const β a
Result.autoException ::
Duper saturated

Testing || List.toFinset.ext_iff : ∀ {α : Type u_1} [inst : DecidableEq α] {a b : List α}, a.toFinset = b.toFinset ↔ ∀ (x : α), x ∈ a ↔ x ∈ b
Result.success

Testing || Substring.Valid.get : ∀ {m₁ : List Char} {c : Char} {m₂ : List Char} {s : Substring},
  s.Valid → s.toString.data = m₁ ++ c :: m₂ → s.get { byteIdx := String.utf8Len m₁ } = c
Result.autoException ::
Duper saturated

Testing || isOfFinOrder_ofAdd_iff : ∀ {α : Type u_6} [inst : AddMonoid α] {x : α}, IsOfFinOrder (Multiplicative.ofAdd x) ↔ IsOfFinAddOrder x
Result.autoException ::
Duper saturated

Testing || ZFSet.mem_diff : ∀ {x y z : ZFSet}, z ∈ x \ y ↔ z ∈ x ∧ z ∉ y
Result.autoException ::
Duper saturated

Testing || MeasureTheory.indicatorConstLp_coeFn_nmem : ∀ {α : Type u_1} {E : Type u_2} {m0 : MeasurableSpace α} {p : ENNReal} {μ : MeasureTheory.Measure α}
  [inst : NormedAddCommGroup E] {s : Set α} {hs : MeasurableSet s} {hμs : μ s ≠ ⊤} {c : E},
  ∀ᵐ (x : α) ∂μ, x ∉ s → ↑↑(MeasureTheory.indicatorConstLp p hs hμs c) x = 0
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #0, (∀ x1 : #3, ((¬ (!6 x0 x1)) → (∀ x2 : (#3 → #5), ((!15 x0 x2 x1) = !13))))) is not type correct

Testing || MonoidWithZeroHomClass.ext_rat_iff : ∀ {M₀ : Type u_5} [inst : MonoidWithZero M₀] {f g : ℚ →*₀ M₀},
  f = g ↔ f.comp ↑(Int.castRingHom ℚ) = g.comp ↑(Int.castRingHom ℚ)
Result.success

Testing || Matrix.linfty_opNNNorm_row : ∀ {n : Type u_4} {α : Type u_5} {ι : Type u_7} [inst : Fintype n] [inst_1 : Unique ι]
  [inst_2 : SeminormedAddCommGroup α] (v : n → α), ‖Matrix.row ι v‖₊ = ∑ i : n, ‖v i‖₊
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Unique.instInhabited`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AlgebraicGeometry.StructureSheaf.const_one : ∀ (R : Type u) [inst : CommRing R] (U : TopologicalSpace.Opens ↑(AlgebraicGeometry.PrimeSpectrum.Top R)),
  AlgebraicGeometry.StructureSheaf.const R 1 1 U ⋯ = 1
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Filter.HasBasis.isVonNBounded_iff : ∀ {𝕜 : Type u_1} {E : Type u_3} {ι : Type u_5} [inst : SeminormedRing 𝕜] [inst_1 : SMul 𝕜 E] [inst_2 : Zero E]
  [inst_3 : TopologicalSpace E] {q : ι → Prop} {s : ι → Set E} {A : Set E},
  (nhds 0).HasBasis q s → (Bornology.IsVonNBounded 𝕜 A ↔ ∀ (i : ι), q i → Absorbs 𝕜 (s i) A)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.lintegral_iSup : ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f : ℕ → α → ENNReal},
  (∀ (n : ℕ), Measurable (f n)) → Monotone f → ∫⁻ (a : α), ⨆ n, f n a ∂μ = ⨆ n, ∫⁻ (a : α), f n a ∂μ
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type ∀ (x : α), ↑(φ x) ≤ x_0 x of λ binder contains bound variables

Testing || MvPowerSeries.map_C : ∀ {σ : Type u_1} {R : Type u_2} {S : Type u_3} [inst : Semiring R] [inst_1 : Semiring S] (f : R →+* S) (a : R),
  (MvPowerSeries.map σ f) ((MvPowerSeries.C σ R) a) = (MvPowerSeries.C σ S) (f a)
Result.autoException ::
Duper saturated

Testing || Pi.single_mul_right_apply : ∀ {ι : Type u_1} {α : ι → Type u_2} [inst : (i : ι) → MulZeroClass (α i)] [inst_1 : DecidableEq ι] (i j : ι)
  (f : (i : ι) → α i) (a : α i), Pi.single i (f i * a) j = f j * Pi.single i a j
Result.autoException ::
Duper saturated

Testing || Lean.Data.AC.Context.mergeIdem_nonEmpty : ∀ (e : List ℕ), e ≠ [] → Lean.Data.AC.mergeIdem e ≠ []
Result.autoException ::
Duper saturated

Testing || rotation_ne_conjLIE : ∀ (a : Circle), rotation a ≠ Complex.conjLIE
Result.autoException ::
Duper saturated

Testing || CategoryTheory.ChosenFiniteProducts.leftUnitor_inv_snd_assoc : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.ChosenFiniteProducts C] (X : C)
  {Z : C} (h : X ⟶ Z),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.leftUnitor X).inv
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.ChosenFiniteProducts.snd (𝟙_ C) X) h) =
    h
Result.autoException ::
Duper saturated

Testing || derivWithin_congr_set : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {F : Type v} [inst_1 : NormedAddCommGroup F]
  [inst_2 : NormedSpace 𝕜 F] {f : 𝕜 → F} {x : 𝕜} {s t : Set 𝕜}, s =ᶠ[nhds x] t → derivWithin f s x = derivWithin f t x
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (!0 (!1 !2) !3 !4) is not type correct

Testing || LieModule.genWeightSpace_neg_add_chainBot : ∀ {R : Type u_1} {L : Type u_2} [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L] {M : Type u_3}
  [inst_3 : AddCommGroup M] [inst_4 : Module R M] [inst_5 : LieRingModule L M] [inst_6 : LieModule R L M]
  [inst_7 : LieAlgebra.IsNilpotent R L] [inst_8 : NoZeroSMulDivisors ℤ R] [inst_9 : NoZeroSMulDivisors R M]
  [inst_10 : IsNoetherian R M] (α : L → R) (β : LieModule.Weight R L M),
  α ≠ 0 → LieModule.genWeightSpace M (-α + ⇑(LieModule.chainBot α β)) = ⊥
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ArithmeticFunction.pmul_zeta : ∀ {R : Type u_1} [inst : NonAssocSemiring R] (f : ArithmeticFunction R), f.pmul ↑ArithmeticFunction.zeta = f
Result.autoException ::
Duper saturated

Testing || HomologicalComplex₂.ιTotal_map_assoc : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_5, u_1} C] [inst_1 : CategoryTheory.Preadditive C] {I₁ : Type u_2}
  {I₂ : Type u_3} {I₁₂ : Type u_4} {c₁ : ComplexShape I₁} {c₂ : ComplexShape I₂} (K L : HomologicalComplex₂ C c₁ c₂)
  (φ : K ⟶ L) (c₁₂ : ComplexShape I₁₂) [inst_2 : TotalComplexShape c₁ c₂ c₁₂] [inst_3 : DecidableEq I₁₂]
  [inst_4 : K.HasTotal c₁₂] [inst_5 : L.HasTotal c₁₂] (i₁ : I₁) (i₂ : I₂) (i₁₂ : I₁₂) (h : c₁.π c₂ c₁₂ (i₁, i₂) = i₁₂)
  {Z : C} (h_1 : (L.total c₁₂).X i₁₂ ⟶ Z),
  CategoryTheory.CategoryStruct.comp (K.ιTotal c₁₂ i₁ i₂ i₁₂ h)
      (CategoryTheory.CategoryStruct.comp ((HomologicalComplex₂.total.map φ c₁₂).f i₁₂) h_1) =
    CategoryTheory.CategoryStruct.comp ((φ.f i₁).f i₂)
      (CategoryTheory.CategoryStruct.comp (L.ιTotal c₁₂ i₁ i₂ i₁₂ h) h_1)
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.GradedObject (I₁ × I₂) C is not a `∀`

Testing || WeierstrassCurve.Jacobian.addZ_of_Z_eq_zero_right : ∀ {R : Type u} [inst : CommRing R] {P Q : Fin 3 → R}, Q 2 = 0 → WeierstrassCurve.Jacobian.addZ P Q = -(Q 0 * P 2) * P 2
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || monotone_div_right_of_nonneg : ∀ {α : Type u_2} [inst : LinearOrderedSemifield α] {a : α}, 0 ≤ a → Monotone fun x => x / a
Result.autoException ::
(deterministic) timeout at `unify`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.Integrable.continuous_primitive : ∀ {E : Type u_1} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {μ : MeasureTheory.Measure ℝ} {f : ℝ → E}
  [inst_2 : MeasureTheory.NoAtoms μ],
  MeasureTheory.Integrable f μ → ∀ (a : ℝ), Continuous fun b => ∫ (x : ℝ) in a..b, f x ∂μ
Result.success

Testing || IsCyclotomicExtension.union_left : ∀ (S T : Set ℕ+) (A : Type u) (B : Type v) [inst : CommRing A] [inst_1 : CommRing B] [inst_2 : Algebra A B]
  [h : IsCyclotomicExtension T A B], S ⊆ T → IsCyclotomicExtension S A ↥(Algebra.adjoin A {b | ∃ a ∈ S, b ^ ↑a = 1})
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_14 x_0).toSemiring`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.image2_empty_left : ∀ {α : Type u_1} {β : Type u_3} {γ : Type u_5} {f : α → β → γ} {t : Set β}, Set.image2 f ∅ t = ∅
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || LieDerivation.toFun_eq_coe : ∀ {R : Type u_1} {L : Type u_2} {M : Type u_3} [inst : CommRing R] [inst_1 : LieRing L] [inst_2 : LieAlgebra R L]
  [inst_3 : AddCommGroup M] [inst_4 : Module R M] [inst_5 : LieRingModule L M] [inst_6 : LieModule R L M]
  (D : LieDerivation R L M), (↑D).toFun = ⇑D
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Subobject.ofLEMk_comp_ofMkLE_assoc : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {B A : C} (X : CategoryTheory.Subobject B) (f : A ⟶ B)
  [inst_1 : CategoryTheory.Mono f] (Y : CategoryTheory.Subobject B) (h₁ : X ≤ CategoryTheory.Subobject.mk f)
  (h₂ : CategoryTheory.Subobject.mk f ≤ Y) {Z : C} (h : CategoryTheory.Subobject.underlying.obj Y ⟶ Z),
  CategoryTheory.CategoryStruct.comp (X.ofLEMk f h₁)
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.Subobject.ofMkLE f Y h₂) h) =
    CategoryTheory.CategoryStruct.comp (X.ofLE Y ⋯) h
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_55 x_0).map
  (cifvar_11 x_1 x_2)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || UniformOnFun.toFun_zero : ∀ {α : Type u_1} {β : Type u_2} {𝔖 : Set (Set α)} [inst : Zero β], (UniformOnFun.toFun 𝔖) 0 = 0
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (¬ ((!0 !1 !2) = !2)) is not type correct

Testing || UpperHalfPlane.im_div_exp_dist_le : ∀ (z w : UpperHalfPlane), z.im / Real.exp (dist z w) ≤ w.im
Result.success

Testing || Polynomial.leadingCoeff_monic_mul : ∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R}, p.Monic → (p * q).leadingCoeff = q.leadingCoeff
Result.success

Testing || AddCommGroup.ModEq.add_iff_left : ∀ {α : Type u_1} [inst : AddCommGroup α] {p a₁ a₂ b₁ b₂ : α},
  a₁ ≡ b₁ [PMOD p] → (a₁ + a₂ ≡ b₁ + b₂ [PMOD p] ↔ a₂ ≡ b₂ [PMOD p])
Result.autoException ::
Duper saturated

Testing || Monoid.CoprodI.NeWord.of_word : ∀ {ι : Type u_1} {M : ι → Type u_2} [inst : (i : ι) → Monoid (M i)] (w : Monoid.CoprodI.Word M),
  w ≠ Monoid.CoprodI.Word.empty → ∃ i j w', w'.toWord = w
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type Monoid.CoprodI.NeWord M i
  j of λ binder contains bound variables

Testing || ContMDiffAt.of_le : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}
  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] {E' : Type u_5} [inst_6 : NormedAddCommGroup E']
  [inst_7 : NormedSpace 𝕜 E'] {H' : Type u_6} [inst_8 : TopologicalSpace H'] {I' : ModelWithCorners 𝕜 E' H'}
  {M' : Type u_7} [inst_9 : TopologicalSpace M'] [inst_10 : ChartedSpace H' M'] {f : M → M'} {x : M} {m n : ℕ∞},
  ContMDiffAt I I' n f x → m ≤ n → ContMDiffAt I I' m f x
Result.autoException ::
Duper saturated

Testing || Function.mulSupport_extend_one : ∀ {α : Type u_1} {M' : Type u_6} {N : Type u_7} [inst : One N] {f : α → M'} {g : α → N},
  Function.Injective f → Function.mulSupport (Function.extend f g 1) = f '' Function.mulSupport g
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsPGroup.card_orbit : ∀ {p : ℕ} {G : Type u_1} [inst : Group G],
  IsPGroup p G →
    ∀ [hp : Fact (Nat.Prime p)] {α : Type u_2} [inst_1 : MulAction G α] (a : α)
      [inst_2 : Finite ↑(MulAction.orbit G a)], ∃ n, Nat.card ↑(MulAction.orbit G a) = p ^ n
Result.autoException ::
Duper saturated

Testing || SchwartzMap.integrable_pow_mul_iteratedFDeriv : ∀ {D : Type u_3} {V : Type u_7} [inst : NormedAddCommGroup D] [inst_1 : NormedSpace ℝ D] [inst_2 : NormedAddCommGroup V]
  [inst_3 : NormedSpace ℝ V] [inst_4 : MeasurableSpace D] (μ : MeasureTheory.Measure D) [hμ : μ.HasTemperateGrowth]
  [inst_5 : BorelSpace D] [inst_6 : SecondCountableTopology D] (f : SchwartzMap D V) (k n : ℕ),
  MeasureTheory.Integrable (fun x => ‖x‖ ^ k * ‖iteratedFDeriv ℝ n (⇑f) x‖) μ
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AdicCompletion.eval_apply : ∀ {R : Type u_1} [inst : CommRing R] (I : Ideal R) (M : Type u_2) [inst_1 : AddCommGroup M] [inst_2 : Module R M]
  (n : ℕ) (f : AdicCompletion I M), (AdicCompletion.eval I M n) f = ↑f n
Result.autoException ::
Duper saturated

Testing || mulPosMono_iff_mulPosReflectLT : ∀ {α : Type u_3} [inst : Mul α] [inst_1 : Zero α] [inst_2 : LinearOrder α], MulPosMono α ↔ MulPosReflectLT α
Result.success

Testing || List.filterMap_reverse : ∀ {α : Type u_1} {β : Type u_2} (f : α → Option β) (l : List α),
  List.filterMap f l.reverse = (List.filterMap f l).reverse
Result.autoException ::
Duper saturated

Testing || Basis.orientation_unitsSMul : ∀ {R : Type u_1} [inst : StrictOrderedCommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]
  {ι : Type u_4} [inst_3 : Fintype ι] [inst_4 : DecidableEq ι] (e : Basis ι R M) (w : ι → Rˣ),
  (e.unitsSMul w).orientation = (∏ i : ι, w i)⁻¹ • e.orientation
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Basis.orientation.proof_2 x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Equiv.Set.sumCompl_apply_inl : ∀ {α : Type u} (s : Set α) [inst : DecidablePred fun x => x ∈ s] (x : ↑s), (Equiv.Set.sumCompl s) (Sum.inl x) = ↑x
Result.autoException ::
Duper saturated

Testing || sub_pow_char : ∀ {R : Type u_1} [inst : CommRing R] (x y : R) {p : ℕ} [hp : Fact (Nat.Prime p)] [inst_1 : CharP R p],
  (x - y) ^ p = x ^ p - y ^ p
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Limits.biprod.map_fst_assoc : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  {W X Y Z : C} [inst_2 : CategoryTheory.Limits.HasBinaryBiproduct W X]
  [inst_3 : CategoryTheory.Limits.HasBinaryBiproduct Y Z] (f : W ⟶ Y) (g : X ⟶ Z) {Z_1 : C} (h : Y ⟶ Z_1),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.biprod.map f g)
      (CategoryTheory.CategoryStruct.comp CategoryTheory.Limits.biprod.fst h) =
    CategoryTheory.CategoryStruct.comp CategoryTheory.Limits.biprod.fst (CategoryTheory.CategoryStruct.comp f h)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_55.app x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || LinearPMap.adjointAux_unique : ∀ {𝕜 : Type u_1} {E : Type u_2} {F : Type u_3} [inst : RCLike 𝕜] [inst_1 : NormedAddCommGroup E]
  [inst_2 : InnerProductSpace 𝕜 E] [inst_3 : NormedAddCommGroup F] [inst_4 : InnerProductSpace 𝕜 F] {T : E →ₗ.[𝕜] F}
  (hT : Dense ↑T.domain) [inst_5 : CompleteSpace E] (y : ↥T.adjointDomain) {x₀ : E},
  (∀ (x : ↥T.domain), inner x₀ ↑x = inner (↑y) (↑T x)) → (LinearPMap.adjointAux hT) y = x₀
Result.autoException ::
Duper saturated

Testing || Finset.restrict_def : ∀ {ι : Type u_2} {π : ι → Type u_3} (s : Finset ι), s.restrict = fun f x => f ↑x
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (¬ (!0 = (λx0 : #0, (λx1 : #2, (x0 (!1 x1)))))) is not type correct

Testing || RelEmbedding.isTrans : ∀ {α : Type u_1} {β : Type u_2} {r : α → α → Prop} {s : β → β → Prop}, r ↪r s → ∀ [inst : IsTrans β s], IsTrans α r
Result.autoException ::
Duper saturated

Testing || MvPolynomial.isWeightedHomogeneous_C : ∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] {σ : Type u_3} [inst_1 : AddCommMonoid M] (w : σ → M) (r : R),
  MvPolynomial.IsWeightedHomogeneous w (MvPolynomial.C r) 0
Result.autoException ::
Duper saturated

Testing || CFC.zero_nnrpow : ∀ {A : Type u_1} [inst : PartialOrder A] [inst_1 : NonUnitalNormedRing A] [inst_2 : StarRing A]
  [inst_3 : Module NNReal A] [inst_4 : SMulCommClass NNReal A A] [inst_5 : IsScalarTower NNReal A A]
  [inst_6 : NonUnitalContinuousFunctionalCalculus NNReal fun a => 0 ≤ a] {x : NNReal}, 0 ^ x = 0
Result.autoException ::
Duper saturated

Testing || Real.contDiff_rpow_const_of_le : ∀ {p : ℝ} {n : ℕ}, ↑n ≤ p → ContDiff ℝ ↑n fun x => x ^ p
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.isPreconnected_zigzag : ∀ {J : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} J] [inst_1 : CategoryTheory.IsPreconnected J] (j₁ j₂ : J),
  CategoryTheory.Zigzag j₁ j₂
Result.autoException ::
Duper saturated

Testing || MultilinearMap.continuous_of_bound : ∀ {𝕜 : Type u} {ι : Type v} {E : ι → Type wE} {G : Type wG} [inst : NontriviallyNormedField 𝕜]
  [inst_1 : (i : ι) → SeminormedAddCommGroup (E i)] [inst_2 : (i : ι) → NormedSpace 𝕜 (E i)]
  [inst_3 : SeminormedAddCommGroup G] [inst_4 : NormedSpace 𝕜 G] (f : MultilinearMap 𝕜 E G) [inst_5 : Fintype ι]
  (C : ℝ), (∀ (m : (i : ι) → E i), ‖f m‖ ≤ C * ∏ i : ι, ‖m i‖) → Continuous ⇑f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝⁴ i`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || MeasureTheory.snormEssSup_indicator_const_eq : ∀ {α : Type u_1} {G : Type u_4} {m0 : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : NormedAddCommGroup G]
  (s : Set α) (c : G), μ s ≠ 0 → MeasureTheory.eLpNormEssSup (s.indicator fun x => c) μ = ↑‖c‖₊
Result.success

Testing || CategoryTheory.isRightAdjoint_of_preservesLimits_of_isCoseparating : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {D : Type u'} [inst_1 : CategoryTheory.Category.{v, u'} D]
  [inst_2 : CategoryTheory.Limits.HasLimits D] [inst_3 : CategoryTheory.WellPowered D] {𝒢 : Set D}
  [inst_4 : Small.{v, u'} ↑𝒢],
  CategoryTheory.IsCoseparating 𝒢 →
    ∀ (G : CategoryTheory.Functor D C) [inst_5 : CategoryTheory.Limits.PreservesLimits G], G.IsRightAdjoint
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.instCategoryStructuredArrow
  x_0 x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Set.toFinset_mul : ∀ {α : Type u_2} [inst : DecidableEq α] [inst_1 : Mul α] (s t : Set α) [inst_2 : Fintype ↑s] [inst_3 : Fintype ↑t]
  [inst_4 : Fintype ↑(s * t)], (s * t).toFinset = s.toFinset * t.toFinset
Result.autoException ::
Duper saturated

Testing || FirstOrder.Language.directed_distinctConstantsTheory : ∀ {L : FirstOrder.Language} {α : Type u'}, Directed (fun x1 x2 => x1 ⊆ x2) L.distinctConstantsTheory
Result.autoException ::
Duper saturated

Testing || Finset.sum_eq_add : ∀ {α : Type u_3} {β : Type u_4} [inst : AddCommMonoid β] {s : Finset α} {f : α → β} (a b : α),
  a ≠ b → (∀ c ∈ s, c ≠ a ∧ c ≠ b → f c = 0) → (a ∉ s → f a = 0) → (b ∉ s → f b = 0) → ∑ x ∈ s, f x = f a + f b
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AddHom.prod_unique : ∀ {M : Type u_3} {N : Type u_4} {P : Type u_5} [inst : Add M] [inst_1 : Add N] [inst_2 : Add P] (f : AddHom M (N × P)),
  ((AddHom.fst N P).comp f).prod ((AddHom.snd N P).comp f) = f
Result.autoException ::
Duper saturated

Testing || List.Perm.insertP : ∀ {α : Type u_1} {l₁ l₂ : List α} (p : α → Bool) (a : α), l₁.Perm l₂ → (List.insertP p a l₁).Perm (List.insertP p a l₂)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || hasProd_one : ∀ {α : Type u_1} {β : Type u_2} [inst : CommMonoid α] [inst_1 : TopologicalSpace α], HasProd (fun x => 1) 1
Result.autoException ::
Duper saturated

Testing || DiffContOnCl.circleIntegral_sub_inv_smul : ∀ {E : Type u} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℂ E] [inst_2 : CompleteSpace E] {R : ℝ} {c w : ℂ}
  {f : ℂ → E},
  DiffContOnCl ℂ f (Metric.ball c R) →
    w ∈ Metric.ball c R → (∮ (z : ℂ) in C(c, R), (z - w)⁻¹ • f z) = (2 * ↑Real.pi * Complex.I) • f w
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ZFSet.rank_lt_of_mem : ∀ {x y : ZFSet}, y ∈ x → y.rank < x.rank
Result.autoException ::
Duper saturated

Testing || lcm_one_left : ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : NormalizedGCDMonoid α] (a : α), lcm 1 a = normalize a
Result.autoException ::
Duper saturated

Testing || hasDerivAt_zpow : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] (m : ℤ) (x : 𝕜),
  x ≠ 0 ∨ 0 ≤ m → HasDerivAt (fun x => x ^ m) (↑m * x ^ (m - 1)) x
Result.success

Testing || WellFounded.not_lt_min : ∀ {α : Type u_1} {r : α → α → Prop} (H : WellFounded r) (s : Set α) (h : s.Nonempty) {x : α}, x ∈ s → ¬r x (H.min s h)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.SimpleFunc.setToSimpleFunc_smul : ∀ {α : Type u_1} {F : Type u_3} {𝕜 : Type u_6} [inst : NormedAddCommGroup F] [inst_1 : NormedSpace ℝ F]
  {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {E : Type u_7} [inst_2 : NormedAddCommGroup E]
  [inst_3 : NormedField 𝕜] [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace ℝ E] [inst_6 : NormedSpace 𝕜 F]
  (T : Set α → E →L[ℝ] F),
  MeasureTheory.FinMeasAdditive μ T →
    (∀ (c : 𝕜) (s : Set α) (x : E), (T s) (c • x) = c • (T s) x) →
      ∀ (c : 𝕜) {f : MeasureTheory.SimpleFunc α E},
        MeasureTheory.Integrable (⇑f) μ →
          MeasureTheory.SimpleFunc.setToSimpleFunc T (c • f) = c • MeasureTheory.SimpleFunc.setToSimpleFunc T f
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Finmap.liftOn_toFinmap : ∀ {α : Type u} {β : α → Type v} {γ : Type u_1} (s : AList β) (f : AList β → γ)
  (H : ∀ (a b : AList β), a.entries.Perm b.entries → f a = f b), s.toFinmap.liftOn f H = f s
Result.autoException ::
Duper saturated

Testing || Matrix.reindexAlgEquiv_apply : ∀ {m : Type u_2} {n : Type u_3} (R : Type u_11) (A : Type u_12) [inst : CommSemiring R] [inst_1 : Fintype n]
  [inst_2 : Fintype m] [inst_3 : DecidableEq m] [inst_4 : DecidableEq n] [inst_5 : Semiring A] [inst_6 : Algebra R A]
  (e : m ≃ n) (M : Matrix m m A), (Matrix.reindexAlgEquiv R A e) M = (Matrix.reindex e e) M
Result.autoException ::
Duper saturated

Testing || Quaternion.coe_smul : ∀ {S : Type u_1} {R : Type u_3} [inst : CommRing R] [inst_1 : SMulZeroClass S R] (s : S) (r : R), ↑(s • r) = s • ↑r
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `↑(cifvar_3 x_2 x_3)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || liminf_min : ∀ {α : Type u_1} {β : Type u_2} [inst : ConditionallyCompleteLinearOrder β] {f : Filter α} {u v : α → β},
  autoParam (Filter.IsCoboundedUnder (fun x1 x2 => x1 ≥ x2) f u) _auto✝ →
    autoParam (Filter.IsCoboundedUnder (fun x1 x2 => x1 ≥ x2) f v) _auto✝¹ →
      autoParam (Filter.IsBoundedUnder (fun x1 x2 => x1 ≥ x2) f u) _auto✝² →
        autoParam (Filter.IsBoundedUnder (fun x1 x2 => x1 ≥ x2) f v) _auto✝³ →
          Filter.liminf (fun a => min (u a) (v a)) f = min (Filter.liminf u f) (Filter.liminf v f)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsFractionRing.isUnit_den_of_num_eq_zero : ∀ {A : Type u_4} [inst : CommRing A] [inst_1 : IsDomain A] [inst_2 : UniqueFactorizationMonoid A] {K : Type u_5}
  [inst_3 : Field K] [inst_4 : Algebra A K] [inst_5 : IsFractionRing A K] {x : K},
  IsFractionRing.num A x = 0 → IsUnit ↑(IsFractionRing.den A x)
Result.autoException ::
Duper saturated

Testing || AddValuation.IsEquiv.symm : ∀ {R : Type u_3} {Γ₀ : Type u_4} {Γ'₀ : Type u_5} [inst : LinearOrderedAddCommMonoidWithTop Γ₀]
  [inst_1 : LinearOrderedAddCommMonoidWithTop Γ'₀] [inst_2 : Ring R] {v₁ : AddValuation R Γ₀} {v₂ : AddValuation R Γ'₀},
  v₁.IsEquiv v₂ → v₂.IsEquiv v₁
Result.autoException ::
Duper saturated

Testing || _private.Mathlib.Tactic.Positivity.Basic.0.Mathlib.Meta.Positivity.ite_nonneg : ∀ {α : Type u_1} [inst : Zero α] (p : Prop) [inst_1 : Decidable p] {a b : α} [inst_2 : LE α],
  0 ≤ a → 0 ≤ b → 0 ≤ if p then a else b
Result.success

Testing || Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr : ∀ (n w : ℕ) (x x' : BitVec w), x = x' → x'.rotateLeft n = x.rotateLeft n
Result.success

Testing || SlashInvariantForm.slash_action_eqn'' : ∀ {F : Type u_2} [inst : FunLike F UpperHalfPlane ℂ] {k : ℤ} {Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) ℤ)}
  [inst_1 : SlashInvariantFormClass F Γ k] (f : F) {γ : Matrix.SpecialLinearGroup (Fin 2) ℤ},
  γ ∈ Γ → ∀ (z : UpperHalfPlane), f (γ • z) = UpperHalfPlane.denom (↑γ) z ^ k * f z
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: Matrix (Fin 2) (Fin 2) ℤ is not a `∀`

Testing || FractionalIdeal.spanSingleton_def : ∀ {R : Type u_5} [inst : CommRing R] (S : Submonoid R) {P : Type u_6} [inst_1 : CommRing P] [inst_2 : Algebra R P]
  [inst_3 : IsLocalization S P] (x : P), FractionalIdeal.spanSingleton S x = ⟨Submodule.span R {x}, ⋯⟩
Result.autoException ::
Duper saturated

Testing || Finset.map_snocEquiv_filter_piFinset : ∀ {n : ℕ} {α : Fin (n + 1) → Type u_1} (S : (i : Fin (n + 1)) → Finset (α i)) (P : ((i : Fin n) → α i.castSucc) → Prop)
  [inst : DecidablePred P],
  Finset.map (Fin.snocEquiv α).symm.toEmbedding (Finset.filter (fun r => P (Fin.init r)) (Fintype.piFinset S)) =
    S (Fin.last n) ×ˢ Finset.filter (fun r => P r) (Fintype.piFinset (Fin.init S))
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_34 x_1) x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Polynomial.root_left_of_root_gcd : ∀ {R : Type u} {k : Type y} [inst : Field R] [inst_1 : CommSemiring k] [inst_2 : DecidableEq R] {ϕ : R →+* k}
  {f g : Polynomial R} {α : k}, Polynomial.eval₂ ϕ α (EuclideanDomain.gcd f g) = 0 → Polynomial.eval₂ ϕ α f = 0
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Localization.induction_costructuredArrow : ∀ {C : Type u_1} {D : Type u_2} [inst : CategoryTheory.Category.{u_4, u_1} C]
  [inst_1 : CategoryTheory.Category.{u_5, u_2} D] (L : CategoryTheory.Functor C D)
  (W : CategoryTheory.MorphismProperty C) [inst_2 : L.IsLocalization W] {Y : C}
  (P : CategoryTheory.CostructuredArrow L (L.obj Y) → Prop),
  P (CategoryTheory.CostructuredArrow.mk (CategoryTheory.CategoryStruct.id (L.obj Y))) →
    (∀ ⦃X₁ X₂ : C⦄ (f : X₁ ⟶ X₂) (φ : L.obj X₂ ⟶ L.obj Y),
        P (CategoryTheory.CostructuredArrow.mk φ) →
          P (CategoryTheory.CostructuredArrow.mk (CategoryTheory.CategoryStruct.comp (L.map f) φ))) →
      (∀ ⦃X₁ X₂ : C⦄ (w : X₁ ⟶ X₂) (hw : W w) (φ : L.obj X₁ ⟶ L.obj Y),
          P (CategoryTheory.CostructuredArrow.mk φ) →
            P
              (CategoryTheory.CostructuredArrow.mk
                (CategoryTheory.CategoryStruct.comp (CategoryTheory.Localization.isoOfHom L W w hw).inv φ))) →
        ∀ (g : CategoryTheory.CostructuredArrow L (L.obj Y)), P g
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.MorphismProperty C is not a `∀`

Testing || BoxIntegral.Box.coe_ae_eq_Icc : ∀ {ι : Type u_1} (I : BoxIntegral.Box ι) [inst : Fintype ι], ↑I =ᵐ[MeasureTheory.volume] BoxIntegral.Box.Icc I
Result.autoException ::
Auto.Monomorphization.FVarRep.constInst2FVarId :: Cannot find canonicalized instance of ConstInst ⦗⦗ @MeasureTheory.NoAtoms (ℝ) (MeasureTheory.MeasureSpace.toMeasurableSpace) ⦘⦘

Testing || SuccOrder.ext_iff : ∀ {α : Type u_3} {inst : Preorder α} {x y : SuccOrder α}, x = y ↔ SuccOrder.succ = SuccOrder.succ
Result.autoException ::
Duper saturated

Testing || Directed.convex_iUnion : ∀ {𝕜 : Type u_1} {E : Type u_2} [inst : OrderedSemiring 𝕜] [inst_1 : AddCommMonoid E] [inst_2 : SMul 𝕜 E] {ι : Sort u_5}
  {s : ι → Set E}, Directed (fun x1 x2 => x1 ⊆ x2) s → (∀ ⦃i : ι⦄, Convex 𝕜 (s i)) → Convex 𝕜 (⋃ i, s i)
Result.autoException ::
(deterministic) timeout at `fluidSup`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Std.HashMap.getKey?_erase_self : ∀ {α : Type u} {β : Type v} {x : BEq α} {x_1 : Hashable α} {m : Std.HashMap α β} [inst : EquivBEq α]
  [inst : LawfulHashable α] {k : α}, (m.erase k).getKey? k = none
Result.autoException ::
Duper saturated

Testing || Filter.hasBasis_cobounded_norm' : ∀ {E : Type u_3} [inst : SeminormedGroup E], (Bornology.cobounded E).HasBasis (fun x => True) fun x => {x_1 | x ≤ ‖x_1‖}
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `SeminormedGroup.toPseudoMetricSpace`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.Square.flipFunctor_obj : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (sq : CategoryTheory.Square C),
  CategoryTheory.Square.flipFunctor.obj sq = sq.flip
Result.autoException ::
Duper saturated

Testing || ZMod.natCast_zmod_val : ∀ {n : ℕ} [inst : NeZero n] (a : ZMod n), ↑a.val = a
Result.autoException ::
Duper saturated

Testing || FirstOrder.Language.BoundedFormula.realize_iAlls : ∀ {L : FirstOrder.Language} {M : Type w} [inst : L.Structure M] {α : Type u'} {β : Type v'} {γ : Type u_3}
  [inst_1 : Finite γ] {f : α → β ⊕ γ} {φ : L.Formula α} {v : β → M} {v' : Fin 0 → M},
  FirstOrder.Language.BoundedFormula.Realize (FirstOrder.Language.Formula.iAlls f φ) v v' ↔
    ∀ (i : γ → M), φ.Realize fun a => Sum.elim v i (f a)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || skewAdjoint.isStarNormal_of_mem : ∀ {R : Type u_1} [inst : Ring R] [inst_1 : StarRing R] {x : R}, x ∈ skewAdjoint R → IsStarNormal x
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || WithLp.prod_edist_self : ∀ (p : ENNReal) {α : Type u_2} {β : Type u_3} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β]
  (f : WithLp p (α × β)), edist f f = 0
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Set.projIcc_of_right_le : ∀ {α : Type u_1} [inst : LinearOrder α] {a b : α} (h : a ≤ b) {x : α}, b ≤ x → Set.projIcc a b h x = ⟨b, ⋯⟩
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || addRothNumber.proof_1 : ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : AddMonoid α] ⦃t u : Finset α⦄,
  t ≤ u →
    Nat.findGreatest (fun m => ∃ t_1 ⊆ t, t_1.card = m ∧ ThreeAPFree ↑t_1) t.card ≤
      Nat.findGreatest (fun m => ∃ t ⊆ u, t.card = m ∧ ThreeAPFree ↑t) u.card
Result.autoException ::
Duper saturated

Testing || Cardinal.mk_sUnion_le : ∀ {α : Type u} (A : Set (Set α)), Cardinal.mk ↑(⋃₀ A) ≤ Cardinal.mk ↑A * ⨆ s, Cardinal.mk ↑↑s
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // x ∈ x_0 } of λ binder contains bound variables

Testing || CategoryTheory.StructuredArrow.ext_iff : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  {S : D} {T : CategoryTheory.Functor C D} {A B : CategoryTheory.StructuredArrow S T} (f g : A ⟶ B),
  f = g ↔ f.right = g.right
Result.success

Testing || Fin.succAbove_cycleRange : ∀ {n : ℕ} (i j : Fin n), i.succ.succAbove (i.cycleRange j) = (Equiv.swap 0 i.succ) j.succ
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Fin.succ`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CompleteLattice.independent_iff_supIndep : ∀ {α : Type u_1} {ι : Type u_3} [inst : CompleteLattice α] {s : Finset ι} {f : ι → α},
  CompleteLattice.Independent (f ∘ Subtype.val) ↔ s.SupIndep f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.erase i`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || bind₁_xInTermsOfW_wittPolynomial : ∀ (p : ℕ) (R : Type u_1) [inst : CommRing R] [inst_1 : Invertible ↑p] (k : ℕ),
  (MvPolynomial.bind₁ (xInTermsOfW p R)) (wittPolynomial p R k) = MvPolynomial.X k
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `MvPolynomial.commSemiring`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CliffordAlgebra.foldr_ι : ∀ {R : Type u_1} {M : Type u_2} {N : Type u_3} [inst : CommRing R] [inst_1 : AddCommGroup M] [inst_2 : AddCommGroup N]
  [inst_3 : Module R M] [inst_4 : Module R N] (Q : QuadraticForm R M) (f : M →ₗ[R] N →ₗ[R] N)
  (hf : ∀ (m : M) (x : N), (f m) ((f m) x) = Q m • x) (n : N) (m : M),
  ((CliffordAlgebra.foldr Q f hf) n) ((CliffordAlgebra.ι Q) m) = (f m) n
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Functor.epi_map_iff_epi : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  (F : CategoryTheory.Functor C D) {X Y : C} (f : X ⟶ Y) [hF₁ : F.PreservesEpimorphisms] [hF₂ : F.ReflectsEpimorphisms],
  CategoryTheory.Epi (F.map f) ↔ CategoryTheory.Epi f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_12 x_0).map x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.Functor.isEquivalence_of_isRightAdjoint : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  (G : CategoryTheory.Functor C D) [inst_2 : G.IsRightAdjoint]
  [inst_3 : ∀ (X : D), CategoryTheory.IsIso ((CategoryTheory.Adjunction.ofIsRightAdjoint G).unit.app X)]
  [inst_4 : ∀ (Y : C), CategoryTheory.IsIso ((CategoryTheory.Adjunction.ofIsRightAdjoint G).counit.app Y)],
  G.IsEquivalence
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_8 cifvar_9).app x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || coe_nat_mem : ∀ {S : Type u_1} {R : Type u_2} [inst : AddMonoidWithOne R] [inst_1 : SetLike S R] (s : S)
  [inst_2 : AddSubmonoidWithOneClass S R] (n : ℕ), ↑n ∈ s
Result.success

Testing || HasSum.nat_add_neg_add_one : ∀ {M : Type u_1} [inst : AddCommMonoid M] [inst_1 : TopologicalSpace M] {m : M} {f : ℤ → M},
  HasSum f m → HasSum (fun n => f ↑n + f (-(↑n + 1))) m
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || star_ofNat : ∀ {R : Type u} [inst : NonAssocSemiring R] [inst_1 : StarRing R] (n : ℕ) [inst_2 : n.AtLeastTwo],
  star (OfNat.ofNat n) = OfNat.ofNat n
Result.autoException ::
Duper saturated

Testing || LinearMap.injective_of_iterate_injective : ∀ {R : Type u_1} {M : Type u_5} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {f' : M →ₗ[R] M}
  {n : ℕ}, n ≠ 0 → Function.Injective ⇑(f' ^ n) → Function.Injective ⇑f'
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || eq_rec_heq : ∀ {α : Sort u} {φ : α → Sort v} {a a' : α} (h : a = a') (p : φ a), HEq (Eq.recOn h p) p
Result.autoException ::
Duper saturated

Testing || IsPRadical.injective_comp_of_perfect : ∀ {K : Type u_1} {L : Type u_2} (M : Type u_3) [inst : CommRing K] [inst_1 : CommRing L] [inst_2 : CommRing M]
  (i : K →+* L) (p : ℕ) [inst_3 : ExpChar M p] [inst_4 : IsPRadical i p] [inst_5 : PerfectRing M p],
  Function.Injective fun f => f.comp i
Result.success

Testing || BoxIntegral.BoxAdditiveMap.restrict_apply : ∀ {ι : Type u_1} {M : Type u_2} [inst : AddCommMonoid M] {I₀ : WithTop (BoxIntegral.Box ι)}
  (f : BoxIntegral.BoxAdditiveMap ι M I₀) (I : WithTop (BoxIntegral.Box ι)) (hI : I ≤ I₀) (a : BoxIntegral.Box ι),
  (f.restrict I hI) a = f a
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Limits.equalizer.hom_ext_iff : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : C} {f g : X ⟶ Y}
  [inst_1 : CategoryTheory.Limits.HasEqualizer f g] {W : C} {k l : W ⟶ CategoryTheory.Limits.equalizer f g},
  k = l ↔
    CategoryTheory.CategoryStruct.comp k (CategoryTheory.Limits.equalizer.ι f g) =
      CategoryTheory.CategoryStruct.comp l (CategoryTheory.Limits.equalizer.ι f g)
Result.success

Testing || prodEquivPiFinTwo_apply : ∀ (α β : Type u), ⇑(prodEquivPiFinTwo α β) = fun p => Fin.cons p.1 (Fin.cons p.2 finZeroElim)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Fin.cons (cifvar_18 p) exfvar_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ContinuousLinearEquiv.subsingleton_or_norm_symm_pos : ∀ {𝕜 : Type u_1} {𝕜₂ : Type u_2} {E : Type u_4} {F : Type u_5} [inst : NormedAddCommGroup E]
  [inst_1 : NormedAddCommGroup F] [inst_2 : NontriviallyNormedField 𝕜] [inst_3 : NontriviallyNormedField 𝕜₂]
  [inst_4 : NormedSpace 𝕜 E] [inst_5 : NormedSpace 𝕜₂ F] {σ₁₂ : 𝕜 →+* 𝕜₂} {σ₂₁ : 𝕜₂ →+* 𝕜}
  [inst_6 : RingHomInvPair σ₁₂ σ₂₁] [inst_7 : RingHomInvPair σ₂₁ σ₁₂] [inst_8 : RingHomIsometric σ₂₁]
  [inst_9 : RingHomIsometric σ₁₂] (e : E ≃SL[σ₁₂] F), Subsingleton E ∨ 0 < ‖↑e.symm‖
Result.autoException ::
Duper saturated

Testing || Real.LogDeriv_exp : logDeriv Real.exp = 1
Result.success

Testing || List.findIdx_of_getElem?_eq_some : ∀ {α : Type u_1} {p : α → Bool} {y : α} {xs : List α}, xs[List.findIdx p xs]? = some y → p y = true
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || OrderEmbedding.coe_birkhoffFinset : ∀ {α : Type u_1} [inst : DistribLattice α] [inst_1 : Fintype α] [inst_2 : DecidablePred SupIrred] (a : α),
  ↑(OrderEmbedding.birkhoffFinset a) = OrderEmbedding.birkhoffSet a
Result.autoException ::
Duper saturated

Testing || continuousAt_update_of_ne : ∀ {X : Type u_1} {Y : Type u_2} [inst : TopologicalSpace X] [inst_1 : T1Space X] [inst_2 : DecidableEq X]
  [inst_3 : TopologicalSpace Y] {f : X → Y} {x x' : X} {y : Y},
  x' ≠ x → (ContinuousAt (Function.update f x y) x' ↔ ContinuousAt f x')
Result.success

Testing || PrimeMultiset.coePNat_prime : ∀ (v : PrimeMultiset), ∀ p ∈ v.toPNatMultiset, p.Prime
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || List.replicate_add : ∀ {α : Type u} (m n : ℕ) (a : α), List.replicate (m + n) a = List.replicate m a ++ List.replicate n a
Result.success

Testing || spectrum.singleton_sub_eq : ∀ {R : Type u} {A : Type v} [inst : CommRing R] [inst_1 : Ring A] [inst_2 : Algebra R A] (a : A) (r : R),
  {r} - spectrum R a = spectrum R ((algebraMap R A) r - a)
Result.autoException ::
Duper saturated

Testing || Pell.Solution₁.exists_nontrivial_of_not_isSquare : ∀ {d : ℤ}, 0 < d → ¬IsSquare d → ∃ a, a ≠ 1 ∧ a ≠ -1
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Asymptotics.IsBigO.eq_zero_of_norm_pow_within : ∀ {E'' : Type u_9} {F'' : Type u_10} [inst : NormedAddCommGroup E''] [inst_1 : NormedAddCommGroup F''] {f : E'' → F''}
  {s : Set E''} {x₀ : E''} {n : ℕ}, (f =O[nhdsWithin x₀ s] fun x => ‖x - x₀‖ ^ n) → x₀ ∈ s → n ≠ 0 → f x₀ = 0
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Pi.card_Ico : ∀ {ι : Type u_1} {α : ι → Type u_2} [inst : Fintype ι] [inst_1 : DecidableEq ι] [inst_2 : (i : ι) → DecidableEq (α i)]
  [inst_3 : (i : ι) → PartialOrder (α i)] [inst_4 : (i : ι) → LocallyFiniteOrder (α i)] (a b : (i : ι) → α i),
  (Finset.Ico a b).card = ∏ i : ι, (Finset.Icc (a i) (b i)).card - 1
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `inst✝¹ i`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ENNReal.ofNat_le_ofReal : ∀ {n : ℕ} [inst : n.AtLeastTwo] {p : ℝ}, OfNat.ofNat n ≤ ENNReal.ofReal p ↔ OfNat.ofNat n ≤ p
Result.autoException ::
Duper saturated

Testing || ShelfHom.comp_apply : ∀ {S₁ : Type u_1} {S₂ : Type u_2} {S₃ : Type u_3} [inst : Shelf S₁] [inst_1 : Shelf S₂] [inst_2 : Shelf S₃]
  (g : ShelfHom S₂ S₃) (f : ShelfHom S₁ S₂) (x : S₁), (g.comp f) x = g (f x)
Result.autoException ::
Duper saturated

Testing || ContinuousAt.snd'' : ∀ {X : Type u} {Y : Type v} {Z : Type u_1} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]
  [inst_2 : TopologicalSpace Z] {f : Y → Z} {x : X × Y}, ContinuousAt f x.2 → ContinuousAt (fun x => f x.2) x
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ADEInequality.admissible_D' : ∀ (n : ℕ+), ADEInequality.Admissible (ADEInequality.D' n)
Result.autoException ::
Duper saturated

Testing || Order.Icc_succ_left : ∀ {α : Type u_1} [inst : Preorder α] [inst_1 : SuccOrder α] [inst_2 : NoMaxOrder α] (a b : α),
  Set.Icc (Order.succ a) b = Set.Ioc a b
Result.success

Testing || _private.Mathlib.Computability.Reduce.0.ManyOneDegree.le_trans : ∀ {d₁ d₂ d₃ : ManyOneDegree}, d₁ ≤ d₂ → d₂ ≤ d₃ → d₁ ≤ d₃
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : (#0 → Prop), (∀ x1 : #0, ((∀ x2 : #1, (x0 (!4 x2))) → (x0 x1)))) is not type correct

Testing || Real.differentiableAt_cosh : ∀ {x : ℝ}, DifferentiableAt ℝ Real.cosh x
Result.autoException ::
Duper saturated

Testing || Subalgebra.equivOfEq_apply : ∀ {R : Type u} {A : Type v} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A] (S T : Subalgebra R A)
  (h : S = T) (x : ↥S), (S.equivOfEq T h) x = ⟨↑x, ⋯⟩
Result.autoException ::
Duper saturated

Testing || Ultrafilter.map_id : ∀ {α : Type u} (f : Ultrafilter α), Ultrafilter.map id f = f
Result.autoException ::
Duper saturated

Testing || Convex.helly_theorem_set' : ∀ {𝕜 : Type u_2} {E : Type u_3} [inst : LinearOrderedField 𝕜] [inst_1 : AddCommGroup E] [inst_2 : Module 𝕜 E]
  [inst_3 : FiniteDimensional 𝕜 E] {F : Finset (Set E)},
  (∀ X ∈ F, Convex 𝕜 X) → (∀ G ⊆ F, G.card ≤ Module.finrank 𝕜 E + 1 → (⋂₀ ↑G).Nonempty) → (⋂₀ ↑F).Nonempty
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type i ∈ x_1 of λ binder contains bound variables

Testing || MeasureTheory.eventually_nhds_one_measure_smul_diff_lt : ∀ {G : Type u_1} [inst : MeasurableSpace G] [inst_1 : TopologicalSpace G] [inst_2 : BorelSpace G]
  {μ : MeasureTheory.Measure G} [inst_3 : Group G] [inst_4 : TopologicalGroup G] [inst_5 : LocallyCompactSpace G]
  [inst_6 : MeasureTheory.IsFiniteMeasureOnCompacts μ] [inst_7 : μ.InnerRegularCompactLTTop] {k : Set G},
  IsCompact k → IsClosed k → ∀ {ε : ENNReal}, ε ≠ 0 → ∀ᶠ (g : G) in nhds 1, μ (g • k \ k) < ε
Result.autoException ::
Duper saturated

Testing || ZeroHom.ext : ∀ {M : Type u_4} {N : Type u_5} [inst : Zero M] [inst_1 : Zero N] ⦃f g : ZeroHom M N⦄, (∀ (x : M), f x = g x) → f = g
Result.success

Testing || Matrix.card_GL_field : ∀ {𝔽 : Type u_1} [inst : Field 𝔽] [inst_1 : Fintype 𝔽] (n : ℕ),
  Nat.card (GL (Fin n) 𝔽) = ∏ i : Fin n, (Fintype.card 𝔽 ^ n - Fintype.card 𝔽 ^ ↑i)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Fin.fintype x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CoalgEquiv.ext_iff : ∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommSemiring R] [inst_1 : AddCommMonoid A]
  [inst_2 : AddCommMonoid B] [inst_3 : Module R A] [inst_4 : Module R B] [inst_5 : CoalgebraStruct R A]
  [inst_6 : CoalgebraStruct R B] {e e' : A ≃ₗc[R] B}, e = e' ↔ ∀ (x : A), e x = e' x
Result.success

Testing || preimage_coe_mem_nhds_subtype : ∀ {α : Type u_1} [inst : TopologicalSpace α] {s t : Set α} {a : ↑s}, Subtype.val ⁻¹' t ∈ nhds a ↔ t ∈ nhdsWithin (↑a) s
Result.success

Testing || Polynomial.X_pow_mul : ∀ {R : Type u} [inst : Semiring R] {p : Polynomial R} {n : ℕ}, Polynomial.X ^ n * p = p * Polynomial.X ^ n
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ContinuousLinearMap.uniformContinuous_restrictScalars : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : AddCommGroup E]
  [inst_2 : TopologicalSpace E] [inst_3 : Module 𝕜 E] [inst_4 : ContinuousSMul 𝕜 E] {F : Type u_3}
  [inst_5 : AddCommGroup F] [inst_6 : UniformSpace F] [inst_7 : UniformAddGroup F] [inst_8 : Module 𝕜 F] (𝕜' : Type u_4)
  [inst_9 : NontriviallyNormedField 𝕜'] [inst_10 : NormedAlgebra 𝕜' 𝕜] [inst_11 : Module 𝕜' E]
  [inst_12 : IsScalarTower 𝕜' 𝕜 E] [inst_13 : Module 𝕜' F] [inst_14 : IsScalarTower 𝕜' 𝕜 F],
  UniformContinuous (ContinuousLinearMap.restrictScalars 𝕜')
Result.autoException ::
Duper saturated

Testing || SmoothBumpFunction.smooth : ∀ {E : Type uE} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E] {H : Type uH} [inst_2 : TopologicalSpace H]
  {I : ModelWithCorners ℝ E H} {M : Type uM} [inst_3 : TopologicalSpace M] [inst_4 : ChartedSpace H M] {c : M}
  (f : SmoothBumpFunction I c) [inst_5 : FiniteDimensional ℝ E] [inst_6 : T2Space M]
  [inst_7 : SmoothManifoldWithCorners I M], Smooth I (modelWithCornersSelf ℝ ℝ) ↑f
Result.autoException ::
Duper saturated

Testing || List.bex_cons : ∀ {α : Type u_1} {p : α → Prop} {a : α} {l : List α}, (∃ x, ∃ (_ : x ∈ a :: l), p x) ↔ p a ∨ ∃ x, ∃ (_ : x ∈ l), p x
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type x✝ ∈ a :: l of λ binder contains bound variables

Testing || CategoryTheory.MonoidalCategory.tensorHom_def_assoc : ∀ {C : Type u} {𝒞 : CategoryTheory.Category.{v, u} C} [self : CategoryTheory.MonoidalCategory C] {X₁ Y₁ X₂ Y₂ : C}
  (f : X₁ ⟶ Y₁) (g : X₂ ⟶ Y₂) {Z : C} (h : CategoryTheory.MonoidalCategory.tensorObj Y₁ Y₂ ⟶ Z),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.tensorHom f g) h =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.whiskerRight f X₂)
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.MonoidalCategory.whiskerLeft Y₁ g) h)
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Cardinal.mk_additive : ∀ {α : Type u}, Cardinal.mk (Additive α) = Cardinal.mk α
Result.autoException ::
Duper saturated

Testing || Int.le_natCast_sub : ∀ (m n : ℕ), ↑m - ↑n ≤ ↑(m - n)
Result.success

Testing || induced_generateFrom_eq : ∀ {α : Type u_1} {β : Type u_2} {b : Set (Set β)} {f : α → β},
  TopologicalSpace.induced f (TopologicalSpace.generateFrom b) = TopologicalSpace.generateFrom (Set.preimage f '' b)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `TopologicalSpace.generateFrom x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Finset.card_union_add_card_inter : ∀ {α : Type u_1} [inst : DecidableEq α] (s t : Finset α), (s ∪ t).card + (s ∩ t).card = s.card + t.card
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Diffeomorph.symm_refl : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {H : Type u_5} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_9}
  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] {n : ℕ∞},
  (Diffeomorph.refl I M n).symm = Diffeomorph.refl I M n
Result.autoException ::
Duper saturated

Testing || PFunctor.map_map : ∀ (P : PFunctor.{u}) {α : Type v₁} {β : Type v₂} {γ : Type v₃} (f : α → β) (g : β → γ) (x : ↑P α),
  P.map g (P.map f x) = P.map (g ∘ f) x
Result.autoException ::
Duper saturated

Testing || Submodule.disjoint_span_singleton : ∀ {K : Type u_9} {E : Type u_10} [inst : DivisionRing K] [inst_1 : AddCommGroup E] [inst_2 : Module K E]
  {s : Submodule K E} {x : E}, Disjoint s (Submodule.span K {x}) ↔ x ∈ s → x = 0
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `SMulWithZero.toSMulZeroClass`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Submonoid.LocalizationMap.isUnit_comp : ∀ {M : Type u_1} [inst : CommMonoid M] {S : Submonoid M} {N : Type u_2} [inst_1 : CommMonoid N] {P : Type u_3}
  [inst_2 : CommMonoid P] (f : S.LocalizationMap N) (j : N →* P) (y : ↥S), IsUnit ((j.comp f.toMap) ↑y)
Result.autoException ::
Duper saturated

Testing || AddHom.codRestrict_apply_coe : ∀ {M : Type u_1} {N : Type u_2} {σ : Type u_4} [inst : Add M] [inst_1 : Add N] [inst_2 : SetLike σ N]
  [inst_3 : AddMemClass σ N] (f : AddHom M N) (S : σ) (h : ∀ (x : M), f x ∈ S) (n : M), ↑((f.codRestrict S h) n) = f n
Result.autoException ::
Duper saturated

Testing || contDiffWithinAt_zero : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}
  {f : E → F} {x : E}, x ∈ s → (ContDiffWithinAt 𝕜 0 f s x ↔ ∃ u ∈ nhdsWithin x s, ContinuousOn f (s ∩ u))
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || List.prod_toFinset : ∀ {α : Type u_3} {M : Type u_6} [inst : DecidableEq α] [inst_1 : CommMonoid M] (f : α → M) {l : List α},
  l.Nodup → l.toFinset.prod f = (List.map f l).prod
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsLeast.csInf_eq : ∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsLeast s a → sInf s = a
Result.success

Testing || Finset.nonMemberSubfamily_image_insert : ∀ {α : Type u_1} [inst : DecidableEq α] {𝒜 : Finset (Finset α)} {a : α},
  Finset.nonMemberSubfamily a (Finset.image (insert a) 𝒜) = ∅
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || HomologicalComplex.opInverse_obj : ∀ {ι : Type u_1} (V : Type u_2) [inst : CategoryTheory.Category.{u_3, u_2} V] (c : ComplexShape ι)
  [inst_1 : CategoryTheory.Limits.HasZeroMorphisms V] (X : HomologicalComplex Vᵒᵖ c.symm),
  (HomologicalComplex.opInverse V c).obj X = Opposite.op X.unopSymm
Result.autoException ::
Duper saturated

Testing || IsGLB.dual : ∀ {α : Type u} [inst : Preorder α] {s : Set α} {a : α}, IsGLB s a → IsLUB (⇑OrderDual.ofDual ⁻¹' s) (OrderDual.toDual a)
Result.autoException ::
Duper saturated

Testing || LinearMap.BilinForm.isRefl_neg : ∀ {R₁ : Type u_3} {M₁ : Type u_4} [inst : CommRing R₁] [inst_1 : AddCommGroup M₁] [inst_2 : Module R₁ M₁]
  {B : LinearMap.BilinForm R₁ M₁}, (-B).IsRefl ↔ B.IsRefl
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || FirstOrder.Language.IsFraisseLimit.isExtensionPair : ∀ {L : FirstOrder.Language} {K : Set (CategoryTheory.Bundled L.Structure)} {M : Type w} [inst : L.Structure M]
  {N : Type w} [inst_1 : L.Structure N] [inst_2 : Countable ((l : ℕ) × L.Functions l)] [inst_3 : Countable M]
  [inst_4 : Countable N],
  FirstOrder.Language.IsFraisseLimit K M → FirstOrder.Language.IsFraisseLimit K N → L.IsExtensionPair M N
Result.autoException ::
Duper saturated

Testing || Finset.mem_upShadow_iterate_iff_exists_sdiff : ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Fintype α] {𝒜 : Finset (Finset α)} {t : Finset α} {k : ℕ},
  t ∈ Finset.upShadow^[k] 𝒜 ↔ ∃ s ∈ 𝒜, s ⊆ t ∧ (t \ s).card = k
Result.success

Testing || isClosedEmbedding_inl : ∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y], IsClosedEmbedding Sum.inl
Result.autoException ::
Duper saturated

Testing || nhdsSet_exterior : ∀ {X : Type u_2} [inst : TopologicalSpace X] (s : Set X), nhdsSet (exterior s) = nhdsSet s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Int.units_pow_eq_pow_mod_two : ∀ (u : ℤˣ) (n : ℕ), u ^ n = u ^ (n % 2)
Result.success

Testing || MeasurableEquiv.symm_comp_self : ∀ {α : Type u_1} {β : Type u_2} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] (e : α ≃ᵐ β), ⇑e.symm ∘ ⇑e = id
Result.autoException ::
Duper saturated

Testing || Finset.mem_disjSum : ∀ {α : Type u_1} {β : Type u_2} {s : Finset α} {t : Finset β} {x : α ⊕ β},
  x ∈ s.disjSum t ↔ (∃ a ∈ s, Sum.inl a = x) ∨ ∃ b ∈ t, Sum.inr b = x
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Mathlib.Meta.NormNum.jacobiSymNat.even_odd₅ : ∀ (a b c : ℕ) (r : ℤ),
  a % 2 = 0 →
    b % 8 = 5 → a / 2 = c → Mathlib.Meta.NormNum.jacobiSymNat c b = r → Mathlib.Meta.NormNum.jacobiSymNat a b = -r
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Adapted.neg : ∀ {Ω : Type u_1} {β : Type u_2} {ι : Type u_3} {m : MeasurableSpace Ω} [inst : TopologicalSpace β] [inst_1 : Preorder ι]
  {u : ι → Ω → β} {f : MeasureTheory.Filtration ι m} [inst_2 : AddGroup β] [inst_3 : TopologicalAddGroup β],
  MeasureTheory.Adapted f u → MeasureTheory.Adapted f (-u)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `MeasureTheory.StronglyMeasurable
  (cifvar_5 x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Left.mul_lt_of_le_of_lt_one_of_pos : ∀ {α : Type u_3} {a b : α} [inst : MulOneClass α] [inst_1 : Zero α] [inst_2 : Preorder α] [inst_3 : PosMulStrictMono α],
  a ≤ 1 → b < 1 → 0 < a → a * b < 1
Result.success

Testing || CategoryTheory.Comma.mapRightIso_inverse_map_left : ∀ {A : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} A] {B : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} B]
  {T : Type u₃} [inst_2 : CategoryTheory.Category.{v₃, u₃} T] (L : CategoryTheory.Functor A T)
  {R₁ R₂ : CategoryTheory.Functor B T} (i : R₁ ≅ R₂) {X Y : CategoryTheory.Comma L R₂} (f : X ⟶ Y),
  ((CategoryTheory.Comma.mapRightIso L i).inverse.map f).left = f.left
Result.autoException ::
Duper saturated

Testing || AlgebraicGeometry.IsSeparated.stableUnderBaseChange : CategoryTheory.MorphismProperty.StableUnderBaseChange @AlgebraicGeometry.IsSeparated
Result.autoException ::
Duper saturated

Testing || ProbabilityTheory.iCondIndepSet.condIndep_generateFrom_lt : ∀ {Ω : Type u_1} {ι : Type u_2} {m' mΩ : MeasurableSpace Ω} [inst : StandardBorelSpace Ω] {hm' : m' ≤ mΩ}
  {μ : MeasureTheory.Measure Ω} [inst_1 : MeasureTheory.IsFiniteMeasure μ] [inst_2 : Preorder ι] {s : ι → Set Ω},
  (∀ (n : ι), MeasurableSet (s n)) →
    ProbabilityTheory.iCondIndepSet m' hm' s μ →
      ∀ (i : ι),
        ProbabilityTheory.CondIndep m' (MeasurableSpace.generateFrom {s i})
          (MeasurableSpace.generateFrom {t | ∃ j < i, s j = t}) hm' μ
Result.autoException ::
Duper saturated

Testing || IsLocalMax.hasDerivAt_eq_zero : ∀ {f : ℝ → ℝ} {f' a : ℝ}, IsLocalMax f a → HasDerivAt f f' a → f' = 0
Result.success

Testing || PowerSeries.coeff_coe : ∀ {R : Type u_1} [inst : Semiring R] (f : PowerSeries R) (i : ℤ),
  ((HahnSeries.ofPowerSeries ℤ R) f).coeff i = if i < 0 then 0 else (PowerSeries.coeff R i.natAbs) f
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Nat.cast_le`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Nat.lt_base_pow_length_digits' : ∀ {b m : ℕ}, m < (b + 2) ^ ((b + 2).digits m).length
Result.success

Testing || Polynomial.monomial_mul_X_pow : ∀ {R : Type u} [inst : Semiring R] (n : ℕ) (r : R) (k : ℕ),
  (Polynomial.monomial n) r * Polynomial.X ^ k = (Polynomial.monomial (n + k)) r
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ContinuousMultilinearMap.isUniformInducing_postcomp : ∀ {𝕜 : Type u_1} {ι : Type u_2} {E : ι → Type u_3} {F : Type u_4} [inst : NormedField 𝕜]
  [inst_1 : (i : ι) → TopologicalSpace (E i)] [inst_2 : (i : ι) → AddCommGroup (E i)]
  [inst_3 : (i : ι) → Module 𝕜 (E i)] [inst_4 : AddCommGroup F] [inst_5 : Module 𝕜 F] [inst_6 : UniformSpace F]
  [inst_7 : UniformAddGroup F] {G : Type u_5} [inst_8 : AddCommGroup G] [inst_9 : UniformSpace G]
  [inst_10 : UniformAddGroup G] [inst_11 : Module 𝕜 G] (g : F →L[𝕜] G),
  IsUniformInducing ⇑g → IsUniformInducing g.compContinuousMultilinearMap
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `UniformOnFun.uniformSpace cifvar_21
  cifvar_21 x_0`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || isBoundedUnder_le_finset_sup' : ∀ {α : Type u_1} {β : Type u_2} {ι : Type u_4} [inst : LinearOrder β] [inst_1 : Nonempty β] {f : Filter α}
  {F : ι → α → β} {s : Finset ι} (hs : s.Nonempty),
  (∀ i ∈ s, Filter.IsBoundedUnder (fun x1 x2 => x1 ≤ x2) f (F i)) →
    Filter.IsBoundedUnder (fun x1 x2 => x1 ≤ x2) f fun a => s.sup' hs fun i => F i a
Result.autoException ::
Duper saturated

Testing || AddCircle.norm_eq' : ∀ (p : ℝ), 0 < p → ∀ {x : ℝ}, ‖↑x‖ = p * |p⁻¹ * x - ↑(round (p⁻¹ * x))|
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `normOnQuotient (cifvar_18 x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Mathlib.Tactic.Ring.inv_single : ∀ {R : Type u_2} [inst : DivisionRing R] {a b : R}, a⁻¹ = b → (a + 0)⁻¹ = b + 0
Result.success

Testing || List.cons_eq_cons : ∀ {α : Type u_1} {a b : α} {l l' : List α}, a :: l = b :: l' ↔ a = b ∧ l = l'
Result.success

Testing || AntivaryOn.div_left : ∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : OrderedCommGroup α] [inst_1 : OrderedCommGroup β] {s : Set ι}
  {f₁ f₂ : ι → α} {g : ι → β}, AntivaryOn f₁ g s → MonovaryOn f₂ g s → AntivaryOn (f₁ / f₂) g s
Result.autoException ::
Duper saturated

Testing || NumberField.canonicalEmbedding.integralBasis_repr_apply : ∀ (K : Type u_1) [inst : Field K] [inst_1 : NumberField K] (x : K)
  (i : Module.Free.ChooseBasisIndex ℤ (NumberField.RingOfIntegers K)),
  ((NumberField.canonicalEmbedding.latticeBasis K).repr ((NumberField.canonicalEmbedding K) x)) i =
    ↑(((NumberField.integralBasis K).repr x) i)
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ExteriorAlgebra.map_apply_ι : ∀ {R : Type u1} [inst : CommRing R] {M : Type u2} [inst_1 : AddCommGroup M] [inst_2 : Module R M] {N : Type u4}
  [inst_3 : AddCommGroup N] [inst_4 : Module R N] (f : M →ₗ[R] N) (m : M),
  (ExteriorAlgebra.map f) ((ExteriorAlgebra.ι R) m) = (ExteriorAlgebra.ι R) (f m)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.GlueData.diagram_sndFrom : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v, u₁} C] (D : CategoryTheory.GlueData C) (i j : D.J),
  D.diagram.sndFrom (i, j) = j
Result.autoException ::
Duper saturated

Testing || Nat.pos_of_mem_primeFactors : ∀ {n p : ℕ}, p ∈ n.primeFactors → 0 < p
Result.success

Testing || Std.DHashMap.Internal.List.replaceEntry_cons : ∀ {α : Type u} {β : α → Type v} [inst : BEq α] {l : List ((a : α) × β a)} {k k' : α} {v : β k} {v' : β k'},
  Std.DHashMap.Internal.List.replaceEntry k v (⟨k', v'⟩ :: l) =
    bif k' == k then ⟨k, v⟩ :: l else ⟨k', v'⟩ :: Std.DHashMap.Internal.List.replaceEntry k v l
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Subobject.pullback_comp : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y Z : C} [inst_1 : CategoryTheory.Limits.HasPullbacks C]
  (f : X ⟶ Y) (g : Y ⟶ Z) (x : CategoryTheory.Subobject Z),
  (CategoryTheory.Subobject.pullback (CategoryTheory.CategoryStruct.comp f g)).obj x =
    (CategoryTheory.Subobject.pullback f).obj ((CategoryTheory.Subobject.pullback g).obj x)
Result.autoException ::
Duper saturated

Testing || Monotone.inter : ∀ {α : Type u_1} {β : Type u_2} [inst : Preorder β] {f g : β → Set α},
  Monotone f → Monotone g → Monotone fun x => f x ∩ g x
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsLocalization.isNoetherianRing : ∀ {R : Type u_1} [inst : CommRing R] (M : Submonoid R) (S : Type u_2) [inst_1 : CommRing S] [inst_2 : Algebra R S]
  [inst_3 : IsLocalization M S], IsNoetherianRing R → IsNoetherianRing S
Result.autoException ::
Duper saturated

Testing || RelEmbedding.not_acc_of_decreasing_seq : ∀ {α : Type u_1} {r : α → α → Prop} [inst : IsStrictOrder α r] (f : (fun x1 x2 => x1 > x2) ↪r r) (k : ℕ), ¬Acc r (f k)
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type (fun x1 x2 => x2 < x1) ↪r
  x_0 of λ binder contains bound variables

Testing || AffineIsometryEquiv.surjective : ∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_5} {P : Type u_10} {P₂ : Type u_11} [inst : NormedField 𝕜]
  [inst_1 : SeminormedAddCommGroup V] [inst_2 : NormedSpace 𝕜 V] [inst_3 : PseudoMetricSpace P]
  [inst_4 : NormedAddTorsor V P] [inst_5 : SeminormedAddCommGroup V₂] [inst_6 : NormedSpace 𝕜 V₂]
  [inst_7 : PseudoMetricSpace P₂] [inst_8 : NormedAddTorsor V₂ P₂] (e : P ≃ᵃⁱ[𝕜] P₂), Function.Surjective ⇑e
Result.autoException ::
Duper saturated

Testing || IsLocalExtr.hasDerivAt_eq_zero : ∀ {f : ℝ → ℝ} {f' a : ℝ}, IsLocalExtr f a → HasDerivAt f f' a → f' = 0
Result.success

Testing || Std.DHashMap.Internal.Raw₀.map_eq_mapₘ : ∀ {α : Type u} {β : α → Type v} {δ : α → Type w} (m : Std.DHashMap.Internal.Raw₀ α β) (f : (a : α) → β a → δ a),
  Std.DHashMap.Internal.Raw₀.map f m = m.mapₘ f
Result.autoException ::
Duper saturated

Testing || Finset.prod_univ_sum : ∀ {ι : Type u_1} {α : Type u_3} {κ : ι → Type u_6} [inst : CommSemiring α] [inst_1 : DecidableEq ι] [inst_2 : Fintype ι]
  (t : (i : ι) → Finset (κ i)) (f : (i : ι) → κ i → α),
  ∏ i : ι, ∑ j ∈ t i, f i j = ∑ x ∈ Fintype.piFinset t, ∏ i : ι, f i (x i)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `t i✝`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Finset.disjoint_iff_ne : ∀ {α : Type u_1} {s t : Finset α}, Disjoint s t ↔ ∀ a ∈ s, ∀ b ∈ t, a ≠ b
Result.success

Testing || FinBddDistLat.Iso.mk_hom_toLatticeHom_toSupHom_toFun : ∀ {α β : FinBddDistLat} (e : ↑α.toBddDistLat.toDistLat ≃o ↑β.toBddDistLat.toDistLat) (a : ↑α.toBddDistLat.toDistLat),
  (FinBddDistLat.Iso.mk e).hom.toSupHom a = e a
Result.autoException ::
Duper saturated

Testing || List.sublists'_reverse : ∀ {α : Type u} (l : List α), l.reverse.sublists' = List.map List.reverse l.sublists
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || PresheafOfModules.toPresheaf_obj_coe : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {R : CategoryTheory.Functor Cᵒᵖ RingCat}
  (M : PresheafOfModules R) (X : Cᵒᵖ), ↑(((PresheafOfModules.toPresheaf R).obj M).obj X) = ↑(M.obj X)
Result.autoException ::
Duper saturated

Testing || Ring.inverse_unit : ∀ {M₀ : Type u_2} [inst : MonoidWithZero M₀] (u : M₀ˣ), Ring.inverse ↑u = ↑u⁻¹
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Classical.propDecidable
  (cifvar_8 fun u => cifvar_1 (cifvar_3 u) x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || TensorProduct.finsuppScalarLeft_apply : ∀ {R : Type u_1} [inst : CommSemiring R] {N : Type u_3} [inst_1 : AddCommMonoid N] [inst_2 : Module R N] {ι : Type u_4}
  [inst_3 : DecidableEq ι] (pn : TensorProduct R (ι →₀ R) N) (i : ι),
  ((TensorProduct.finsuppScalarLeft R N ι) pn) i = (TensorProduct.lid R N) ((LinearMap.rTensor N (Finsupp.lapply i)) pn)
Result.autoException ::
Duper saturated

Testing || Iff.not : ∀ {a b : Prop}, (a ↔ b) → (¬a ↔ ¬b)
Result.success

Testing || List.map_id_fun : ∀ {α : Type u_1}, List.map id = id
Result.autoException ::
Duper saturated

Testing || Set.addActionSet.proof_1 : ∀ {α : Type u_2} {β : Type u_1} [inst : AddMonoid α] [inst_1 : AddAction α β] (x : Set β), (fun x => 0 +ᵥ x) '' x = x
Result.success

Testing || LieModuleHom.mem_ker : ∀ {R : Type u} {L : Type v} {M : Type w} {N : Type w₁} [inst : CommRing R] [inst_1 : LieRing L]
  [inst_2 : AddCommGroup M] [inst_3 : Module R M] [inst_4 : LieRingModule L M] [inst_5 : AddCommGroup N]
  [inst_6 : Module R N] [inst_7 : LieRingModule L N] {f : M →ₗ⁅R,L⁆ N} {m : M}, m ∈ f.ker ↔ f m = 0
Result.autoException ::
Duper saturated

Testing || LinearMap.range_comp_le_range : ∀ {R : Type u_1} {R₂ : Type u_2} {R₃ : Type u_3} {M : Type u_5} {M₂ : Type u_6} {M₃ : Type u_7} [inst : Semiring R]
  [inst_1 : Semiring R₂] [inst_2 : Semiring R₃] [inst_3 : AddCommMonoid M] [inst_4 : AddCommMonoid M₂]
  [inst_5 : AddCommMonoid M₃] [inst_6 : Module R M] [inst_7 : Module R₂ M₂] [inst_8 : Module R₃ M₃] {τ₁₂ : R →+* R₂}
  {τ₂₃ : R₂ →+* R₃} {τ₁₃ : R →+* R₃} [inst_9 : RingHomCompTriple τ₁₂ τ₂₃ τ₁₃] [inst_10 : RingHomSurjective τ₂₃]
  [inst_11 : RingHomSurjective τ₁₃] (f : M →ₛₗ[τ₁₂] M₂) (g : M₂ →ₛₗ[τ₂₃] M₃),
  LinearMap.range (g.comp f) ≤ LinearMap.range g
Result.autoException ::
Duper saturated

Testing || PowerSeries.coeff_succ_mul_X : ∀ {R : Type u_1} [inst : Semiring R] (n : ℕ) (φ : PowerSeries R),
  (PowerSeries.coeff R (n + 1)) (φ * PowerSeries.X) = (PowerSeries.coeff R n) φ
Result.autoException ::
Duper saturated

Testing || Module.mk_finrank_eq_card_basis : ∀ {R : Type u} {M : Type v} [inst : Ring R] [inst_1 : AddCommGroup M] [inst_2 : Module R M]
  [inst_3 : StrongRankCondition R] [inst_4 : Module.Finite R M] {ι : Type w},
  Basis ι R M → ↑(Module.finrank R M) = Cardinal.mk ι
Result.autoException ::
Duper saturated

Testing || QuadraticMap.Isometry.inr_apply : ∀ {R : Type u_2} {M₁ : Type u_3} {M₂ : Type u_4} {P : Type u_7} [inst : CommSemiring R] [inst_1 : AddCommMonoid M₁]
  [inst_2 : AddCommMonoid M₂] [inst_3 : AddCommMonoid P] [inst_4 : Module R M₁] [inst_5 : Module R M₂]
  [inst_6 : Module R P] (Q₁ : QuadraticMap R M₁ P) (Q₂ : QuadraticMap R M₂ P) (i : M₂),
  (QuadraticMap.Isometry.inr Q₁ Q₂) i = (0, i)
Result.autoException ::
Duper saturated

Testing || Option.getD_eq_iff : ∀ {α : Type u_1} {o : Option α} {a b : α}, o.getD a = b ↔ o = some b ∨ o = none ∧ a = b
Result.autoException ::
Duper saturated

Testing || ContinuousMap.continuous_comp : ∀ {X : Type u_2} {Y : Type u_3} {Z : Type u_4} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]
  [inst_2 : TopologicalSpace Z] (g : C(Y, Z)), Continuous g.comp
Result.success

Testing || mul_left_inv : ∀ {G : Type u_1} [inst : Group G] (a : G), a⁻¹ * a = 1
Result.success

Testing || CategoryTheory.Limits.bicone_ι_π_ne_assoc : ∀ {J : Type w} {C : Type uC} [inst : CategoryTheory.Category.{uC', uC} C]
  [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C] {F : J → C} (B : CategoryTheory.Limits.Bicone F) {j j' : J},
  j ≠ j' →
    ∀ {Z : C} (h : F j' ⟶ Z),
      CategoryTheory.CategoryStruct.comp (B.ι j) (CategoryTheory.CategoryStruct.comp (B.π j') h) =
        CategoryTheory.CategoryStruct.comp 0 h
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.ι x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || ArzelaAscoli.compactSpace_of_closed_inducing' : ∀ {ι : Type u_1} {X : Type u_2} {α : Type u_3} [inst : TopologicalSpace X] [inst_1 : UniformSpace α] {F : ι → X → α}
  [inst_2 : TopologicalSpace ι] {𝔖 : Set (Set X)},
  (∀ K ∈ 𝔖, IsCompact K) →
    IsInducing (⇑(UniformOnFun.ofFun 𝔖) ∘ F) →
      IsClosed (Set.range (⇑(UniformOnFun.ofFun 𝔖) ∘ F)) →
        (∀ K ∈ 𝔖, EquicontinuousOn F K) → (∀ K ∈ 𝔖, ∀ x ∈ K, ∃ Q, IsCompact Q ∧ ∀ (i : ι), F i x ∈ Q) → CompactSpace ι
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `UniformOnFun.topologicalSpace
  cifvar_29 cifvar_28 x_1`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || Fin.castSucc_ne_zero_iff : ∀ {n : ℕ} {a : Fin (n + 1)}, a.castSucc ≠ 0 ↔ a ≠ 0
Result.success

Testing || Nat.succ_pred_prime : ∀ {p : ℕ}, Nat.Prime p → p.pred.succ = p
Result.success

Testing || Nat.primeFactorsList_zero : Nat.primeFactorsList 0 = []
Result.success

Testing || Matrix.BlockTriangular.det_fintype : ∀ {α : Type u_1} {m : Type u_3} {R : Type v} [inst : CommRing R] {M : Matrix m m R} {b : m → α} [inst_1 : DecidableEq m]
  [inst_2 : Fintype m] [inst_3 : DecidableEq α] [inst_4 : Fintype α] [inst_5 : LinearOrder α],
  M.BlockTriangular b → M.det = ∏ k : α, (M.toSquareBlock b k).det
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: In { a // b a = k } →
  R, type of ∀ bound variable is not of sort `Prop`, and depends on bound variables

Testing || Multiset.prod_singleton : ∀ {α : Type u_3} [inst : CommMonoid α] (a : α), {a}.prod = a
Result.autoException ::
Duper saturated

Testing || NonemptyInterval.addCommMonoid.proof_5 : ∀ {α : Type u_1} [inst : OrderedAddCommMonoid α] (s : NonemptyInterval α) (n : ℕ), (n • s).toProd = n • s.toProd
Result.success

Testing || CategoryTheory.isLeftAdjoint_triangle_lift_comonadic : ∀ {A : Type u₁} {B : Type u₂} {C : Type u₃} [inst : CategoryTheory.Category.{v₁, u₁} A]
  [inst_1 : CategoryTheory.Category.{v₂, u₂} B] [inst_2 : CategoryTheory.Category.{v₃, u₃} C]
  (F : CategoryTheory.Functor B A) [inst_3 : CategoryTheory.ComonadicLeftAdjoint F] {L : CategoryTheory.Functor C B}
  [inst_4 : CategoryTheory.Limits.HasCoreflexiveEqualizers C] [inst : (L.comp F).IsLeftAdjoint], L.IsLeftAdjoint
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Mathlib.Tactic.Abel.term_add_termg : ∀ {α : Type u_1} [inst : AddCommGroup α] (n₁ : ℤ) (x a₁ : α) (n₂ : ℤ) (a₂ : α) (n' : ℤ) (a' : α),
  n₁ + n₂ = n' →
    a₁ + a₂ = a' →
      Mathlib.Tactic.Abel.termg n₁ x a₁ + Mathlib.Tactic.Abel.termg n₂ x a₂ = Mathlib.Tactic.Abel.termg n' x a'
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AddCircle.ergodic_zsmul : ∀ {T : ℝ} [hT : Fact (0 < T)] {n : ℤ}, 1 < |n| → Ergodic (fun y => n • y) MeasureTheory.volume
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `AddSubgroup.normal_of_comm
  (cifvar_28 x_0)`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || AddAction.IsBlock.orbit : ∀ {G : Type u_1} [inst : AddGroup G] {X : Type u_2} [inst_1 : AddAction G X] (a : X),
  AddAction.IsBlock G (AddAction.orbit G a)
Result.success

Testing || Int.ofNat_mul_negSucc : ∀ (m n : ℕ), ↑m * Int.negSucc n = -↑(m * n.succ)
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Memℒp.evariance_lt_top : ∀ {Ω : Type u_1} {m : MeasurableSpace Ω} {X : Ω → ℝ} {μ : MeasureTheory.Measure Ω}
  [inst : MeasureTheory.IsFiniteMeasure μ], MeasureTheory.Memℒp X 2 μ → ProbabilityTheory.evariance X μ < ⊤
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || oneLePart_le_one : ∀ {α : Type u_1} [inst : Lattice α] [inst_1 : Group α] {a : α}, a⁺ᵐ ≤ 1 ↔ a ≤ 1
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Prefunctor.pathStar_apply : ∀ {U : Type u_1} [inst : Quiver U] {V : Type u_2} [inst_1 : Quiver V] (φ : U ⥤q V) {u v : U} (p : Quiver.Path u v),
  φ.pathStar u (Quiver.PathStar.mk p) = Quiver.PathStar.mk (φ.mapPath p)
Result.autoException ::
Duper saturated

Testing || CochainComplex.prev_nat_zero : (ComplexShape.up ℕ).prev 0 = 0
Result.autoException ::
Duper saturated

Testing || QuadraticMap.Isometry.inr_apply : ∀ {R : Type u_2} {M₁ : Type u_3} {M₂ : Type u_4} {P : Type u_7} [inst : CommSemiring R] [inst_1 : AddCommMonoid M₁]
  [inst_2 : AddCommMonoid M₂] [inst_3 : AddCommMonoid P] [inst_4 : Module R M₁] [inst_5 : Module R M₂]
  [inst_6 : Module R P] (Q₁ : QuadraticMap R M₁ P) (Q₂ : QuadraticMap R M₂ P) (i : M₂),
  (QuadraticMap.Isometry.inr Q₁ Q₂) i = (0, i)
Result.autoException ::
Duper saturated

Testing || IsAlgClosed.isCyclotomicExtension : ∀ (S : Set ℕ+) (K : Type w) [inst : Field K] [inst_1 : IsAlgClosed K],
  (∀ a ∈ S, NeZero ↑↑a) → IsCyclotomicExtension S K K
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Measure.integral_comp_mul_left : ∀ {F : Type u_2} [inst : NormedAddCommGroup F] [inst_1 : NormedSpace ℝ F] (g : ℝ → F) (a : ℝ),
  ∫ (x : ℝ), g (a * x) = |a⁻¹| • ∫ (y : ℝ), g y
Result.autoException ::
Duper saturated

Testing || Homeomorph.continuous_sumAssoc_symm : ∀ (X : Type u_1) (Y : Type u_2) (Z : Type u_4) [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y]
  [inst_2 : TopologicalSpace Z], Continuous ⇑(Equiv.sumAssoc X Y Z).symm
Result.autoException ::
Duper saturated

Testing || AddSubmonoid.add.proof_1 : ∀ {M : Type u_1} [inst : AddZeroClass M] (S : AddSubmonoid M) (a b : ↥S), ↑a + ↑b ∈ S
Result.success

Testing || Summable.vanishing : ∀ {α : Type u_1} {G : Type u_5} [inst : TopologicalSpace G] [inst_1 : AddCommGroup G] [inst_2 : TopologicalAddGroup G]
  {f : α → G}, Summable f → ∀ ⦃e : Set G⦄, e ∈ nhds 0 → ∃ s, ∀ (t : Finset α), Disjoint t s → ∑ k ∈ t, f k ∈ e
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CauchySeq fun s =>
  cifvar_10 s fun b => x_2 b`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.MorphismProperty.pretopology_inf : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Limits.HasPullbacks C]
  (P Q : CategoryTheory.MorphismProperty C) [inst_2 : P.IsMultiplicative] (hPb : P.StableUnderBaseChange)
  [inst_3 : Q.IsMultiplicative] (hQb : Q.StableUnderBaseChange),
  (P ⊓ Q).pretopology ⋯ = P.pretopology hPb ⊓ Q.pretopology hQb
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Quaternion.mul_imI : ∀ {R : Type u_3} [inst : CommRing R] (a b : Quaternion R),
  (a * b).imI = a.re * b.imI + a.imI * b.re + a.imJ * b.imK - a.imK * b.imJ
Result.success

Testing || LinearIsometryEquiv.comp_fderiv : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type u_4}
  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] (iso : E ≃ₗᵢ[𝕜] F) {f : G → E} {x : G},
  fderiv 𝕜 (⇑iso ∘ f) x =
    (↑{ toLinearEquiv := iso.toLinearEquiv, continuous_toFun := ⋯, continuous_invFun := ⋯ }).comp (fderiv 𝕜 f x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || RingHom.IsStandardSmooth.toAlgebra : ∀ {R : Type u} {S : Type v} [inst : CommRing R] [inst_1 : CommRing S] {f : R →+* S},
  f.IsStandardSmooth → Algebra.IsStandardSmooth R S
Result.autoException ::
Duper saturated

Testing || HomologicalComplex₂.D₂_D₁_assoc : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_5, u_1} C] [inst_1 : CategoryTheory.Preadditive C] {I₁ : Type u_2}
  {I₂ : Type u_3} {I₁₂ : Type u_4} {c₁ : ComplexShape I₁} {c₂ : ComplexShape I₂} (K : HomologicalComplex₂ C c₁ c₂)
  (c₁₂ : ComplexShape I₁₂) [inst_2 : TotalComplexShape c₁ c₂ c₁₂] [inst_3 : DecidableEq I₁₂] [inst_4 : K.HasTotal c₁₂]
  (i₁₂ i₁₂' i₁₂'' : I₁₂) {Z : C} (h : K.toGradedObject.mapObj (c₁.π c₂ c₁₂) i₁₂'' ⟶ Z),
  CategoryTheory.CategoryStruct.comp (K.D₂ c₁₂ i₁₂ i₁₂') (CategoryTheory.CategoryStruct.comp (K.D₁ c₁₂ i₁₂' i₁₂'') h) =
    CategoryTheory.CategoryStruct.comp (-CategoryTheory.CategoryStruct.comp (K.D₁ c₁₂ i₁₂ i₁₂') (K.D₂ c₁₂ i₁₂' i₁₂'')) h
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.GradedObject (I₁ × I₂) C is not a `∀`

Testing || MeasureTheory.OuterMeasure.ofFunction_eq : ∀ {α : Type u_1} {m : Set α → ENNReal} {m_empty : m ∅ = 0} (s : Set α),
  (∀ ⦃t : Set α⦄, s ⊆ t → m s ≤ m t) →
    (∀ (s : ℕ → Set α), m (⋃ i, s i) ≤ ∑' (i : ℕ), m (s i)) → (MeasureTheory.OuterMeasure.ofFunction m m_empty) s = m s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || RatFunc.denom_div_dvd : ∀ {K : Type u} [inst : Field K] (p q : Polynomial K),
  ((algebraMap (Polynomial K) (RatFunc K)) p / (algebraMap (Polynomial K) (RatFunc K)) q).denom ∣ q
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `gcd x_1 x_2`.
This is because it has subterms possessing at least one of the following features
· Type argument with bound variables, e.g. `@Fin.add (n + 2) a b` where `n` is a bound variable
· λ binders whose type contain bound variables, e.g. `fun (x : a) => x` where `a` is a bound variable
· Other (TODO)

Testing || CategoryTheory.IsPullback.isoPullback_inv_fst_assoc : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {P X Y Z : C} {fst : P ⟶ X} {snd : P ⟶ Y} {f : X ⟶ Z}
  {g : Y ⟶ Z} (h : CategoryTheory.IsPullback fst snd f g) [inst_1 : CategoryTheory.Limits.HasPullback f g] {Z_1 : C}
  (h_1 : X ⟶ Z_1),
  CategoryTheory.CategoryStruct.comp h.isoPullback.inv (CategoryTheory.CategoryStruct.comp fst h_1) =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.pullback.fst f g) h_1
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Finset.div_eq_empty : ∀ {α : Type u_2} [inst : DecidableEq α] [inst_1 : Div α] {s t : Finset α}, s / t = ∅ ↔ s = ∅ ∨ t = ∅
Result.autoException ::
Duper saturated

Testing || hasStrictFDerivAt_finset_prod : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {ι : Type u_5} {𝔸' : Type u_7} [inst_1 : NormedCommRing 𝔸']
  [inst_2 : NormedAlgebra 𝕜 𝔸'] {u : Finset ι} [inst_3 : DecidableEq ι] [inst_4 : Fintype ι] {x : ι → 𝔸'},
  HasStrictFDerivAt (fun x => ∏ i ∈ u, x i) (∑ i ∈ u, (∏ j ∈ u.erase i, x j) • ContinuousLinearMap.proj i) x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || List.bagInter_nil : ∀ {α : Type u_1} [inst : DecidableEq α] (l : List α), l.bagInter [] = []
Result.autoException ::
Duper saturated

Testing || List.perm_comp_perm : ∀ {α : Type u_1}, Relation.Comp List.Perm List.Perm = List.Perm
Result.autoException ::
Duper saturated

Testing || TopologicalSpace.Closeds.coe_eq_singleton_of_isAtom : ∀ {α : Type u_2} [inst : TopologicalSpace α] [inst_1 : T0Space α] {s : TopologicalSpace.Closeds α},
  IsAtom s → ∃ a, ↑s = {a}
Result.autoException ::
Duper saturated

Testing || Bool.atLeastTwo_true_right : ∀ {a b : Bool}, a.atLeastTwo b true = (a || b)
Result.success

Testing || List.isRotated_cyclicPermutations_iff : ∀ {α : Type u} {l l' : List α}, l.cyclicPermutations ~r l'.cyclicPermutations ↔ l ~r l'
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AddSubmonoid.closure_singleton_eq : ∀ {A : Type u_2} [inst : AddMonoid A] (x : A), AddSubmonoid.closure {x} = AddMonoidHom.mrange ((multiplesHom A) x)
Result.autoException ::
Duper saturated

Testing || QuadraticForm.tensorLId_toLinearEquiv : ∀ {R : Type uR} {M₂ : Type uM₂} [inst : CommRing R] [inst_1 : AddCommGroup M₂] [inst_2 : Module R M₂]
  [inst_3 : Invertible 2] (Q₂ : QuadraticForm R M₂), Q₂.tensorLId.toLinearEquiv = TensorProduct.lid R M₂
Result.autoException ::
Duper saturated

Testing || gcd_dvd_gcd_mul_right : ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : GCDMonoid α] (m n k : α), gcd m n ∣ gcd (m * k) n
Result.success

Testing || ProbabilityTheory.condexp_prod_ae_eq_integral_condDistrib : ∀ {α : Type u_1} {β : Type u_2} {Ω : Type u_3} {F : Type u_4} [inst : MeasurableSpace Ω] [inst_1 : StandardBorelSpace Ω]
  [inst_2 : Nonempty Ω] [inst_3 : NormedAddCommGroup F] {mα : MeasurableSpace α} {μ : MeasureTheory.Measure α}
  [inst_4 : MeasureTheory.IsFiniteMeasure μ] {X : α → β} {Y : α → Ω} {mβ : MeasurableSpace β} {f : β × Ω → F}
  [inst_5 : NormedSpace ℝ F] [inst_6 : CompleteSpace F],
  Measurable X →
    AEMeasurable Y μ →
      MeasureTheory.StronglyMeasurable f →
        MeasureTheory.Integrable (fun a => f (X a, Y a)) μ →
          (MeasureTheory.condexp (MeasurableSpace.comap X mβ) μ fun a => f (X a, Y a)) =ᵐ[μ] fun a =>
            ∫ (y : Ω), f (X a, y) ∂(ProbabilityTheory.condDistrib Y X μ) (X a)
Result.autoException ::
(deterministic) timeout at `fluidSup`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || PresentedGroup.closure_rels_subset_ker : ∀ {α : Type u_1} {G : Type u_2} [inst : Group G] {f : α → G} {rels : Set (FreeGroup α)},
  (∀ r ∈ rels, (FreeGroup.lift f) r = 1) → Subgroup.normalClosure rels ≤ (FreeGroup.lift f).ker
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Pseudofunctor.whiskerRight_mapId_hom_app : ∀ {B : Type u_1} [inst : CategoryTheory.Bicategory B] (F : CategoryTheory.Pseudofunctor B CategoryTheory.Cat) {a b : B}
  (f : a ⟶ b) (X : ↑(F.obj a)),
  (F.map f).map ((F.mapId a).hom.app X) =
    CategoryTheory.CategoryStruct.comp ((F.mapComp (CategoryTheory.CategoryStruct.id a) f).inv.app X)
      (CategoryTheory.CategoryStruct.comp ((F.map₂ (CategoryTheory.Bicategory.leftUnitor f).hom).app X)
        ((CategoryTheory.Bicategory.leftUnitor (F.map f)).inv.app X))
Result.autoException ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Elapsed time: 293199 ms
