Config = {maxHeartbeats := 65536, timeout := 10, solverConfig := rawNative, logFile := evalAutoLog.txt, logFile := evalAutoResult.txt}

Testing || Bornology.isBounded_sUnion : ∀ {α : Type u_2} [inst : Bornology α] {S : Set (Set α)},
  S.Finite → (Bornology.IsBounded (⋃₀ S) ↔ ∀ s ∈ S, Bornology.IsBounded s)
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || iSup_eq_iSup_finset' : ∀ {α : Type u_2} {ι' : Sort u_7} [inst : CompleteLattice α] (s : ι' → α), ⨆ i, s i = ⨆ t, ⨆ i ∈ t, s i.down
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Nat.le_add_one_of_avg_eq_left : ∀ {a b : ℕ}, a.avg b = a → b ≤ a + 1
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LieModule.ofAssociativeModule : ∀ {A : Type v} [inst : Ring A] {R : Type u} [inst_1 : CommRing R] [inst_2 : Algebra R A] {M : Type w}
  [inst_3 : AddCommGroup M] [inst_4 : _root_.Module R M] [inst_5 : _root_.Module A M] [inst_6 : IsScalarTower R A M],
  LieModule R A M
Result.exception ::
Duper saturated

Testing || LinearMap.ker_noncommProd_eq_of_supIndep_ker : ∀ {K : Type u} {V : Type v} [inst : DivisionRing K] [inst_1 : AddCommGroup V] [inst_2 : _root_.Module K V]
  [inst_3 : FiniteDimensional K V] {ι : Type u_1} {f : ι → V →ₗ[K] V} (s : Finset ι)
  (comm : (↑s).Pairwise (Commute on f)),
  (s.SupIndep fun i => LinearMap.ker (f i)) → LinearMap.ker (s.noncommProd f comm) = ⨆ i ∈ s, LinearMap.ker (f i)
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AddSubgroup.coe_center : ∀ (G : Type u_1) [inst : AddGroup G], ↑(AddSubgroup.center G) = Set.addCenter G
Result.exception ::
Duper saturated

Testing || NonUnitalSubalgebra.toNonUnitalSubsemiring_injective : ∀ {R : Type u} {A : Type v} [inst : CommSemiring R] [inst_1 : NonUnitalNonAssocSemiring A] [inst_2 : _root_.Module R A],
  Function.Injective NonUnitalSubalgebra.toNonUnitalSubsemiring
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CochainComplex.HomComplex.Cochain.ext₀ : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Preadditive C]
  {F G : CochainComplex C ℤ} (z₁ z₂ : CochainComplex.HomComplex.Cochain F G 0),
  (∀ (p : ℤ), z₁.v p p ⋯ = z₂.v p p ⋯) → z₁ = z₂
Result.exception ::
Duper saturated

Testing || Multiset.mem_of_mem_nsmul : ∀ {α : Type u_1} {a : α} {s : Multiset α} {n : ℕ}, a ∈ n • s → a ∈ s
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.StructuredArrow.IsUniversal.fac_assoc : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  {S : D} {T : CategoryTheory.Functor C D} {f : CategoryTheory.StructuredArrow S T} (h : f.IsUniversal)
  (g : CategoryTheory.StructuredArrow S T) {Z : D} (h_1 : T.obj g.right ⟶ Z),
  CategoryTheory.CategoryStruct.comp f.hom (CategoryTheory.CategoryStruct.comp (T.map (h.desc g)) h_1) =
    CategoryTheory.CategoryStruct.comp g.hom h_1
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ContractingWith.fixedPoint_lipschitz_in_map : ∀ {α : Type u_1} [inst : MetricSpace α] {K : NNReal} {f : α → α} (hf : ContractingWith K f) [inst_1 : Nonempty α]
  [inst_2 : CompleteSpace α] {g : α → α} (hg : ContractingWith K g) {C : ℝ},
  (∀ (z : α), dist (f z) (g z) ≤ C) →
    dist (ContractingWith.fixedPoint f hf) (ContractingWith.fixedPoint g hg) ≤ C / (1 - ↑K)
Result.success

Testing || CategoryTheory.Functor.closedSieves_obj : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (J₁ : CategoryTheory.GrothendieckTopology C) (X : Cᵒᵖ),
  (CategoryTheory.Functor.closedSieves J₁).obj X = { S // J₁.IsClosed S }
Result.exception ::
Duper saturated

Testing || MeasureTheory.Measure.haar.le_index_mul : ∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : TopologicalGroup G]
  (K₀ : TopologicalSpace.PositiveCompacts G) (K : TopologicalSpace.Compacts G) {V : Set G},
  (interior V).Nonempty →
    MeasureTheory.Measure.haar.index (↑K) V ≤
      MeasureTheory.Measure.haar.index ↑K ↑K₀ * MeasureTheory.Measure.haar.index (↑K₀) V
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MvPolynomial.mapAlgEquiv_refl : ∀ {R : Type u} (σ : Type u_1) [inst : CommSemiring R] {A₁ : Type u_2} [inst_1 : CommSemiring A₁]
  [inst_2 : Algebra R A₁], MvPolynomial.mapAlgEquiv σ AlgEquiv.refl = AlgEquiv.refl
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || PartialHomeomorph.MDifferentiable.mfderiv_bijective : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {H : Type u_3} [inst_3 : TopologicalSpace H] {I : ModelWithCorners 𝕜 E H} {M : Type u_4}
  [inst_4 : TopologicalSpace M] [inst_5 : ChartedSpace H M] {E' : Type u_5} [inst_6 : NormedAddCommGroup E']
  [inst_7 : NormedSpace 𝕜 E'] {H' : Type u_6} [inst_8 : TopologicalSpace H'] {I' : ModelWithCorners 𝕜 E' H'}
  {M' : Type u_7} [inst_9 : TopologicalSpace M'] [inst_10 : ChartedSpace H' M'] {e : PartialHomeomorph M M'},
  PartialHomeomorph.MDifferentiable I I' e → ∀ {x : M}, x ∈ e.source → Function.Bijective ⇑(mfderiv I I' (↑e) x)
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || List.prod_ne_zero : ∀ {M₀ : Type u_4} [inst : MonoidWithZero M₀] {l : List M₀} [inst_1 : Nontrivial M₀] [inst_2 : NoZeroDivisors M₀],
  0 ∉ l → l.prod ≠ 0
Result.success

Testing || Ring.ne_bot_of_isMaximal_of_not_isField : ∀ {R : Type u_1} [inst : CommSemiring R] [inst_1 : Nontrivial R] {M : Ideal R}, M.IsMaximal → ¬IsField R → M ≠ ⊥
Result.exception ::
Duper saturated

Testing || MonovaryOn.pow_left : ∀ {ι : Type u_1} {α : Type u_2} {β : Type u_3} [inst : OrderedCommGroup α] [inst_1 : OrderedCommGroup β] {s : Set ι}
  {f : ι → α} {g : ι → β}, MonovaryOn f g s → ∀ (n : ℕ), MonovaryOn (f ^ n) g s
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Complex.arg_coe_angle_eq_iff : ∀ {x y : ℂ}, ↑x.arg = ↑y.arg ↔ x.arg = y.arg
Result.success

Testing || Dynamics.dynEntourage_monotone : ∀ {X : Type u_1} (T : X → X) (n : ℕ), Monotone fun U => Dynamics.dynEntourage T U n
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || HomologicalComplex.cycles_left_exact : ∀ {C : Type u_1} {ι : Type u_2} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Abelian C]
  {c : ComplexShape ι} (S : CategoryTheory.ShortComplex (HomologicalComplex C c)),
  S.Exact →
    ∀ [inst_2 : CategoryTheory.Mono S.f] (i : ι) [inst_3 : S.X₁.HasHomology i] [inst_4 : S.X₂.HasHomology i]
      [inst_5 : S.X₃.HasHomology i],
      (CategoryTheory.ShortComplex.mk (HomologicalComplex.cyclesMap S.f i) (HomologicalComplex.cyclesMap S.g i) ⋯).Exact
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || instHasFiniteLimitsLightCondMod : ∀ (R : Type u) [inst : Ring R], CategoryTheory.Limits.HasFiniteLimits (LightCondMod R)
Result.exception ::
Duper saturated

Testing || List.getLast?_drop : ∀ {α : Type u_1} {n : ℕ} {l : List α}, (List.drop n l).getLast? = if l.length ≤ n then none else l.getLast?
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AddGroup.fintypeOfKerEqRange.proof_1 : ∀ {F G H : Type u_1} [inst : AddGroup F] [inst_1 : AddGroup G] [inst_2 : AddGroup H] (f : F →+ G) (g : G →+ H),
  g.ker = f.range → g.ker ≤ f.range
Result.success

Testing || List.dedup_cons_of_mem' : ∀ {α : Type u_1} [inst : DecidableEq α] {a : α} {l : List α}, a ∈ l.dedup → (a :: l).dedup = l.dedup
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || stronglyMeasurable_bot_iff : ∀ {α : Type u_1} {β : Type u_2} {f : α → β} [inst : TopologicalSpace β] [inst_1 : Nonempty β] [inst_2 : T2Space β],
  MeasureTheory.StronglyMeasurable f ↔ ∃ c, f = fun x => c
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || PrimeSpectrum.vanishingIdeal_anti_mono : ∀ {R : Type u} [inst : CommSemiring R] {s t : Set (PrimeSpectrum R)},
  s ⊆ t → PrimeSpectrum.vanishingIdeal t ≤ PrimeSpectrum.vanishingIdeal s
Result.exception ::
Duper saturated

Testing || IsFractionRing.isDomain : ∀ (A : Type u_4) [inst : CommRing A] {K : Type u_5} [inst_1 : CommRing K] [inst_2 : Algebra A K]
  [inst_3 : IsFractionRing A K] [inst : IsDomain A], IsDomain K
Result.exception ::
Duper saturated

Testing || Finset.inj_on_of_surj_on_of_card_le : ∀ {α : Type u_1} {β : Type u_2} {s : Finset α} {t : Finset β} (f : (a : α) → a ∈ s → β),
  (∀ (a : α) (ha : a ∈ s), f a ha ∈ t) →
    (∀ b ∈ t, ∃ a, ∃ (ha : a ∈ s), f a ha = b) →
      s.card ≤ t.card → ∀ ⦃a₁ : α⦄ (ha₁ : a₁ ∈ s) ⦃a₂ : α⦄ (ha₂ : a₂ ∈ s), f a₁ ha₁ = f a₂ ha₂ → a₁ = a₂
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Pretriangulated.productTriangle_obj₁ : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.HasShift C ℤ] {J : Type u_1}
  (T : J → CategoryTheory.Pretriangulated.Triangle C) [inst_2 : CategoryTheory.Limits.HasProduct fun j => (T j).obj₁]
  [inst_3 : CategoryTheory.Limits.HasProduct fun j => (T j).obj₂]
  [inst_4 : CategoryTheory.Limits.HasProduct fun j => (T j).obj₃]
  [inst_5 : CategoryTheory.Limits.HasProduct fun j => (CategoryTheory.shiftFunctor C 1).obj (T j).obj₁],
  (CategoryTheory.Pretriangulated.productTriangle T).obj₁ = ∏ᶜ fun j => (T j).obj₁
Result.exception ::
Duper saturated

Testing || lt_div_iff_of_neg' : ∀ {α : Type u_2} [inst : LinearOrderedField α] {a b c : α}, c < 0 → (a < b / c ↔ b < c * a)
Result.exception ::
Duper saturated

Testing || CochainComplex.mappingCone.inr_f_descCochain_v : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  {F G : CochainComplex C ℤ} (φ : F ⟶ G) [inst_2 : HomologicalComplex.HasHomotopyCofiber φ] {K : CochainComplex C ℤ}
  {n m : ℤ} (α : CochainComplex.HomComplex.Cochain F K m) (β : CochainComplex.HomComplex.Cochain G K n) (h : m + 1 = n)
  (p₁ p₂ : ℤ) (h₁₂ : p₁ + n = p₂),
  CategoryTheory.CategoryStruct.comp ((CochainComplex.mappingCone.inr φ).f p₁)
      ((CochainComplex.mappingCone.descCochain φ α β h).v p₁ p₂ h₁₂) =
    β.v p₁ p₂ h₁₂
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Cubic.natDegree_of_c_ne_zero : ∀ {R : Type u_1} {P : Cubic R} [inst : Semiring R], P.a = 0 → P.b = 0 → P.c ≠ 0 → P.toPoly.natDegree = 1
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Unitization.norm_splitMul_snd_sq : ∀ (𝕜 : Type u_1) {E : Type u_2} [inst : DenselyNormedField 𝕜] [inst_1 : NonUnitalNormedRing E] [inst_2 : StarRing E]
  [inst_3 : CStarRing E] [inst_4 : NormedSpace 𝕜 E] [inst_5 : IsScalarTower 𝕜 E E] [inst_6 : SMulCommClass 𝕜 E E]
  [inst_7 : StarRing 𝕜] [inst_8 : StarModule 𝕜 E] (x : Unitization 𝕜 E),
  ‖((Unitization.splitMul 𝕜 E) x).2‖ ^ 2 ≤ ‖((Unitization.splitMul 𝕜 E) (star x * x)).2‖
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || LinearMap.BilinForm.linMulLin_compLeft : ∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : _root_.Module R M]
  {f g : M →ₗ[R] R} (l : M →ₗ[R] M),
  (LinearMap.BilinForm.linMulLin f g).compLeft l = LinearMap.BilinForm.linMulLin (f ∘ₗ l) g
Result.exception ::
Duper saturated

Testing || CategoryTheory.MorphismProperty.Comma.mapRight_obj_hom : ∀ {A : Type u_1} [inst : CategoryTheory.Category.{u_4, u_1} A] {B : Type u_2}
  [inst_1 : CategoryTheory.Category.{u_5, u_2} B] {T : Type u_3} [inst_2 : CategoryTheory.Category.{u_6, u_3} T]
  (L : CategoryTheory.Functor A T) {P : CategoryTheory.MorphismProperty T} {Q : CategoryTheory.MorphismProperty A}
  {W : CategoryTheory.MorphismProperty B} [inst_3 : Q.IsMultiplicative] [inst_4 : W.IsMultiplicative]
  {R₁ R₂ : CategoryTheory.Functor B T} (r : R₁ ⟶ R₂)
  (hr :
    ∀ (X : CategoryTheory.MorphismProperty.Comma L R₁ P Q W),
      P (CategoryTheory.CategoryStruct.comp X.hom (r.app X.right)))
  (X : CategoryTheory.MorphismProperty.Comma L R₁ P Q W),
  ((CategoryTheory.MorphismProperty.Comma.mapRight L r hr).obj X).hom =
    CategoryTheory.CategoryStruct.comp X.hom (r.app X.right)
Result.exception ::
Duper saturated

Testing || IsPrimitiveRoot.ne_zero : ∀ {k : ℕ} {M₀ : Type u_7} [inst : CommMonoidWithZero M₀] [inst_1 : Nontrivial M₀] {ζ : M₀},
  IsPrimitiveRoot ζ k → k ≠ 0 → ζ ≠ 0
Result.exception ::
Duper saturated

Testing || _private.Mathlib.Topology.MetricSpace.Gluing.0.Metric.eq_of_glueDist_eq_zero : ∀ {X : Type u} {Y : Type v} {Z : Type w} [inst : MetricSpace X] [inst_1 : MetricSpace Y] (Φ : Z → X) (Ψ : Z → Y)
  (ε : ℝ), 0 < ε → ∀ (p q : X ⊕ Y), Metric.glueDist Φ Ψ ε p q = 0 → p = q
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || WeierstrassCurve.Affine.eval_negPolynomial : ∀ {R : Type u} [inst : CommRing R] (W : WeierstrassCurve.Affine R) (x y : R),
  Polynomial.evalEval x y W.negPolynomial = W.negY x y
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Rat.cast_lt_zero : ∀ {q : ℚ} {K : Type u_5} [inst : LinearOrderedField K], ↑q < 0 ↔ q < 0
Result.exception ::
Duper saturated

Testing || CompositionAsSet.card_boundaries_eq_succ_length : ∀ {n : ℕ} (c : CompositionAsSet n), c.boundaries.card = c.length + 1
Result.exception ::
Duper saturated

Testing || Finset.prod_le_one' : ∀ {ι : Type u_1} {N : Type u_5} [inst : OrderedCommMonoid N] {f : ι → N} {s : Finset ι},
  (∀ i ∈ s, f i ≤ 1) → ∏ i ∈ s, f i ≤ 1
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || SlashInvariantForm.coeHom_injective : ∀ {Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) ℤ)} {k : ℤ}, Function.Injective ⇑SlashInvariantForm.coeHom
Result.exception ::
Duper saturated

Testing || CategoryTheory.StructuredArrow.toUnder_obj_left : ∀ {T : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} T] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  (X : T) (F : CategoryTheory.Functor D T)
  (X_1 : CategoryTheory.Comma (CategoryTheory.Functor.fromPUnit X) (F.comp (CategoryTheory.Functor.id T))),
  ((CategoryTheory.StructuredArrow.toUnder X F).obj X_1).left = X_1.left
Result.success

Testing || ContinuousWithinAt.mono_of_mem_nhdsWithin : ∀ {α : Type u_1} {β : Type u_2} [inst : TopologicalSpace α] [inst_1 : TopologicalSpace β] {f : α → β} {s t : Set α}
  {x : α}, ContinuousWithinAt f t x → t ∈ nhdsWithin x s → ContinuousWithinAt f s x
Result.exception ::
Duper saturated

Testing || AddSubmonoid.closure_singleton_le_iff_mem : ∀ {M : Type u_1} [inst : AddZeroClass M] (m : M) (p : AddSubmonoid M), AddSubmonoid.closure {m} ≤ p ↔ m ∈ p
Result.exception ::
Duper saturated

Testing || Set.biUnion_of_singleton : ∀ {α : Type u_1} (s : Set α), ⋃ x ∈ s, {x} = s
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ULift.down_ratCast : ∀ {α : Type u} [inst : RatCast α] (q : ℚ), (↑q).down = ↑q
Result.exception ::
Duper saturated

Testing || Set.smul_set_eq_empty : ∀ {α : Type u_2} {β : Type u_3} [inst : SMul α β] {s : Set β} {a : α}, a • s = ∅ ↔ s = ∅
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasurableSet.coe_sdiff : ∀ {α : Type u_1} [inst : MeasurableSpace α] (s t : Subtype MeasurableSet), ↑(s \ t) = ↑s \ ↑t
Result.exception ::
Duper saturated

Testing || Matrix.charpoly_fromBlocks_zero₁₂ : ∀ {R : Type u_1} [inst : CommRing R] {m : Type u_3} {n : Type u_4} [inst_1 : DecidableEq m] [inst_2 : DecidableEq n]
  [inst_3 : Fintype m] [inst_4 : Fintype n] (M₁₁ : Matrix m m R) (M₂₁ : Matrix n m R) (M₂₂ : Matrix n n R),
  (Matrix.fromBlocks M₁₁ 0 M₂₁ M₂₂).charpoly = M₁₁.charpoly * M₂₂.charpoly
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.PullbackCone.IsLimit.equivPullbackObj_symm_apply_fst : ∀ {X Y S : Type v} {f : X ⟶ S} {g : Y ⟶ S} {c : CategoryTheory.Limits.PullbackCone f g}
  (hc : CategoryTheory.Limits.IsLimit c) (x : CategoryTheory.Limits.Types.PullbackObj f g),
  c.fst ((CategoryTheory.Limits.PullbackCone.IsLimit.equivPullbackObj hc).symm x) = (↑x).1
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || IsLocalization.isAlgebraic : ∀ {R : Type u} (S : Type u_1) [inst : CommRing R] [inst_1 : CommRing S] [inst_2 : Algebra R S] [inst_3 : Nontrivial R]
  (M : Submonoid R) [inst_4 : IsLocalization M S], Algebra.IsAlgebraic R S
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.addEnergy_eq_sum_sq' : ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Add α] (s t : Finset α),
  s.addEnergy t =
    ∑ a ∈ s + t,
      (Finset.filter
            (fun x =>
              match x with
              | (x, y) => x + y = a)
            (s ×ˢ t)).card ^
        2
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AddMonoidHom.addCommMonoid.proof_1 : ∀ {M : Type u_1} {N : Type u_2} [inst : AddZeroClass M] [inst_1 : AddCommMonoid N] (a b c : M →+ N),
  a + b + c = a + (b + c)
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ContinuousLinearEquiv.symm_trans_apply : ∀ {R₁ : Type u_3} {R₂ : Type u_4} {R₃ : Type u_5} [inst : Semiring R₁] [inst_1 : Semiring R₂] [inst_2 : Semiring R₃]
  {σ₁₂ : R₁ →+* R₂} {σ₂₁ : R₂ →+* R₁} [inst_3 : RingHomInvPair σ₁₂ σ₂₁] [inst_4 : RingHomInvPair σ₂₁ σ₁₂]
  {σ₂₃ : R₂ →+* R₃} {σ₃₂ : R₃ →+* R₂} [inst_5 : RingHomInvPair σ₂₃ σ₃₂] [inst_6 : RingHomInvPair σ₃₂ σ₂₃]
  {σ₁₃ : R₁ →+* R₃} {σ₃₁ : R₃ →+* R₁} [inst_7 : RingHomInvPair σ₁₃ σ₃₁] [inst_8 : RingHomInvPair σ₃₁ σ₁₃]
  [inst_9 : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [inst_10 : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁] {M₁ : Type u_6}
  [inst_11 : TopologicalSpace M₁] [inst_12 : AddCommMonoid M₁] {M₂ : Type u_7} [inst_13 : TopologicalSpace M₂]
  [inst_14 : AddCommMonoid M₂] {M₃ : Type u_8} [inst_15 : TopologicalSpace M₃] [inst_16 : AddCommMonoid M₃]
  [inst_17 : _root_.Module R₁ M₁] [inst_18 : _root_.Module R₂ M₂] [inst_19 : _root_.Module R₃ M₃] (e₁ : M₂ ≃SL[σ₂₁] M₁)
  (e₂ : M₃ ≃SL[σ₃₂] M₂) (c : M₁), (e₂.trans e₁).symm c = e₂.symm (e₁.symm c)
Result.exception ::
Duper saturated

Testing || CategoryTheory.Coverage.eq_top_pullback : ∀ {C : Type u_2} [inst : CategoryTheory.Category.{u_1, u_2} C] {X Y : C} {S T : CategoryTheory.Sieve X},
  S ≤ T → ∀ (f : Y ⟶ X), S.arrows f → CategoryTheory.Sieve.pullback f T = ⊤
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || TopCat.stalkToFiber_injective : ∀ {X : TopCat} {T : ↑X → Type v} (P : TopCat.LocalPredicate T) (x : ↑X),
  (∀ (U V : TopologicalSpace.OpenNhds x) (fU : (y : ↥U.obj) → T ↑y),
      P.pred fU →
        ∀ (fV : (y : ↥V.obj) → T ↑y),
          P.pred fV →
            fU ⟨x, ⋯⟩ = fV ⟨x, ⋯⟩ →
              ∃ W iU iV, ∀ (w : ↥W.obj), fU ((fun x_4 => ⟨↑x_4, ⋯⟩) w) = fV ((fun x_4 => ⟨↑x_4, ⋯⟩) w)) →
    Function.Injective (TopCat.stalkToFiber P x)
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Complex.equivRealProdCLM_symm_apply : ∀ (p : ℝ × ℝ), Complex.equivRealProdCLM.symm p = ↑p.1 + ↑p.2 * Complex.I
Result.exception ::
Duper saturated

Testing || tendstoLocallyUniformlyOn_TFAE : ∀ {α : Type u} {β : Type v} {ι : Type x} [inst : UniformSpace β] {s : Set α} [inst_1 : TopologicalSpace α]
  [inst_2 : LocallyCompactSpace α] (G : ι → α → β) (g : α → β) (p : Filter ι),
  IsOpen s →
    [TendstoLocallyUniformlyOn G g p s, ∀ K ⊆ s, IsCompact K → TendstoUniformlyOn G g p K,
        ∀ x ∈ s, ∃ v ∈ nhdsWithin x s, TendstoUniformlyOn G g p v].TFAE
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || nhdsWithin_Ici_neBot : ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : Preorder α] {a b : α}, a ≤ b → (nhdsWithin b (Set.Ici a)).NeBot
Result.exception ::
Duper saturated

Testing || Multiset.Nat.antidiagonalTuple_zero_right : ∀ (k : ℕ), Multiset.Nat.antidiagonalTuple k 0 = {0}
Result.exception ::
Duper saturated

Testing || Part.instLawfulMonad : LawfulMonad Part
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || List.naturality : ∀ {F G : Type u → Type u} [inst : Applicative F] [inst_1 : Applicative G] [inst_2 : LawfulApplicative G]
  [inst_3 : LawfulApplicative F] (η : ApplicativeTransformation F G) {α : Type u_1} {β : Type u} (f : α → F β)
  (x : List α), (fun {α} => η.app α) (List.traverse f x) = List.traverse ((fun {α} => η.app α) ∘ f) x
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.instIsSplitMonoComp : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y Z : C} {f : X ⟶ Y} {g : Y ⟶ Z}
  [hf : CategoryTheory.IsSplitMono f] [hg : CategoryTheory.IsSplitMono g],
  CategoryTheory.IsSplitMono (CategoryTheory.CategoryStruct.comp f g)
Result.exception ::
Duper saturated

Testing || CategoryTheory.ShortComplex.leftHomologyFunctor_additive : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_2, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  [inst_2 : CategoryTheory.Limits.HasKernels C] [inst_3 : CategoryTheory.Limits.HasCokernels C],
  (CategoryTheory.ShortComplex.leftHomologyFunctor C).Additive
Result.exception ::
Duper saturated

Testing || MvPowerSeries.coeff_eq_zero_of_lt_lexOrder : ∀ {σ : Type u_1} {R : Type u_2} [inst : Semiring R] [inst_1 : LinearOrder σ] [inst_2 : WellFoundedGT σ]
  {φ : MvPowerSeries σ R} {d : σ →₀ ℕ}, ↑(toLex d) < φ.lexOrder → (MvPowerSeries.coeff R d) φ = 0
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ULift.addRightCancelMonoid.proof_1 : ∀ {α : Type u_1}, Function.Injective ⇑Equiv.ulift
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || instHasCountableSeparatingOnIsOpenOfT0SpaceOfSecondCountableTopologyElem : ∀ {X : Type u_1} [inst : TopologicalSpace X] {s : Set X} [inst_1 : T0Space ↑s] [inst_2 : SecondCountableTopology ↑s],
  HasCountableSeparatingOn X IsOpen s
Result.exception ::
(deterministic) timeout at `fluidSup`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Functor.lanCompColimIso_hom_app : ∀ {C : Type u_1} {D : Type u_2} [inst : CategoryTheory.Category.{u_4, u_1} C]
  [inst_1 : CategoryTheory.Category.{u_5, u_2} D] (L : CategoryTheory.Functor C D) {H : Type u_3}
  [inst_2 : CategoryTheory.Category.{u_6, u_3} H] [inst_3 : ∀ (F : CategoryTheory.Functor C H), L.HasLeftKanExtension F]
  [inst_4 : CategoryTheory.Limits.HasColimitsOfShape C H] [inst_5 : CategoryTheory.Limits.HasColimitsOfShape D H]
  (X : CategoryTheory.Functor C H),
  L.lanCompColimIso.hom.app X = ((L.lan.obj X).colimitIsoOfIsLeftKanExtension (L.lanUnit.app X)).hom
Result.exception ::
Duper saturated

Testing || MeasureTheory.exists_upperSemicontinuous_le_integral_le : ∀ {α : Type u_1} [inst : TopologicalSpace α] [inst_1 : MeasurableSpace α] [inst_2 : BorelSpace α]
  {μ : MeasureTheory.Measure α} [inst_3 : μ.WeaklyRegular] (f : α → NNReal),
  MeasureTheory.Integrable (fun x => ↑(f x)) μ →
    ∀ {ε : ℝ},
      0 < ε →
        ∃ g,
          (∀ (x : α), g x ≤ f x) ∧
            UpperSemicontinuous g ∧
              MeasureTheory.Integrable (fun x => ↑(g x)) μ ∧ ∫ (x : α), ↑(f x) ∂μ - ε ≤ ∫ (x : α), ↑(g x) ∂μ
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || pathConnectedSpace_iff_univ : ∀ {X : Type u_1} [inst : TopologicalSpace X], PathConnectedSpace X ↔ IsPathConnected Set.univ
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Ordinal.derivFamily_isNormal : ∀ {ι : Type u_1} [inst : Small.{u, u_1} ι] (f : ι → Ordinal.{u} → Ordinal.{u}), Ordinal.IsNormal (Ordinal.derivFamily f)
Result.success

Testing || CochainComplex.mappingCone.inr_f_d : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Preadditive C]
  {F G : CochainComplex C ℤ} (φ : F ⟶ G) [inst_2 : HomologicalComplex.HasHomotopyCofiber φ] (n₁ n₂ : ℤ),
  CategoryTheory.CategoryStruct.comp ((CochainComplex.mappingCone.inr φ).f n₁)
      ((CochainComplex.mappingCone φ).d n₁ n₂) =
    CategoryTheory.CategoryStruct.comp (G.d n₁ n₂) ((CochainComplex.mappingCone.inr φ).f n₂)
Result.exception ::
Duper saturated

Testing || AddMonoidHom.isCentralScalar : ∀ {R : Type u_1} {A : Type u_4} {B : Type u_5} [inst : Monoid R] [inst_1 : AddMonoid A] [inst_2 : AddCommMonoid B]
  [inst_3 : DistribMulAction R B] [inst_4 : DistribMulAction Rᵐᵒᵖ B] [inst_5 : IsCentralScalar R B],
  IsCentralScalar R (A →+ B)
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.prod_preservesConnectedLimits : ∀ {C : Type u₂} [inst : CategoryTheory.Category.{v₂, u₂} C] [inst_1 : CategoryTheory.Limits.HasBinaryProducts C]
  {J : Type v₂} [inst_2 : CategoryTheory.SmallCategory J] [inst_3 : CategoryTheory.IsConnected J] (X : C),
  CategoryTheory.Limits.PreservesLimitsOfShape J (CategoryTheory.Limits.prod.functor.obj X)
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.reflectsLimit_of_reflectsIsomorphisms : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {D : Type u₂} [inst_1 : CategoryTheory.Category.{v₂, u₂} D]
  {J : Type w} [inst_2 : CategoryTheory.Category.{w', w} J] (F : CategoryTheory.Functor J C)
  (G : CategoryTheory.Functor C D) [inst_3 : G.ReflectsIsomorphisms] [inst_4 : CategoryTheory.Limits.HasLimit F]
  [inst_5 : CategoryTheory.Limits.PreservesLimit F G], CategoryTheory.Limits.ReflectsLimit F G
Result.exception ::
Duper saturated

Testing || BialgHom.coe_coe : ∀ {R : Type u_1} {A : Type u_2} {B : Type u_3} [inst : CommSemiring R] [inst_1 : Semiring A] [inst_2 : Algebra R A]
  [inst_3 : Semiring B] [inst_4 : Algebra R B] [inst_5 : CoalgebraStruct R A] [inst_6 : CoalgebraStruct R B]
  {F : Type u_6} [inst_7 : FunLike F A B] [inst_8 : BialgHomClass F R A B] (f : F), ⇑↑f = ⇑f
Result.exception ::
Duper saturated

Testing || Int.div_def : ∀ (a b : ℤ), a / b = a.ediv b
Result.exception ::
Duper saturated

Testing || Subgroup.center.smulCommClass_left : ∀ {G : Type u_1} [inst : Group G], SMulCommClass (↥(Subgroup.center G)) G G
Result.exception ::
Duper saturated

Testing || Matrix.SpecialLinearGroup.coe_mul : ∀ {n : Type u} [inst : DecidableEq n] [inst_1 : Fintype n] {R : Type v} [inst_2 : CommRing R]
  (A B : Matrix.SpecialLinearGroup n R), ↑(A * B) = ↑A * ↑B
Result.exception ::
Duper saturated

Testing || IsMinFilter.undual : ∀ {α : Type u} {β : Type v} [inst : Preorder β] {f : α → β} {l : Filter α} {a : α},
  IsMinFilter (⇑OrderDual.toDual ∘ f) l a → IsMaxFilter f l a
Result.exception ::
Duper saturated

Testing || Batteries.TransCmp.cmp_congr_left' : ∀ {x : Sort u_1} {cmp : x → x → Ordering} [inst : Batteries.TransCmp cmp] {x_1 y : x},
  cmp x_1 y = Ordering.eq → cmp x_1 = cmp y
Result.exception ::
Duper saturated

Testing || CategoryTheory.Pi.sum_obj_obj : ∀ {I : Type w₀} (C : I → Type u₁) [inst : (i : I) → CategoryTheory.Category.{v₁, u₁} (C i)] {J : Type w₀}
  {D : J → Type u₁} [inst_1 : (j : J) → CategoryTheory.Category.{v₁, u₁} (D j)] (X : (i : I) → C i) (Y : (j : J) → D j)
  (s : I ⊕ J),
  ((CategoryTheory.Pi.sum C).obj X).obj Y s =
    match s with
    | Sum.inl i => X i
    | Sum.inr j => Y j
Result.exception ::
Duper saturated

Testing || List.eraseP_cons : ∀ {α : Type u_1} {p : α → Bool} (a : α) (l : List α), List.eraseP p (a :: l) = bif p a then l else a :: List.eraseP p l
Result.exception ::
Duper saturated

Testing || Ordinal.sup_add_nat : ∀ (o : Ordinal.{u_1}), (Ordinal.sup fun n => o + ↑n) = o + Ordinal.omega0
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Square.fromArrowArrowFunctor_obj_f₃₄ : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] (f : CategoryTheory.Arrow (CategoryTheory.Arrow C)),
  (CategoryTheory.Square.fromArrowArrowFunctor.obj f).f₃₄ = f.hom.right
Result.exception ::
Duper saturated

Testing || CategoryTheory.Pi.ext : ∀ {I : Type w₀} (C : I → Type u₁) [inst : (i : I) → CategoryTheory.Category.{v₁, u₁} (C i)] {X Y : (i : I) → C i}
  {f g : X ⟶ Y}, (∀ (i : I), f i = g i) → f = g
Result.exception ::
Duper saturated

Testing || AddSubgroup.op.proof_1 : ∀ {G : Type u_1} [inst : AddGroup G] (H : AddSubgroup G) {a b : Gᵃᵒᵖ},
  a ∈ AddOpposite.unop ⁻¹' ↑H → b ∈ AddOpposite.unop ⁻¹' ↑H → AddOpposite.unop b + AddOpposite.unop a ∈ H
Result.exception ::
Duper saturated

Testing || InnerProductGeometry.norm_add_sq_eq_norm_sq_add_norm_sq' : ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] (x y : V),
  InnerProductGeometry.angle x y = Real.pi / 2 → ‖x + y‖ * ‖x + y‖ = ‖x‖ * ‖x‖ + ‖y‖ * ‖y‖
Result.success

Testing || Polynomial.ofFinsupp_nsmul : ∀ {R : Type u} [inst : Semiring R] (a : ℕ) (b : AddMonoidAlgebra R ℕ), { toFinsupp := a • b } = a • { toFinsupp := b }
Result.exception ::
Duper saturated

Testing || Finset.Colex.initSeg_nonempty : ∀ {α : Type u_1} [inst : LinearOrder α] {s : Finset α} [inst_1 : Fintype α], (Finset.Colex.initSeg s).Nonempty
Result.exception ::
Duper saturated

Testing || Choose.choose_modEq_prod_range_choose : ∀ {n k p : ℕ} [inst : Fact (Nat.Prime p)] {a : ℕ},
  n < p ^ a → k < p ^ a → ↑(n.choose k) ≡ ∏ i ∈ Finset.range a, ↑((n / p ^ i % p).choose (k / p ^ i % p)) [ZMOD ↑p]
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasureTheory.VectorMeasure.map_zero : ∀ {α : Type u_1} {β : Type u_2} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β] {M : Type u_3}
  [inst_2 : AddCommMonoid M] [inst_3 : TopologicalSpace M] (f : α → β), MeasureTheory.VectorMeasure.map 0 f = 0
Result.exception ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Matrix.updateCol_submatrix_equiv : ∀ {l : Type u_1} {m : Type u_2} {n : Type u_3} {o : Type u_4} {α : Type v} [inst : DecidableEq o]
  [inst_1 : DecidableEq n] (A : Matrix m n α) (j : o) (c : l → α) (e : l ≃ m) (f : o ≃ n),
  (A.submatrix ⇑e ⇑f).updateCol j c = (A.updateCol (f j) fun i => c (e.symm i)).submatrix ⇑e ⇑f
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.MonoidalCategory.pentagon_inv_hom_hom_hom_hom_assoc : ∀ {C : Type u} [𝒞 : CategoryTheory.Category.{v, u} C] [inst : CategoryTheory.MonoidalCategory C] {W X Y Z Z_1 : C}
  (h :
    CategoryTheory.MonoidalCategory.tensorObj W
        (CategoryTheory.MonoidalCategory.tensorObj X (CategoryTheory.MonoidalCategory.tensorObj Y Z)) ⟶
      Z_1),
  CategoryTheory.CategoryStruct.comp
      (CategoryTheory.MonoidalCategory.whiskerRight (CategoryTheory.MonoidalCategory.associator W X Y).inv Z)
      (CategoryTheory.CategoryStruct.comp
        (CategoryTheory.MonoidalCategory.associator (CategoryTheory.MonoidalCategory.tensorObj W X) Y Z).hom
        (CategoryTheory.CategoryStruct.comp
          (CategoryTheory.MonoidalCategory.associator W X (CategoryTheory.MonoidalCategory.tensorObj Y Z)).hom h)) =
    CategoryTheory.CategoryStruct.comp
      (CategoryTheory.MonoidalCategory.associator W (CategoryTheory.MonoidalCategory.tensorObj X Y) Z).hom
      (CategoryTheory.CategoryStruct.comp
        (CategoryTheory.MonoidalCategory.whiskerLeft W (CategoryTheory.MonoidalCategory.associator X Y Z).hom) h)
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || MeasureTheory.L1.SimpleFunc.coe_posPart : ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} (f : ↥(MeasureTheory.Lp.simpleFunc ℝ 1 μ)),
  ↑(MeasureTheory.L1.SimpleFunc.posPart f) = MeasureTheory.Lp.posPart ↑f
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Multiset.disjoint_union_right : ∀ {α : Type u_1} [inst : DecidableEq α] {s t u : Multiset α}, Disjoint s (t ∪ u) ↔ Disjoint s t ∧ Disjoint s u
Result.exception ::
Duper saturated

Testing || NatOrdinal.toOrdinal_max : ∀ (a b : NatOrdinal), NatOrdinal.toOrdinal (a ⊔ b) = NatOrdinal.toOrdinal a ⊔ NatOrdinal.toOrdinal b
Result.exception ::
Duper saturated

Testing || SimpleGraph.Path.cons_isCycle : ∀ {V : Type u} {G : SimpleGraph V} {u v : V} (p : G.Path v u) (h : G.Adj u v),
  s(u, v) ∉ (↑p).edges → (SimpleGraph.Walk.cons h ↑p).IsCycle
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AddChar.wInner_cWeight_eq_one_iff_eq : ∀ {G : Type u_1} {R : Type u_3} [inst : AddCommGroup G] [inst_1 : RCLike R] {ψ₁ ψ₂ : AddChar G R} [inst_2 : Fintype G],
  RCLike.wInner RCLike.cWeight ⇑ψ₁ ⇑ψ₂ = 1 ↔ ψ₁ = ψ₂
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || min_sub_sub_left : ∀ {α : Type u_1} [inst : LinearOrderedAddCommGroup α] (a b c : α), (a - b) ⊓ (a - c) = a - b ⊔ c
Result.exception ::
Duper saturated

Testing || CategoryTheory.Endofunctor.algebraPreadditive_homGroup_add_f : ∀ (C : Type u₁) [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.Preadditive C]
  (F : CategoryTheory.Functor C C) [inst_2 : F.Additive] (A₁ A₂ : CategoryTheory.Endofunctor.Algebra F) (α β : A₁ ⟶ A₂),
  (α + β).f = α.f + β.f
Result.exception ::
Duper saturated

Testing || AlgebraicGeometry.Scheme.toSpecΓ_naturality_assoc : ∀ {X Y : AlgebraicGeometry.Scheme} (f : X ⟶ Y) {Z : AlgebraicGeometry.Scheme}
  (h : AlgebraicGeometry.Spec (Y.presheaf.obj (Opposite.op ⊤)) ⟶ Z),
  CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.comp Y.toSpecΓ h) =
    CategoryTheory.CategoryStruct.comp X.toSpecΓ
      (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Scheme.Hom.appTop f)) h)
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || DirichletCharacter.LSeries.mul_mu_eq_one : ∀ {N : ℕ} (χ : DirichletCharacter ℂ N) {s : ℂ},
  1 < s.re → LSeries (fun n => χ ↑n) s * LSeries ((fun n => χ ↑n) * fun n => ↑(ArithmeticFunction.moebius n)) s = 1
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || IsPrimitiveRoot.pow_ne_one_of_pos_of_lt : ∀ {M : Type u_1} [inst : CommMonoid M] {k l : ℕ} {ζ : M}, IsPrimitiveRoot ζ k → 0 < l → l < k → ζ ^ l ≠ 1
Result.exception ::
Duper saturated

Testing || tsum_setElem_eq_tsum_setElem_diff : ∀ {α : Type u_1} {β : Type u_2} [inst : AddCommMonoid α] [inst_1 : TopologicalSpace α] {f : β → α} (s t : Set β),
  (∀ b ∈ t, f b = 0) → ∑' (a : ↑s), f ↑a = ∑' (a : ↑(s \ t)), f ↑a
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Set.piMap_image_pi : ∀ {ι : Type u_1} {α : ι → Type u_2} {β : ι → Type u_3} {s : Set ι} {f : (i : ι) → α i → β i},
  (∀ i ∉ s, Function.Surjective (f i)) → ∀ (t : (i : ι) → Set (α i)), Pi.map f '' s.pi t = s.pi fun i => f i '' t i
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || fermatLastTheoremFor_iff_rat : ∀ {n : ℕ}, FermatLastTheoremFor n ↔ FermatLastTheoremWith ℚ n
Result.exception ::
Duper saturated

Testing || MeasureTheory.FinMeasAdditive.smul_measure : ∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {β : Type u_7} [inst : AddCommMonoid β]
  {T : Set α → β} (c : ENNReal), c ≠ 0 → MeasureTheory.FinMeasAdditive μ T → MeasureTheory.FinMeasAdditive (c • μ) T
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Finset.mulETransformRight_snd : ∀ {α : Type u_1} [inst : DecidableEq α] [inst_1 : Group α] (e : α) (x : Finset α × Finset α),
  (Finset.mulETransformRight e x).2 = x.2 ∩ e⁻¹ • x.2
Result.exception ::
Duper saturated

Testing || Associates.eq_pow_of_mul_eq_pow : ∀ {α : Type u_1} [inst : CancelCommMonoidWithZero α] [inst_1 : UniqueFactorizationMonoid α] {a b c : Associates α},
  a ≠ 0 → b ≠ 0 → (∀ (d : Associates α), d ∣ a → d ∣ b → ¬Prime d) → ∀ {k : ℕ}, a * b = c ^ k → ∃ d, a = d ^ k
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Sigma.card_Ioo : ∀ {ι : Type u_1} {α : ι → Type u_2} [inst : DecidableEq ι] [inst_1 : (i : ι) → Preorder (α i)]
  [inst_2 : (i : ι) → LocallyFiniteOrder (α i)] (a b : (i : ι) × α i),
  (Finset.Ioo a b).card = if h : a.fst = b.fst then (Finset.Ioo (h ▸ a.snd) b.snd).card else 0
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.Limits.colimit.ι_coconeMorphism : ∀ {J : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} J] {C : Type u} [inst_1 : CategoryTheory.Category.{v, u} C]
  {F : CategoryTheory.Functor J C} [inst_2 : CategoryTheory.Limits.HasColimit F] (c : CategoryTheory.Limits.Cocone F)
  (j : J),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.colimit.ι F j)
      (CategoryTheory.Limits.colimit.coconeMorphism c).hom =
    c.ι.app j
Result.exception ::
Duper saturated

Testing || Real.continuousOn_logb : ∀ {b : ℝ}, ContinuousOn (Real.logb b) {0}ᶜ
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.Proj.pullbackAwayιIso_inv_snd : ∀ {R : Type u_1} {A : Type u_2} [inst : CommRing R] [inst_1 : CommRing A] [inst_2 : Algebra R A] (𝒜 : ℕ → Submodule R A)
  [inst_3 : GradedAlgebra 𝒜] {f : A} {m : ℕ} (f_deg : f ∈ 𝒜 m) (hm : 0 < m) {m' : ℕ} {g : A} (g_deg : g ∈ 𝒜 m')
  (hm' : 0 < m') {x : A} (hx : x = f * g),
  CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.pullbackAwayιIso 𝒜 f_deg hm g_deg hm' hx).inv
      (CategoryTheory.Limits.pullback.snd (AlgebraicGeometry.Proj.awayι 𝒜 f f_deg hm)
        (AlgebraicGeometry.Proj.awayι 𝒜 g g_deg hm')) =
    AlgebraicGeometry.Spec.map (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 f_deg ⋯))
Result.exception ::
(deterministic) timeout at `unify`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || ProbabilityTheory.IsCondKernelCDF.integral : ∀ {α : Type u_1} {β : Type u_2} {mα : MeasurableSpace α} {mβ : MeasurableSpace β}
  {κ : ProbabilityTheory.Kernel α (β × ℝ)} {ν : ProbabilityTheory.Kernel α β} {f : α × β → StieltjesFunction},
  ProbabilityTheory.IsCondKernelCDF f κ ν →
    ∀ (a : α) (x : ℝ), ∫ (b : β), ↑(f (a, b)) x ∂ν a = ((κ a) (Set.univ ×ˢ Set.Iic x)).toReal
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || BoundedContinuousFunction.integrable_of_nnreal : ∀ {X : Type u_1} [inst : MeasurableSpace X] [inst_1 : TopologicalSpace X] (μ : MeasureTheory.Measure X)
  [inst_2 : MeasureTheory.IsFiniteMeasure μ] [inst_3 : OpensMeasurableSpace X] (f : BoundedContinuousFunction X NNReal),
  MeasureTheory.Integrable (NNReal.toReal ∘ ⇑f) μ
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || AlgebraicGeometry.Scheme.Opens.fromSpecStalkOfMem_ι_assoc : ∀ {X : AlgebraicGeometry.Scheme} (U : X.Opens) (x : ↑↑X.toPresheafedSpace) (hxU : x ∈ U) {Z : AlgebraicGeometry.Scheme}
  (h : X ⟶ Z),
  CategoryTheory.CategoryStruct.comp (U.fromSpecStalkOfMem x hxU) (CategoryTheory.CategoryStruct.comp U.ι h) =
    CategoryTheory.CategoryStruct.comp (X.fromSpecStalk x) h
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || CategoryTheory.wideSubcategoryInclusion.map : ∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] (P : CategoryTheory.MorphismProperty C)
  [inst_1 : P.IsMultiplicative] {X Y : CategoryTheory.WideSubcategory P} {f : X ⟶ Y},
  (CategoryTheory.wideSubcategoryInclusion P).map f = ↑f
Result.exception ::
Duper saturated

Testing || IntervalIntegrable.mono : ∀ {E : Type u_3} [inst : NormedAddCommGroup E] {f : ℝ → E} {a b c d : ℝ} {μ ν : MeasureTheory.Measure ℝ},
  IntervalIntegrable f ν a b → Set.uIcc c d ⊆ Set.uIcc a b → μ ≤ ν → IntervalIntegrable f μ c d
Result.exception ::
Duper saturated

Testing || Cardinal.aleph_max : ∀ (o₁ o₂ : Ordinal.{u_1}), Cardinal.aleph (o₁ ⊔ o₂) = Cardinal.aleph o₁ ⊔ Cardinal.aleph o₂
Result.exception ::
(deterministic) timeout at `isDefEq`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Filter.pure_vadd_pure : ∀ {α : Type u_2} {β : Type u_3} [inst : VAdd α β] {a : α} {b : β}, pure a +ᵥ pure b = pure (a +ᵥ b)
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Equiv.Perm.IsSwap.isCycle : ∀ {α : Type u_2} {f : Equiv.Perm α} [inst : DecidableEq α], f.IsSwap → f.IsCycle
Result.exception ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || legendreSym.at_zero : ∀ (p : ℕ) [inst : Fact (Nat.Prime p)], legendreSym p 0 = 0
Result.exception ::
Duper saturated

Testing || PowerSeries.rescale_mk : ∀ {R : Type u_1} [inst : CommSemiring R] (f : ℕ → R) (a : R),
  (PowerSeries.rescale a) (PowerSeries.mk f) = PowerSeries.mk fun n => a ^ n * f n
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || Tropical.untrop_lt_iff : ∀ {R : Type u} [inst : LT R] {x y : Tropical R}, Tropical.untrop x < Tropical.untrop y ↔ x < y
Result.exception ::
Duper saturated

Testing || Orientation.oangle_add_right_smul_rotation_pi_div_two : ∀ {V : Type u_1} [inst : NormedAddCommGroup V] [inst_1 : InnerProductSpace ℝ V] [hd2 : Fact (Module.finrank ℝ V = 2)]
  (o : Orientation ℝ V (Fin 2)) {x : V},
  x ≠ 0 → ∀ (r : ℝ), o.oangle x (x + r • (o.rotation ↑(Real.pi / 2)) x) = ↑(Real.arctan r)
Result.exception ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)
