Config = {maxHeartbeats := 65536, timeout := 10, solverConfig = native, logFile := evalOut.txt}

Testing || CategoryTheory.Functor.comp_homologySequenceδ : ∀ {C : Type u_1} {A : Type u_3} [inst : CategoryTheory.Category.{u_5, u_1} C] [inst_1 : CategoryTheory.HasShift C ℤ]
  [inst_2 : CategoryTheory.Category.{u_4, u_3} A] (F : CategoryTheory.Functor C A)
  [inst_3 : CategoryTheory.Limits.HasZeroObject C] [inst_4 : CategoryTheory.Preadditive C]
  [inst_5 : ∀ (n : ℤ), (CategoryTheory.shiftFunctor C n).Additive] [inst_6 : CategoryTheory.Pretriangulated C]
  [inst_7 : CategoryTheory.Abelian A] [inst_8 : F.IsHomological] [inst_9 : F.ShiftSequence ℤ],
  ∀ T ∈ CategoryTheory.Pretriangulated.distinguishedTriangles,
    ∀ (n₀ n₁ : ℤ) (h : n₀ + 1 = n₁),
      CategoryTheory.CategoryStruct.comp ((F.shift n₀).map T.mor₂) (F.homologySequenceδ T n₀ n₁ h) = 0
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.mor₂`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || TensorPower.cast_eq_cast : ∀ {R : Type u_1} {M : Type u_2} [inst : CommSemiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {i j : ℕ}
  (h : i = j), ⇑(TensorPower.cast R M h) = cast ⋯
Result.autoException ::
Duper saturated

Testing || MulAut.coe_mul : ∀ (M : Type u_2) [inst : Mul M] (e₁ e₂ : MulAut M), ⇑(e₁ * e₂) = ⇑e₁ ∘ ⇑e₂
Result.autoException ::
Duper saturated

Testing || Order.height_le_iff' : ∀ {α : Type u_1} [inst : Preorder α] {a : α} {n : ℕ∞},
  Order.height a ≤ n ↔ ∀ ⦃p : LTSeries α⦄, RelSeries.last p = a → ↑p.length ≤ n
Result.success

Testing || Set.preimage_univ : ∀ {α : Type u_1} {β : Type u_2} {f : α → β}, f ⁻¹' Set.univ = Set.univ
Result.autoException ::
Duper saturated

Testing || isUpperSet_sUnion : ∀ {α : Type u_1} [inst : LE α] {S : Set (Set α)}, (∀ s ∈ S, IsUpperSet s) → IsUpperSet (⋃₀ S)
Result.autoException ::
Duper saturated

Testing || Fin.castSucc_lt_iff_succ_le : ∀ {n : ℕ} {i : Fin n} {j : Fin (n + 1)}, i.castSucc < j ↔ i.succ ≤ j
Result.autoException ::
Duper saturated

Testing || fderivWithin_continuousLinearEquiv_comp : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {G : Type u_4}
  [inst_5 : NormedAddCommGroup G] [inst_6 : NormedSpace 𝕜 G] {G' : Type u_5} [inst_7 : NormedAddCommGroup G']
  [inst_8 : NormedSpace 𝕜 G'] {x : E} {s : Set E} (L : G ≃L[𝕜] G') (f : E → F →L[𝕜] G),
  UniqueDiffWithinAt 𝕜 s x →
    fderivWithin 𝕜 (fun x => (↑L).comp (f x)) s x =
      (↑((ContinuousLinearEquiv.refl 𝕜 F).arrowCongr L)).comp (fderivWithin 𝕜 f s x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)

Testing || NumberField.mixedEmbedding.neg_of_mem_negA_plusPart : ∀ {K : Type u_1} [inst : Field K] {s : Set { w // w.IsReal }} (A : Set (NumberField.mixedEmbedding.mixedSpace K))
  {x : NumberField.mixedEmbedding.mixedSpace K},
  x ∈ ⇑(NumberField.mixedEmbedding.negAt s) '' NumberField.mixedEmbedding.plusPart A →
    ∀ {w : { w // w.IsReal }}, w ∈ s → x.1 w < 0
Result.autoException ::
Duper saturated

Testing || Nat.nth_of_card_le : ∀ {p : ℕ → Prop} (hf : (setOf p).Finite) {n : ℕ}, hf.toFinset.card ≤ n → Nat.nth p n = 0
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `Classical.propDecidable
  (cifvar_0 (cifvar_1 x_0))`.
This is because it contains free variables and has subtermscle], ¬f.SameCycle x y → (f.cycleOf x) y = y
Result.autoException ::
Duper saturated

Testing || hasDerivAt_abs_pos : ∀ {x : ℝ}, 0 < x → HasDerivAt (fun x => |x|) 1 x
Result.success

Testing || ZMod.neg_eq_self_iff : ∀ {n : ℕ} (a : ZMod n), -a = a ↔ a = 0 ∨ 2 * a.val = n
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `ZMod.commRing x_1`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || Filter.smul_filter.instNeBot : ∀ {α : Type u_2} {β : Type u_3} [inst : SMul α β] {f : Filter β} {a : α} [inst_1 : f.NeBot], (a • f).NeBot
Result.autoException ::
Duper saturated

Testing || Filter.subtractionMonoid.proof_3 : ∀ {α : Type u_1} [inst : SubtractionMonoid α] (n : ℕ) (a : Filter α), zsmulRec (↑n.succ) a = zsmulRec (↑n.succ) a
Result.success

Testing || sSupHom.id_apply : ∀ {α : Type u_2} [inst : SupSet α] (a : α), (sSupHom.id α) a = a
Result.autoException ::
Duper saturated

Testing || Bool.sizeOf_eq_one : ∀ (b : Bool), sizeOf b = 1
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || HasSubset.Subset.le : ∀ {α : Type u} {s t : Set α}, s ⊆ t → s ≤ t
Result.autoException ::
Duper saturated

Testing || Std.Tactic.BVDecide.BVExpr.bitblast.blastConst.go_get_aux : ∀ {α : Type} [inst : Hashable α] [inst_1 : DecidableEq α] {w : ℕ} (aig : Std.Sat.AIG α) (c : BitVec w) (curr : ℕ)
  (hcurr : curr ≤ w) (s : aig.RefVec curr) (idx : ℕ) (hidx : idx < curr)
  (hfoo : aig.decls.size ≤ (Std.Tactic.BVDecide.BVExpr.bitblast.blastConst.go aig c curr s hcurr).aig.decls.size),
  (Std.Tactic.BVDecide.BVExpr.bitblast.blastConst.go aig c curr s hcurr).vec.get idx ⋯ = (s.get idx hidx).cast hfoo
Result.autoException ::
Auto.Lemma.rewriteUMonoRigid? :: Motive fun _a =>
  ¬(Std.Tactic.BVDecide.BVExpr.bitblast.blastConst.go aig c curr s hcurr).vec.get idx ⋯ =
      (s.get idx hidx).cast hfoo is not type correct

Testing || RCLike.I_mul_I : ∀ {K : Type u_1} [inst : RCLike K], RCLike.I = 0 ∨ RCLike.I * RCLike.I = -1
Result.success

Testing || Set.mem_vaddAntidiagonal : ∀ {G : Type u_1} {P : Type u_2} [inst : VAdd G P] {s : Set G} {t : Set P} {a : P} {x : G × P},
  x ∈ s.vaddAntidiagonal t a ↔ x.1 ∈ s ∧ x.2 ∈ t ∧ x.1 +ᵥ x.2 = a
Result.autoException ::
Duper saturated

Testing || AffineIsometryEquiv.surjective : ∀ {𝕜 : Type u_1} {V : Type u_2} {V₂ : Type u_5} {P : Type u_10} {P₂ : Type u_11} [inst : NormedField 𝕜]
  [inst_1 : SeminormedAddCommGroup V] [inst_2 : NormedSpace 𝕜 V] [inst_3 : PseudoMetricSpace P]
  [inst_4 : NormedAddTorsor V P] [inst_5 : SeminormedAddCommGroup V₂] [inst_6 : NormedSpace 𝕜 V₂]
  [inst_7 : PseudoMetricSpace P₂] [inst_8 : NormedAddTorsor V₂ P₂] (e : P ≃ᵃⁱ[𝕜] P₂), Function.Surjective ⇑e
Result.autoException ::
Duper saturated

Testing || HahnSeries.iterateEquiv_apply : ∀ {Γ : Type u_1} {Γ' : Type u_2} {R : Type u_3} [inst : PartialOrder Γ] [inst_1 : Zero R] [inst_2 : PartialOrder Γ']
  (x : HahnSeries Γ (HahnSeries Γ' R)), HahnSeries.iterateEquiv x = x.ofIterate
Result.autoException ::
Duper saturated

Testing || UInt32.le_trans : ∀ {a b c : UInt32}, a ≤ b → b ≤ c → a ≤ c
Result.autoException ::
Duper saturated

Testing || ltTrichotomy_comm : ∀ {α : Type u_2} [inst : LinearOrder α] {P : Sort u_5} {x y : α} {p q r : P},
  ltTrichotomy x y p q r = ltTrichotomy y x r q p
Result.autoException ::
Duper saturated

Testing || Function.Injective.bijective_of_finite : ∀ {α : Type u_1} [inst : Finite α] {f : α → α}, Function.Injective f → Function.Bijective f
Result.autoException ::
Duper saturated

Testing || extChartAt_coe_symm : ∀ {𝕜 : Type u_1} {E : Type u_2} {M : Type u_3} {H : Type u_4} [inst : NontriviallyNormedField 𝕜]
  [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace 𝕜 E] [inst_3 : TopologicalSpace H] [inst_4 : TopologicalSpace M]
  {I : ModelWithCorners 𝕜 E H} [inst_5 : ChartedSpace H M] (x : M),
  ↑(extChartAt I x).symm = ↑(chartAt H x).symm ∘ ↑I.symm
Result.autoException ::
Duper saturated

Testing || Array.getElem_extract_aux : ∀ {α : Type u_1} {i : ℕ} {as : Array α} {start stop : ℕ}, i < (as.extract start stop).size → start + i < as.size
Result.autoException ::
Duper saturated

Testing || MeasureTheory.Memℒp.eLpNorm_indicator_norm_ge_le : ∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : NormedAddCommGroup β]
  {p : ENNReal} {f : α → β},
  MeasureTheory.Memℒp f p μ →
    MeasureTheory.StronglyMeasurable f →
      ∀ {ε : ℝ}, 0 < ε → ∃ M, MeasureTheory.eLpNorm ({x | M ≤ ↑‖f x‖₊}.indicator f) p μ ≤ ENNReal.ofReal ε
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || isQuotientMap_fst : ∀ {X : Type u} {Y : Type v} [inst : TopologicalSpace X] [inst_1 : TopologicalSpace Y] [inst_2 : Nonempty Y],
  IsQuotientMap Prod.fst
Result.success

Testing || Real.sSup_nonpos : ∀ {s : Set ℝ}, (∀ x ∈ s, x ≤ 0) → sSup s ≤ 0
Result.success

Testing || Monotone.map_sInf_of_continuousAt : ∀ {α : Type u_1} {β : Type u_2} [inst : CompleteLinearOrder α] [inst_1 : TopologicalSpace α] [inst_2 : OrderTopology α]
  [inst_3 : CompleteLinearOrder β] [inst_4 : TopologicalSpace β] [inst_5 : OrderClosedTopology β] {f : α → β}
  {s : Set α}, ContinuousAt f (sInf s) → Monotone f → f ⊤ = ⊤ → f (sInf s) = sInf (f '' s)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || BitVec.shiftLeftZeroExtend_eq : ∀ {w n : ℕ} {x : BitVec w}, x.shiftLeftZeroExtend n = BitVec.setWidth (w + n) x <<< n
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `BitVec.shiftLeftZeroExtend.proof_2
  x_0 cifvar_6`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || ContinuousAlternatingMap.piEquiv_apply : ∀ {R : Type u_1} {M : Type u_2} {ι : Type u_6} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]
  [inst_3 : TopologicalSpace M] {ι' : Type u_7} {N : ι' → Type u_8} [inst_4 : (i : ι') → AddCommMonoid (N i)]
  [inst_5 : (i : ι') → TopologicalSpace (N i)] [inst_6 : (i : ι') → Module R (N i)] (f : (i : ι') → M [⋀^ι]→L[R] N i),
  ContinuousAlternatingMap.piEquiv f = ContinuousAlternatingMap.pi f
Result.autoException ::
Duper saturated

Testing || Topology.WithUpperSet.toUpperSet_le_iff : ∀ {α : Type u_1} [inst : Preorder α] {a b : α},
  Topology.WithUpperSet.toUpperSet a ≤ Topology.WithUpperSet.toUpperSet b ↔ a ≤ b
Result.autoException ::
Duper saturated

Testing || finite_of_fin_dim_affineIndependent : ∀ (k : Type u_1) {V : Type u_2} {P : Type u_3} {ι : Type u_4} [inst : DivisionRing k] [inst_1 : AddCommGroup V]
  [inst_2 : Module k V] [inst_3 : AddTorsor V P] [inst_4 : FiniteDimensional k V] {p : ι → P},
  AffineIndependent k p → Finite ι
Result.autoException ::
Auto.Monomorphization.FVarRep.replacePolyWithFVar :: Type { x // ¬x = x_1 } of λ binder contains bound variables

Testing || MeasureTheory.Measure.haar.prehaar_sup_le : ∀ {G : Type u_1} [inst : Group G] [inst_1 : TopologicalSpace G] [inst_2 : TopologicalGroup G]
  {K₀ : TopologicalSpace.PositiveCompacts G} {U : Set G} (K₁ K₂ : TopologicalSpace.Compacts G),
  (interior U).Nonempty →
    MeasureTheory.Measure.haar.prehaar (↑K₀) U (K₁ ⊔ K₂) ≤
      MeasureTheory.Measure.haar.prehaar (↑K₀) U K₁ + MeasureTheory.Measure.haar.prehaar (↑K₀) U K₂
Result.autoException ::
Duper saturated

Testing || Filter.Tendsto.prod_atBot : ∀ {α : Type u_3} {γ : Type u_5} [inst : Preorder α] [inst_1 : Preorder γ] {f g : α → γ},
  Filter.Tendsto f Filter.atBot Filter.atBot →
    Filter.Tendsto g Filter.atBot Filter.atBot → Filter.Tendsto (Prod.map f g) Filter.atBot Filter.atBot
Result.success

Testing || StrictMono.strictMono_iterate_of_lt_map : ∀ {α : Type u_1} [inst : Preorder α] {f : α → α} {x : α}, StrictMono f → x < f x → StrictMono fun n => f^[n] x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || LucasLehmer.sMod_lt : ∀ (p : ℕ), p ≠ 0 → ∀ (i : ℕ), LucasLehmer.sMod p i < 2 ^ p - 1
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || LinearIsometryEquiv.measurePreserving : ∀ {E : Type u_2} {F : Type u_3} [inst : NormedAddCommGroup F] [inst_1 : InnerProductSpace ℝ F]
  [inst_2 : NormedAddCommGroup E] [inst_3 : InnerProductSpace ℝ E] [inst_4 : MeasurableSpace E] [inst_5 : BorelSpace E]
  [inst_6 : MeasurableSpace F] [inst_7 : BorelSpace F] [inst_8 : FiniteDimensional ℝ E] [inst_9 : FiniteDimensional ℝ F]
  (f : E ≃ₗᵢ[ℝ] F), MeasureTheory.MeasurePreserving (⇑f) MeasureTheory.volume MeasureTheory.volume
Result.autoException ::
Duper saturated

Testing || exists_nat_one_div_lt : ∀ {α : Type u_1} [inst : LinearOrderedSemifield α] [inst_1 : Archimedean α] {ε : α}, 0 < ε → ∃ n, 1 / (↑n + 1) < ε
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || NormedSpace.exp_ℝ_ℂ_eq_exp_ℂ_ℂ : NormedSpace.exp ℝ = NormedSpace.exp ℂ
Result.success

Testing || HomologicalComplex.mapBifunctor.d_eq : ∀ {C₁ : Type u_1} {C₂ : Type u_2} {D : Type u_3} [inst : CategoryTheory.Category.{u_8, u_1} C₁]
  [inst_1 : CategoryTheory.Category.{u_9, u_2} C₂] [inst_2 : CategoryTheory.Category.{u_7, u_3} D] {I₁ : Type u_4}
  {I₂ : Type u_5} {J : Type u_6} {c₁ : ComplexShape I₁} {c₂ : ComplexShape I₂}
  [inst_3 : CategoryTheory.Limits.HasZeroMorphisms C₁] [inst_4 : CategoryTheory.Limits.HasZeroMorphisms C₂]
  [inst_5 : CategoryTheory.Preadditive D] (K₁ : HomologicalComplex C₁ c₁) (K₂ : HomologicalComplex C₂ c₂)
  (F : CategoryTheory.Functor C₁ (CategoryTheory.Functor C₂ D)) [inst_6 : F.PreservesZeroMorphisms]
  [inst_7 : ∀ (X₁ : C₁), (F.obj X₁).PreservesZeroMorphisms] (c : ComplexShape J) [inst_8 : TotalComplexShape c₁ c₂ c]
  [inst_9 : K₁.HasMapBifunctor K₂ F c] [inst_10 : DecidableEq J] (j j' : J),
  (K₁.mapBifunctor K₂ F c).d j j' =
    HomologicalComplex.mapBifunctor.D₁ K₁ K₂ F c j j' + HomologicalComplex.mapBifunctor.D₂ K₁ K₂ F c j j'
Result.autoException ::
Auto.Monomorphization.ConstInst.ofExpr? :: CategoryTheory.GradedObject (I₁ × I₂) D is not a `∀`

Testing || add_ciSup : ∀ {ι : Type u_1} {G : Type u_2} [inst : AddGroup G] [inst_1 : ConditionallyCompleteLattice G] [inst_2 : Nonempty ι]
  {f : ι → G} [inst_3 : AddLeftMono G], BddAbove (Set.range f) → ∀ (a : G), a + ⨆ i, f i = ⨆ i, a + f i
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ContDiffOn.fderiv_of_isOpen : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}
  {f : E → F} {m n : ℕ∞}, ContDiffOn 𝕜 n f s → IsOpen s → m + 1 ≤ n → ContDiffOn 𝕜 m (fun y => fderiv 𝕜 f y) s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || PrimrecPred.and : ∀ {α : Type u_1} [inst : Primcodable α] {p q : α → Prop} [inst_1 : DecidablePred p] [inst_2 : DecidablePred q],
  PrimrecPred p → PrimrecPred q → PrimrecPred fun a => p a ∧ q a
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || List.get_insertIdx_add_succ : ∀ {α : Type u} (l : List α) (x : α) (n k : ℕ) (hk' : n + k < l.length)
  (hk : optParam (n + k + 1 < (List.insertIdx n x l).length) ⋯),
  (List.insertIdx n x l).get ⟨n + k + 1, hk⟩ = l.get ⟨n + k, hk'⟩
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || measurableEmbedding_prod_mk_left : ∀ {α : Type u_1} {β : Type u_2} [inst : MeasurableSpace α] [inst_1 : MeasurableSpace β]
  [inst_2 : MeasurableSingletonClass α] (x : α), MeasurableEmbedding (Prod.mk x)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || vadd_iterate_apply : ∀ {G : Type u_2} {H : Type u_3} [inst : AddMonoid G] (a : G) (n : ℕ) [inst_1 : AddAction G H] {b : H},
  (fun x => a +ᵥ x)^[n] b = n • a +ᵥ b
Result.success

Testing || Finset.sym2_mono : ∀ {α : Type u_1} {s t : Finset α}, s ⊆ t → s.sym2 ⊆ t.sym2
Result.success

Testing || mem_upperBounds : ∀ {α : Type u} [inst : Preorder α] {s : Set α} {a : α}, a ∈ upperBounds s ↔ ∀ x ∈ s, x ≤ a
Result.autoException ::
Duper saturated

Testing || Auto.Embedding.Lam.BVLems.shl_equiv' : ∀ {n : ℕ} (a : BitVec n) (b : ℕ),
  a <<< b = (Auto.Bool.ite' (b < n) { down := a <<< BitVec.ofNat n b } { down := 0 }).down
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || BitVec.not_ofBool : ∀ {b : Bool}, ~~~BitVec.ofBool b = BitVec.ofBool !b
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.HasFiniteIntegral.congr : ∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : NormedAddCommGroup β]
  {f g : α → β}, MeasureTheory.HasFiniteIntegral f μ → f =ᵐ[μ] g → MeasureTheory.HasFiniteIntegral g μ
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || WeierstrassCurve.Jacobian.add_of_not_equiv : ∀ {R : Type u} {W' : WeierstrassCurve.Jacobian R} [inst : CommRing R] {P Q : Fin 3 → R},
  ¬P ≈ Q → W'.add P Q = W'.addXYZ P Q
Result.autoException ::
Duper saturated

Testing || ContinuousLinearEquiv.isClosed_image : ∀ {R₁ : Type u_1} {R₂ : Type u_2} [inst : Semiring R₁] [inst_1 : Semiring R₂] {σ₁₂ : R₁ →+* R₂} {σ₂₁ : R₂ →+* R₁}
  [inst_2 : RingHomInvPair σ₁₂ σ₂₁] [inst_3 : RingHomInvPair σ₂₁ σ₁₂] {M₁ : Type u_4} [inst_4 : TopologicalSpace M₁]
  [inst_5 : AddCommMonoid M₁] {M₂ : Type u_5} [inst_6 : TopologicalSpace M₂] [inst_7 : AddCommMonoid M₂]
  [inst_8 : Module R₁ M₁] [inst_9 : Module R₂ M₂] (e : M₁ ≃SL[σ₁₂] M₂) {s : Set M₁}, IsClosed (⇑e '' s) ↔ IsClosed s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Polynomial.eval₂_pow' : ∀ {R : Type u} {S : Type v} [inst : CommSemiring R] [inst_1 : Semiring S] [inst_2 : Algebra R S] (x : S)
  (p : Polynomial R) (n : ℕ), Polynomial.eval₂ (algebraMap R S) x (p ^ n) = Polynomial.eval₂ (algebraMap R S) x p ^ n
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ArithmeticFunction.LSeries_mul' : ∀ {f g : ArithmeticFunction ℂ} {s : ℂ},
  LSeriesSummable (fun n => f n) s →
    LSeriesSummable (fun n => g n) s →
      LSeries (fun n => (f * g) n) s = LSeries (fun n => f n) s * LSeries (fun n => g n) s
Result.autoException ::
Duper saturated

Testing || MeasureTheory.SimpleFunc.setToSimpleFunc_add_left' : ∀ {α : Type u_1} {E : Type u_2} {F : Type u_3} [inst : NormedAddCommGroup E] [inst_1 : NormedSpace ℝ E]
  [inst_2 : NormedAddCommGroup F] [inst_3 : NormedSpace ℝ F] {m : MeasurableSpace α} {μ : MeasureTheory.Measure α}
  (T T' T'' : Set α → E →L[ℝ] F),
  (∀ (s : Set α), MeasurableSet s → μ s < ⊤ → T'' s = T s + T' s) →
    ∀ {f : MeasureTheory.SimpleFunc α E},
      MeasureTheory.Integrable (⇑f) μ →
        MeasureTheory.SimpleFunc.setToSimpleFunc T'' f =
          MeasureTheory.SimpleFunc.setToSimpleFunc T f + MeasureTheory.SimpleFunc.setToSimpleFunc T' f
Result.autoException ::
Duper saturated

Testing || Filter.Tendsto.div : ∀ {α : Type u_1} {G₀ : Type u_3} [inst : GroupWithZero G₀] [inst_1 : TopologicalSpace G₀]
  [inst_2 : HasContinuousInv₀ G₀] [inst_3 : ContinuousMul G₀] {f g : α → G₀} {l : Filter α} {a b : G₀},
  Filter.Tendsto f l (nhds a) → Filter.Tendsto g l (nhds b) → b ≠ 0 → Filter.Tendsto (f / g) l (nhds (a / b))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Rat.MulRingNorm.mulRingNorm_equiv_standard_of_unbounded : ∀ {f : MulRingNorm ℚ}, (¬∀ (n : ℕ), f ↑n ≤ 1) → f.equiv Rat.MulRingNorm.mulRingNorm_real
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || IsWellFounded.wf : ∀ {α : Type u} {r : α → α → Prop} [self : IsWellFounded α r], WellFounded r
Result.autoException ::
Duper saturated

Testing || Matrix.linfty_opNorm_mul : ∀ {l : Type u_2} {m : Type u_3} {n : Type u_4} {α : Type u_5} [inst : Fintype l] [inst_1 : Fintype m]
  [inst_2 : Fintype n] [inst_3 : NonUnitalSeminormedRing α] (A : Matrix l m α) (B : Matrix m n α), ‖A * B‖ ≤ ‖A‖ * ‖B‖
Result.autoException ::
Duper saturated

Testing || AddMonoidHom.ofInjective.proof_4 : ∀ {G : Type u_1} [inst : AddGroup G] {N : Type u_2} [inst_1 : AddGroup N] {f : G →+ N},
  Function.Injective ⇑f → Function.Injective ⇑(f.codRestrict f.range ⋯) ∧ Function.Surjective ⇑(f.codRestrict f.range ⋯)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `rfl`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || AlternatingMap.domDomCongr_smul : ∀ {R : Type u_1} [inst : Semiring R] {M : Type u_2} [inst_1 : AddCommMonoid M] [inst_2 : Module R M] {N : Type u_3}
  [inst_3 : AddCommMonoid N] [inst_4 : Module R N] {ι : Type u_7} {ι' : Type u_8} {S : Type u_12} [inst_5 : Monoid S]
  [inst_6 : DistribMulAction S N] [inst_7 : SMulCommClass R S N] (σ : ι ≃ ι') (c : S) (f : M [⋀^ι]→ₗ[R] N),
  AlternatingMap.domDomCongr σ (c • f) = c • AlternatingMap.domDomCongr σ f
Result.autoException ::
Duper saturated

Testing || Finset.sum_equiv : ∀ {ι : Type u_6} {κ : Type u_7} {α : Type u_8} [inst : AddCommMonoid α] {s : Finset ι} {t : Finset κ} {f : ι → α}
  {g : κ → α} (e : ι ≃ κ), (∀ (i : ι), i ∈ s ↔ e i ∈ t) → (∀ i ∈ s, f i = g (e i)) → ∑ i ∈ s, f i = ∑ i ∈ t, g i
Result.autoException ::
(deterministic) timeout at `superposition`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.Comma.coneOfPreserves_π_app_left : ∀ {J : Type w} [inst : CategoryTheory.Category.{w', w} J] {A : Type u₁} [inst_1 : CategoryTheory.Category.{v₁, u₁} A]
  {B : Type u₂} [inst_2 : CategoryTheory.Category.{v₂, u₂} B] {T : Type u₃}
  [inst_3 : CategoryTheory.Category.{v₃, u₃} T] {L : CategoryTheory.Functor A T} {R : CategoryTheory.Functor B T}
  (F : CategoryTheory.Functor J (CategoryTheory.Comma L R))
  [inst_4 : CategoryTheory.Limits.PreservesLimit (F.comp (CategoryTheory.Comma.snd L R)) R]
  (c₁ : CategoryTheory.Limits.Cone (F.comp (CategoryTheory.Comma.fst L R)))
  {c₂ : CategoryTheory.Limits.Cone (F.comp (CategoryTheory.Comma.snd L R))} (t₂ : CategoryTheory.Limits.IsLimit c₂)
  (j : J), ((CategoryTheory.Comma.coneOfPreserves F c₁ t₂).π.app j).left = c₁.π.app j
Result.autoException ::
Duper saturated

Testing || Rel.image_eq_dom_of_codomain_subset : ∀ {α : Type u_1} {β : Type u_2} (r : Rel α β) {s : Set β}, r.codom ⊆ s → r.preimage s = r.dom
Result.autoException ::
Auto.LamReif.reifTermCheckType :: LamTerm (∀ x0 : #1, (∀ x1 : #4, (∀ x2 : #0, ((!11 (!4 x0 x2) x1) = (∃ x3 : #5, ((!12 x2 x3) ∧ (x0 x1 x3))))))) is not type correct

Testing || CategoryTheory.IsConnected.of_induct : ∀ {J : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} J] {j₀ : J},
  (∀ (p : Set J), j₀ ∈ p → (∀ {j₁ j₂ : J}, (j₁ ⟶ j₂) → (j₁ ∈ p ↔ j₂ ∈ p)) → ∀ (j : J), j ∈ p) →
    CategoryTheory.IsConnected J
Result.autoException ::
Duper saturated

Testing || IsCompl.symmDiff_eq_top : ∀ {α : Type u_2} [inst : CoheytingAlgebra α] {a b : α}, IsCompl a b → symmDiff a b = ⊤
Result.success

Testing || List.any_toArray : ∀ {α : Type u_1} (p : α → Bool) (l : List α), l.toArray.any p = l.any p
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_1.any x_0 cifvar_4
  (cifvar_5 (cifvar_8 x_1))`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || Polynomial.C_mul_dvd : ∀ {R : Type u} {a : R} [inst : Field R] {p q : Polynomial R}, a ≠ 0 → (Polynomial.C a * p ∣ q ↔ p ∣ q)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Complex.cpow_inv_two_im_eq_neg_sqrt : ∀ {x : ℂ}, x.im < 0 → (x ^ 2⁻¹).im = -√((Complex.abs x - x.re) / 2)
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || ProbabilityTheory.Kernel.indepFun_zero_left : ∀ {α : Type u_1} {Ω : Type u_2} {_mα : MeasurableSpace α} {_mΩ : MeasurableSpace Ω} {μ : MeasureTheory.Measure α}
  {β : Type u_5} {γ : Type u_6} [inst : MeasurableSpace β] [inst_1 : MeasurableSpace γ] {f : Ω → β} {g : Ω → γ},
  ProbabilityTheory.Kernel.IndepFun f g 0 μ
Result.autoException ::
Duper saturated

Testing || MvPolynomial.support_finSuccEquiv_nonempty : ∀ {R : Type u} [inst : CommSemiring R] {n : ℕ} {f : MvPolynomial (Fin (n + 1)) R},
  f ≠ 0 → ((MvPolynomial.finSuccEquiv R n) f).support.Nonempty
Result.success

Testing || SimpleGraph.Subgraph.edgeSet_subset : ∀ {V : Type u} {G : SimpleGraph V} (G' : G.Subgraph), G'.edgeSet ⊆ G.edgeSet
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || CategoryTheory.eHomFunctor_obj_map : ∀ (V : Type u') [inst : CategoryTheory.Category.{v', u'} V] [inst_1 : CategoryTheory.MonoidalCategory V] (C : Type u)
  [inst_2 : CategoryTheory.Category.{v, u} C] [inst_3 : CategoryTheory.EnrichedOrdinaryCategory V C] (X : Cᵒᵖ)
  {X_1 Y : C} (φ : X_1 ⟶ Y),
  ((CategoryTheory.eHomFunctor V C).obj X).map φ = CategoryTheory.eHomWhiskerLeft V (Opposite.unop X) φ
Result.autoException ::
Duper saturated

Testing || Submodule.eq_zero_of_coe_mem_of_disjoint : ∀ {R : Type u_1} {M : Type u_3} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]
  {p q : Submodule R M}, Disjoint p q → ∀ {a : ↥p}, ↑a ∈ q → a = 0
Result.autoException ::
Duper saturated

Testing || IsLowerSet.exists_subset_ball : ∀ {ι : Type u_2} [inst : Fintype ι] {s : Set (ι → ℝ)} {x : ι → ℝ} {δ : ℝ},
  IsLowerSet s →
    x ∈ closure s →
      0 < δ → ∃ y, Metric.closedBall y (δ / 4) ⊆ Metric.closedBall x δ ∧ Metric.closedBall y (δ / 4) ⊆ interior s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Set.mulIndicator_empty' : ∀ {α : Type u_1} {M : Type u_3} [inst : One M] (f : α → M), ∅.mulIndicator f = 1
Result.autoException ::
Duper saturated

Testing || lt_of_sub_neg : ∀ {α : Type u} [inst : AddGroup α] [inst_1 : LT α] [inst_2 : AddRightStrictMono α] {a b : α}, a - b < 0 → a < b
Result.success

Testing || MeasureTheory.sfiniteSeq_zero : ∀ {α : Type u_1} {m0 : MeasurableSpace α} (n : ℕ), MeasureTheory.sfiniteSeq 0 n = 0
Result.autoException ::
Duper saturated

Testing || Finset.sum_unique_nonempty : ∀ {α : Type u_6} {β : Type u_7} [inst : AddCommMonoid β] [inst_1 : Unique α] (s : Finset α) (f : α → β),
  s.Nonempty → ∑ x ∈ s, f x = f default
Result.success

Testing || Ordinal.type_nat_lt : (Ordinal.type fun x1 x2 => x1 < x2) = Ordinal.omega0
Result.autoException ::
Duper saturated

Testing || Multiset.rel_cons_left : ∀ {α : Type u_1} {β : Type v} {r : α → β → Prop} {a : α} {as : Multiset α} {bs : Multiset β},
  Multiset.Rel r (a ::ₘ as) bs ↔ ∃ b bs', r a b ∧ Multiset.Rel r as bs' ∧ bs = b ::ₘ bs'
Result.autoException ::
(deterministic) timeout at `match`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || bddAbove_range_partialSups : ∀ {α : Type u_1} [inst : SemilatticeSup α] {f : ℕ → α}, BddAbove (Set.range ⇑(partialSups f)) ↔ BddAbove (Set.range f)
Result.autoException ::
Duper saturated

Testing || Filter.tendsto_pure_left : ∀ {α : Type u_1} {β : Type u_2} {f : α → β} {a : α} {l : Filter β}, Filter.Tendsto f (pure a) l ↔ ∀ s ∈ l, f a ∈ s
Result.autoException ::
Duper saturated

Testing || Convex.isPreconnected : ∀ {E : Type u_3} [inst : AddCommGroup E] [inst_1 : Module ℝ E] [inst_2 : TopologicalSpace E]
  [inst_3 : TopologicalAddGroup E] [inst_4 : ContinuousSMul ℝ E] {s : Set E}, Convex ℝ s → IsPreconnected s
Result.success

Testing || Set.range_list_get? : ∀ {α : Type u_1} (l : List α), Set.range l.get? = insert none (some '' {x | x ∈ l})
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.get`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || HasLineDerivAt.lineDeriv : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {F : Type u_2} [inst_1 : NormedAddCommGroup F]
  [inst_2 : NormedSpace 𝕜 F] {E : Type u_3} [inst_3 : AddCommGroup E] [inst_4 : Module 𝕜 E] {f : E → F} {f' : F}
  {x v : E}, HasLineDerivAt 𝕜 f f' x v → lineDeriv 𝕜 f x v = f'
Result.success

Testing || AlgEquiv.autCongr_apply : ∀ {R : Type uR} {A₁ : Type uA₁} {A₂ : Type uA₂} [inst : CommSemiring R] [inst_1 : Semiring A₁] [inst_2 : Semiring A₂]
  [inst_3 : Algebra R A₁] [inst_4 : Algebra R A₂] (ϕ : A₁ ≃ₐ[R] A₂) (ψ : A₁ ≃ₐ[R] A₁),
  ϕ.autCongr ψ = ϕ.symm.trans (ψ.trans ϕ)
Result.autoException ::
Duper saturated

Testing || HasFDerivAt.lim : ∀ {𝕜 : Type u_1} [inst : NontriviallyNormedField 𝕜] {E : Type u_2} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type u_3} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {f : E → F}
  {f' : E →L[𝕜] F} {x : E},
  HasFDerivAt f f' x →
    ∀ (v : E) {α : Type u_6} {c : α → 𝕜} {l : Filter α},
      Filter.Tendsto (fun n => ‖c n‖) l Filter.atTop →
        Filter.Tendsto (fun n => c n • (f (x + (c n)⁻¹ • v) - f x)) l (nhds (f' v))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.integral_eq_zero_of_mul_left_eq_neg : ∀ {G : Type u_4} {E : Type u_5} [inst : MeasurableSpace G] [inst_1 : NormedAddCommGroup E] [inst_2 : NormedSpace ℝ E]
  {μ : MeasureTheory.Measure G} {f : G → E} {g : G} [inst_3 : Group G] [inst_4 : MeasurableMul G]
  [inst_5 : μ.IsMulLeftInvariant], (∀ (x : G), f (g * x) = -f x) → ∫ (x : G), f x ∂μ = 0
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || AddSubmonoid.LocalizationMap.addEquivOfAddEquiv_mk' : ∀ {M : Type u_1} [inst : AddCommMonoid M] {S : AddSubmonoid M} {N : Type u_2} [inst_1 : AddCommMonoid N] {P : Type u_3}
  [inst_2 : AddCommMonoid P] (f : S.LocalizationMap N) {T : AddSubmonoid P} {Q : Type u_4} [inst_3 : AddCommMonoid Q]
  {k : T.LocalizationMap Q} {j : M ≃+ P} (H : AddSubmonoid.map j.toAddMonoidHom S = T) (x : M) (y : ↥S),
  (f.addEquivOfAddEquiv k H) (f.mk' x y) = k.mk' (j x) ⟨j ↑y, ⋯⟩
Result.autoException ::
Duper saturated

Testing || MonoidHom.transferSylow_eq_pow_aux : ∀ {G : Type u_1} [inst : Group G] {p : ℕ} (P : Sylow p G),
  (↑P).normalizer ≤ Subgroup.centralizer ↑P →
    ∀ [inst_1 : Fact (Nat.Prime p)] [inst_2 : Finite (Sylow p G)],
      ∀ g ∈ P, ∀ (k : ℕ) (g₀ : G), g₀⁻¹ * g ^ k * g₀ ∈ P → g₀⁻¹ * g ^ k * g₀ = g ^ k
Result.autoException ::
Duper saturated

Testing || Finset.fold_union_empty_singleton : ∀ {α : Type u_1} [inst : DecidableEq α] (s : Finset α), Finset.fold (fun x1 x2 => x1 ∪ x2) ∅ singleton s = s
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || RingCon.sInf_toSetoid : ∀ {R : Type u_2} [inst : Add R] [inst_1 : Mul R] (S : Set (RingCon R)),
  (sInf S).toSetoid = sInf ((fun x => x.toSetoid) '' S)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `(cifvar_3 x✝).toSetoid`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || HomologicalComplex.homotopyCofiber.d_sndX_assoc : ∀ {C : Type u_1} [inst : CategoryTheory.Category.{u_3, u_1} C] [inst_1 : CategoryTheory.Preadditive C] {ι : Type u_2}
  {c : ComplexShape ι} {F G : HomologicalComplex C c} (φ : F ⟶ G) [inst_2 : HomologicalComplex.HasHomotopyCofiber φ]
  [inst_3 : DecidableRel c.Rel] (i j : ι) (hij : c.Rel i j) {Z : C} (h : G.X j ⟶ Z),
  CategoryTheory.CategoryStruct.comp (HomologicalComplex.homotopyCofiber.d φ i j)
      (CategoryTheory.CategoryStruct.comp (HomologicalComplex.homotopyCofiber.sndX φ j) h) =
    CategoryTheory.CategoryStruct.comp
      (CategoryTheory.CategoryStruct.comp (HomologicalComplex.homotopyCofiber.fstX φ i j hij) (φ.f j) +
        CategoryTheory.CategoryStruct.comp (HomologicalComplex.homotopyCofiber.sndX φ i) (G.d i j))
      h
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `HomologicalComplex.homotopyCofiber.inrX
  cifvar_1 x_0`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || contDiffWithinAt_nat : ∀ {𝕜 : Type u} [inst : NontriviallyNormedField 𝕜] {E : Type uE} [inst_1 : NormedAddCommGroup E]
  [inst_2 : NormedSpace 𝕜 E] {F : Type uF} [inst_3 : NormedAddCommGroup F] [inst_4 : NormedSpace 𝕜 F] {s : Set E}
  {f : E → F} {x : E} {n : ℕ},
  ContDiffWithinAt 𝕜 (↑n) f s x ↔ ∃ u ∈ nhdsWithin x (insert x s), ∃ p, HasFTaylorSeriesUpToOn (↑n) f p u
Result.autoException ::
Duper saturated

Testing || Equiv.ulift_apply : ∀ {α : Type v}, ⇑Equiv.ulift = ULift.down
Result.autoException ::
Duper saturated

Testing || Nat.divisors_prime_pow : ∀ {p : ℕ} (pp : Nat.Prime p) (k : ℕ),
  (p ^ k).divisors = Finset.map { toFun := fun x => p ^ x, inj' := ⋯ } (Finset.range (k + 1))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || exists_nhds_ne_inf_principal_neBot : ∀ {X : Type u} [inst : TopologicalSpace X] {s : Set X},
  IsCompact s → s.Infinite → ∃ z ∈ s, (nhdsWithin z {z}ᶜ ⊓ Filter.principal s).NeBot
Result.autoException ::
Duper saturated

Testing || CategoryTheory.CartesianClosed.uncurry_natural_left_assoc : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {A X X' Y : C}
  [inst_1 : CategoryTheory.Limits.HasFiniteProducts C] [inst_2 : CategoryTheory.Exponentiable A] (f : X ⟶ X')
  (g : X' ⟶ A ⟹ Y) {Z : C} (h : Y ⟶ Z),
  CategoryTheory.CategoryStruct.comp (CategoryTheory.CartesianClosed.uncurry (CategoryTheory.CategoryStruct.comp f g))
      h =
    CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.prod.map (CategoryTheory.CategoryStruct.id A) f)
      (CategoryTheory.CategoryStruct.comp (CategoryTheory.CartesianClosed.uncurry g) h)
Result.autoException ::
Duper saturated

Testing || MeasureTheory.FiniteMeasure.tendsto_map_of_tendsto_of_continuous : ∀ {Ω : Type u_1} {Ω' : Type u_2} [inst : MeasurableSpace Ω] [inst_1 : MeasurableSpace Ω'] [inst_2 : TopologicalSpace Ω]
  [inst_3 : OpensMeasurableSpace Ω] [inst_4 : TopologicalSpace Ω'] [inst_5 : BorelSpace Ω'] {ι : Type u_3}
  {L : Filter ι} (νs : ι → MeasureTheory.FiniteMeasure Ω) (ν : MeasureTheory.FiniteMeasure Ω),
  Filter.Tendsto νs L (nhds ν) →
    ∀ {f : Ω → Ω'}, Continuous f → Filter.Tendsto (fun i => (νs i).map f) L (nhds (ν.map f))
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || selfAdjoint.val_div : ∀ {R : Type u_1} [inst : Field R] [inst_1 : StarRing R] (x y : ↥(selfAdjoint R)), ↑(x / y) = ↑x / ↑y
Result.autoException ::
Duper saturated

Testing || AddUnits.mk_addSemiconjBy : ∀ {M : Type u_1} [inst : AddMonoid M] (u : AddUnits M) (x : M), AddSemiconjBy (↑u) x (↑u + x + ↑(-u))
Result.autoException ::
(deterministic) timeout at `«forward demodulation»`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || NonUnitalStarSubalgebra.toNonUnitalSubalgebra_toNonUnitalStarSubalgebra : ∀ {R : Type u} {A : Type v} [inst : CommSemiring R] [inst_1 : NonUnitalSemiring A] [inst_2 : Module R A]
  [inst_3 : Star A] (S : NonUnitalStarSubalgebra R A), S.toNonUnitalStarSubalgebra ⋯ = S
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `star_mem`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || BoxIntegral.IntegrationParams.hasBasis_toFilter : ∀ {ι : Type u_1} [inst : Fintype ι] (l : BoxIntegral.IntegrationParams) (I : BoxIntegral.Box ι),
  (l.toFilter I).HasBasis (fun r => ∀ (c : NNReal), l.RCond (r c)) fun r => {π | ∃ c, l.MemBaseSet I c (r c) π}
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `x_0.toFilterDistortion x_1 x_2`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || AddHom.restrict_apply : ∀ {M : Type u_1} {σ : Type u_4} [inst : Add M] {N : Type u_5} [inst_1 : Add N] [inst_2 : SetLike σ M]
  [inst_3 : AddMemClass σ M] (f : AddHom M N) {S : σ} (x : ↥S), (f.restrict S) x = f ↑x
Result.autoException ::
Duper saturated

Testing || CategoryTheory.CosimplicialObject.hom_ext_iff : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {X Y : CategoryTheory.CosimplicialObject C} {f g : X ⟶ Y},
  f = g ↔ ∀ (n : SimplexCategory), f.app n = g.app n
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `cifvar_3.app n`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || HomologicalComplex.singleObjHomologySelfIso_hom_naturality_assoc : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasZeroMorphisms C]
  [inst_2 : CategoryTheory.Limits.HasZeroObject C] {ι : Type u_1} [inst_3 : DecidableEq ι] (c : ComplexShape ι) (j : ι)
  {A B : C} (f : A ⟶ B) {Z : C} (h : B ⟶ Z),
  CategoryTheory.CategoryStruct.comp (HomologicalComplex.homologyMap ((HomologicalComplex.single C c j).map f) j)
      (CategoryTheory.CategoryStruct.comp (HomologicalComplex.singleObjHomologySelfIso c j B).hom h) =
    CategoryTheory.CategoryStruct.comp (HomologicalComplex.singleObjHomologySelfIso c j A).hom
      (CategoryTheory.CategoryStruct.comp f h)
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `HomologicalComplex.instHasHomologyObjSingle
  cifvar_18 x_0 x_1 x_0`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || IterateMulAct.ext : ∀ {α : Type u_1} {f : α → α} {x y : IterateMulAct f}, x.val = y.val → x = y
Result.autoException ::
Duper saturated

Testing || IsBezout.gcd_dvd_left : ∀ {R : Type u} [inst : CommRing R] (x y : R) [inst_1 : Submodule.IsPrincipal (Ideal.span {x, y})], IsBezout.gcd x y ∣ x
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Real.add_neg_lt_sSup : ∀ {s : Set ℝ}, s.Nonempty → ∀ {ε : ℝ}, ε < 0 → ∃ a ∈ s, sSup s + ε < a
Result.success

Testing || MeasureTheory.L2.integral_inner_eq_sq_snorm : ∀ {α : Type u_1} {E : Type u_2} {𝕜 : Type u_4} [inst : RCLike 𝕜] [inst_1 : MeasurableSpace α]
  {μ : MeasureTheory.Measure α} [inst_2 : NormedAddCommGroup E] [inst_3 : InnerProductSpace 𝕜 E]
  (f : ↥(MeasureTheory.Lp E 2 μ)), ∫ (a : α), inner (↑↑f a) (↑↑f a) ∂μ = ↑(∫⁻ (a : α), ↑‖↑↑f a‖₊ ^ 2 ∂μ).toReal
Result.success

Testing || TopCat.Presheaf.stalkFunctor_map_germ_apply : ∀ {C : Type u} [inst : CategoryTheory.Category.{v, u} C] [inst_1 : CategoryTheory.Limits.HasColimits C] {X : TopCat}
  [inst_2 : CategoryTheory.ConcreteCategory C] {F G : TopCat.Presheaf C X} (U : TopologicalSpace.Opens ↑X) (x : ↑X)
  (hx : x ∈ U) (f : F ⟶ G) (s : (CategoryTheory.forget C).obj (F.obj (Opposite.op U))),
  ((TopCat.Presheaf.stalkFunctor C x).map f) ((F.germ U x hx) s) = (G.germ U x hx) ((f.app (Opposite.op U)) s)
Result.autoException ::
Duper saturated

Testing || CircularPreorder.btw_cyclic_left : ∀ {α : Type u_1} [self : CircularPreorder α] {a b c : α}, btw a b c → btw b c a
Result.autoException ::
Duper saturated

Testing || Real.arcsin_eq_pi_div_two_sub_arccos : ∀ (x : ℝ), Real.arcsin x = Real.pi / 2 - Real.arccos x
Result.autoException ::
Duper saturated

Testing || CategoryTheory.Pseudofunctor.mkOfOplax'_mapComp_hom : ∀ {B : Type u₁} [inst : CategoryTheory.Bicategory B] {C : Type u₂} [inst_1 : CategoryTheory.Bicategory C]
  (F : CategoryTheory.OplaxFunctor B C) [inst_2 : ∀ (a : B), CategoryTheory.IsIso (F.mapId a)]
  [inst_3 : ∀ {a b c : B} (f : a ⟶ b) (g : b ⟶ c), CategoryTheory.IsIso (F.mapComp f g)] {a b c : B} (f : a ⟶ b)
  (g : b ⟶ c), ((CategoryTheory.Pseudofunctor.mkOfOplax' F).mapComp f g).hom = F.mapComp f g
Result.autoException ::
Monomorphization failed because currently the procedure cannot deal with expression `CategoryTheory.Bicategory.homCategory
  (cifvar_1 (cifvar_2 (cifvar_3 (cifvar_4 cifvar_5))) x_0) (cifvar_1 (cifvar_2 (cifvar_3 (cifvar_4 cifvar_5))) x_0)`.
This is because it contains free variables and has subterms possessing at least one of the following features
· Type argument with free variables, e.g. `@Fin.add (n + 2) a b`
· λ binders whose type contain free variables, e.g. `fun (x : a) => x` where `a` is a free variable
· (TODO)

Testing || MeasureTheory.AEFinStronglyMeasurable.ae_eq_mk : ∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} [inst : TopologicalSpace β]
  {f : α → β} [inst_1 : Zero β] (hf : MeasureTheory.AEFinStronglyMeasurable f μ),
  f =ᵐ[μ] MeasureTheory.AEFinStronglyMeasurable.mk f hf
Result.autoException ::
Duper saturated

Testing || AddSubmonoid.map_sup_comap_of_surjective : ∀ {M : Type u_1} {N : Type u_2} [inst : AddZeroClass M] [inst_1 : AddZeroClass N] {F : Type u_4}
  [inst_2 : FunLike F M N] [mc : AddMonoidHomClass F M N] {f : F},
  Function.Surjective ⇑f →
    ∀ (S T : AddSubmonoid N), AddSubmonoid.map f (AddSubmonoid.comap f S ⊔ AddSubmonoid.comap f T) = S ⊔ T
Result.autoException ::
Duper saturated

Testing || not_of_not_imp : ∀ {b a : Prop}, ¬(a → b) → ¬b
Result.success

Testing || List.insert_pos : ∀ {α : Type u} [inst : DecidableEq α] {x : α} {l : List α}, x ∈ l → insert x l = l
Result.autoException ::
Duper saturated

Testing || Order.Coframe.MinimalAxioms.sup_iInf_eq : ∀ {α : Type u} {ι : Sort w} (minAx : Order.Coframe.MinimalAxioms α) (a : α) (f : ι → α), a ⊔ ⨅ i, f i = ⨅ i, a ⊔ f i
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || MeasureTheory.hasFiniteIntegral_count_iff : ∀ {α : Type u_1} {β : Type u_2} {m : MeasurableSpace α} [inst : NormedAddCommGroup β]
  [inst_1 : MeasurableSingletonClass α] {f : α → β},
  MeasureTheory.HasFiniteIntegral f MeasureTheory.Measure.count ↔ Summable fun x => ‖f x‖
Result.autoException ::
(deterministic) timeout at `whnf`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.

Testing || Units.continuousOn_inv₀_spectrum : ∀ {R : Type u_3} {A : Type u_4} [inst : Semifield R] [inst_1 : Ring A] [inst_2 : TopologicalSpace R]
  [inst_3 : HasContinuousInv₀ R] [inst_4 : Algebra R A] (a : Aˣ), ContinuousOn (fun x => x⁻¹) (spectrum R ↑a)
Result.success
