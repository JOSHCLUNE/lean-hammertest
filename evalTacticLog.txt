Config = {
  maxHeartbeats := 65536, tactics := #[useRfl, useSimpAll, useSimpAllWithPremises, useAesop 16384, useAesopWithPremises 16384], logFile := evalTacticLog.txt, resultFile := evalTacticResult.txt
  nonterminates := #[
  ]
}
Start time : 1737093511776

Timestamp : 1737093514438
Testing tactic 0 || mul_left_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c → b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝
is not definitionally equal to the right-hand side
  c✝
G✝ : Type u_1
inst✝¹ : Mul G✝
inst✝ : IsLeftCancelMul G✝
a✝¹ b✝ c✝ : G✝
a✝ : a✝¹ * b✝ = a✝¹ * c✝
⊢ b✝ = c✝ Elapsed time : 4ms

Timestamp : 1737093514445
Testing tactic 1 || mul_left_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 9ms

Timestamp : 1737093514454
Testing tactic 2 || mul_left_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 370ms

Timestamp : 1737093514825
Testing tactic 3 || mul_left_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝¹ : Mul G✝
  inst✝ : IsLeftCancelMul G✝
  a✝¹ b✝ c✝ : G✝
  a✝ : a✝¹ * b✝ = a✝¹ * c✝
  ⊢ b✝ = c✝ Elapsed time : 25ms

Timestamp : 1737093514851
Testing tactic 4 || mul_left_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c → b = c
Result.success
Elapsed time : 23ms

Timestamp : 1737093514875
Testing tactic 0 || add_left_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c → b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝
is not definitionally equal to the right-hand side
  c✝
G✝ : Type u_1
inst✝¹ : Add G✝
inst✝ : IsLeftCancelAdd G✝
a✝¹ b✝ c✝ : G✝
a✝ : a✝¹ + b✝ = a✝¹ + c✝
⊢ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093514877
Testing tactic 1 || add_left_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093514879
Testing tactic 2 || add_left_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 355ms

Timestamp : 1737093515234
Testing tactic 3 || add_left_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝¹ : Add G✝
  inst✝ : IsLeftCancelAdd G✝
  a✝¹ b✝ c✝ : G✝
  a✝ : a✝¹ + b✝ = a✝¹ + c✝
  ⊢ b✝ = c✝ Elapsed time : 13ms

Timestamp : 1737093515250
Testing tactic 4 || add_left_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c → b = c
Result.success
Elapsed time : 19ms

Timestamp : 1737093515283
Testing tactic 0 || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ + b✝ = a✝ + c✝
is not definitionally equal to the right-hand side
  b✝ = c✝
G✝ : Type u_1
inst✝¹ : Add G✝
inst✝ : IsLeftCancelAdd G✝
a✝ b✝ c✝ : G✝
⊢ a✝ + b✝ = a✝ + c✝ ↔ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093515286
Testing tactic 1 || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093515287
Testing tactic 2 || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 246ms

Timestamp : 1737093515534
Testing tactic 3 || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.subGoals
Elapsed time : 20ms

Timestamp : 1737093515554
Testing tactic 4 || add_left_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsLeftCancelAdd G] {a b c : G}, a + b = a + c ↔ b = c
Result.success
Elapsed time : 25ms

Timestamp : 1737093515580
Testing tactic 0 || mul_left_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c ↔ b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ * b✝ = a✝ * c✝
is not definitionally equal to the right-hand side
  b✝ = c✝
G✝ : Type u_1
inst✝¹ : Mul G✝
inst✝ : IsLeftCancelMul G✝
a✝ b✝ c✝ : G✝
⊢ a✝ * b✝ = a✝ * c✝ ↔ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093515582
Testing tactic 1 || mul_left_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093515583
Testing tactic 2 || mul_left_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 230ms

Timestamp : 1737093515814
Testing tactic 3 || mul_left_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c ↔ b = c
Result.subGoals
Elapsed time : 19ms

Timestamp : 1737093515834
Testing tactic 4 || mul_left_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsLeftCancelMul G] {a b c : G}, a * b = a * c ↔ b = c
Result.success
Elapsed time : 24ms

Timestamp : 1737093515872
Testing tactic 0 || add_right_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, a + b = c + b → a = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝¹
is not definitionally equal to the right-hand side
  c✝
G✝ : Type u_1
inst✝¹ : Add G✝
inst✝ : IsRightCancelAdd G✝
a✝¹ b✝ c✝ : G✝
a✝ : a✝¹ + b✝ = c✝ + b✝
⊢ a✝¹ = c✝ Elapsed time : 0ms

Timestamp : 1737093515873
Testing tactic 1 || add_right_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, a + b = c + b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093515875
Testing tactic 2 || add_right_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, a + b = c + b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 329ms

Timestamp : 1737093516204
Testing tactic 3 || add_right_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, a + b = c + b → a = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝¹ : Add G✝
  inst✝ : IsRightCancelAdd G✝
  a✝¹ b✝ c✝ : G✝
  a✝ : a✝¹ + b✝ = c✝ + b✝
  ⊢ a✝¹ = c✝ Elapsed time : 13ms

Timestamp : 1737093516219
Testing tactic 4 || add_right_cancel : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, a + b = c + b → a = c
Result.success
Elapsed time : 19ms

Timestamp : 1737093516238
Testing tactic 0 || mul_right_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, a * b = c * b → a = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝¹
is not definitionally equal to the right-hand side
  c✝
G✝ : Type u_1
inst✝¹ : Mul G✝
inst✝ : IsRightCancelMul G✝
a✝¹ b✝ c✝ : G✝
a✝ : a✝¹ * b✝ = c✝ * b✝
⊢ a✝¹ = c✝ Elapsed time : 0ms

Timestamp : 1737093516240
Testing tactic 1 || mul_right_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, a * b = c * b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093516241
Testing tactic 2 || mul_right_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, a * b = c * b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 306ms

Timestamp : 1737093516547
Testing tactic 3 || mul_right_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, a * b = c * b → a = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝¹ : Mul G✝
  inst✝ : IsRightCancelMul G✝
  a✝¹ b✝ c✝ : G✝
  a✝ : a✝¹ * b✝ = c✝ * b✝
  ⊢ a✝¹ = c✝ Elapsed time : 13ms

Timestamp : 1737093516562
Testing tactic 4 || mul_right_cancel : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, a * b = c * b → a = c
Result.success
Elapsed time : 19ms

Timestamp : 1737093516591
Testing tactic 0 || add_right_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, b + a = c + a ↔ b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝ + a✝ = c✝ + a✝
is not definitionally equal to the right-hand side
  b✝ = c✝
G✝ : Type u_1
inst✝¹ : Add G✝
inst✝ : IsRightCancelAdd G✝
a✝ b✝ c✝ : G✝
⊢ b✝ + a✝ = c✝ + a✝ ↔ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093516594
Testing tactic 1 || add_right_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, b + a = c + a ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093516595
Testing tactic 2 || add_right_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, b + a = c + a ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 246ms

Timestamp : 1737093516842
Testing tactic 3 || add_right_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, b + a = c + a ↔ b = c
Result.subGoals
Elapsed time : 20ms

Timestamp : 1737093516863
Testing tactic 4 || add_right_cancel_iff : ∀ {G : Type u_1} [inst : Add G] [inst_1 : IsRightCancelAdd G] {a b c : G}, b + a = c + a ↔ b = c
Result.success
Elapsed time : 25ms

Timestamp : 1737093516889
Testing tactic 0 || mul_right_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, b * a = c * a ↔ b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝ * a✝ = c✝ * a✝
is not definitionally equal to the right-hand side
  b✝ = c✝
G✝ : Type u_1
inst✝¹ : Mul G✝
inst✝ : IsRightCancelMul G✝
a✝ b✝ c✝ : G✝
⊢ b✝ * a✝ = c✝ * a✝ ↔ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093516891
Testing tactic 1 || mul_right_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, b * a = c * a ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093516892
Testing tactic 2 || mul_right_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, b * a = c * a ↔ b = c
Result.exception ::
simp_all made no progress
Elapsed time : 231ms

Timestamp : 1737093517124
Testing tactic 3 || mul_right_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, b * a = c * a ↔ b = c
Result.subGoals
Elapsed time : 20ms

Timestamp : 1737093517145
Testing tactic 4 || mul_right_cancel_iff : ∀ {G : Type u_1} [inst : Mul G] [inst_1 : IsRightCancelMul G] {a b c : G}, b * a = c * a ↔ b = c
Result.success
Elapsed time : 27ms

Timestamp : 1737093517202
Testing tactic 0 || Semigroup.ext : ∀ {G : Type u} {x y : @Semigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'Semigroup'
Elapsed time : 0ms

Timestamp : 1737093517202
Testing tactic 1 || Semigroup.ext : ∀ {G : Type u} {x y : @Semigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'Semigroup'
Elapsed time : 0ms

Timestamp : 1737093517203
Testing tactic 2 || Semigroup.ext : ∀ {G : Type u} {x y : @Semigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'Semigroup'
Elapsed time : 1ms

Timestamp : 1737093517203
Testing tactic 3 || Semigroup.ext : ∀ {G : Type u} {x y : @Semigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'Semigroup'
Elapsed time : 0ms

Timestamp : 1737093517204
Testing tactic 4 || Semigroup.ext : ∀ {G : Type u} {x y : @Semigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'Semigroup'
Elapsed time : 0ms

Timestamp : 1737093517219
Testing tactic 0 || AddSemigroup.ext : ∀ {G : Type u} {x y : @AddSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517219
Testing tactic 1 || AddSemigroup.ext : ∀ {G : Type u} {x y : @AddSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517220
Testing tactic 2 || AddSemigroup.ext : ∀ {G : Type u} {x y : @AddSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517220
Testing tactic 3 || AddSemigroup.ext : ∀ {G : Type u} {x y : @AddSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517221
Testing tactic 4 || AddSemigroup.ext : ∀ {G : Type u} {x y : @AddSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517237
Testing tactic 0 || add_assoc : ∀ {G : Type u_1} [inst : AddSemigroup G] (a b c : G), a + b + c = a + (b + c)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ + b✝ + c✝
is not definitionally equal to the right-hand side
  a✝ + (b✝ + c✝)
G✝ : Type u_1
inst✝ : AddSemigroup G✝
a✝ b✝ c✝ : G✝
⊢ a✝ + b✝ + c✝ = a✝ + (b✝ + c✝) Elapsed time : 1ms

Timestamp : 1737093517239
Testing tactic 1 || add_assoc : ∀ {G : Type u_1} [inst : AddSemigroup G] (a b c : G), a + b + c = a + (b + c)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517241
Testing tactic 2 || add_assoc : ∀ {G : Type u_1} [inst : AddSemigroup G] (a b c : G), a + b + c = a + (b + c)
Result.success
Elapsed time : 2ms

Timestamp : 1737093517243
Testing tactic 3 || add_assoc : ∀ {G : Type u_1} [inst : AddSemigroup G] (a b c : G), a + b + c = a + (b + c)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝ : AddSemigroup G✝
  a✝ b✝ c✝ : G✝
  ⊢ a✝ + b✝ + c✝ = a✝ + (b✝ + c✝) Elapsed time : 13ms

Timestamp : 1737093517256
Testing tactic 4 || add_assoc : ∀ {G : Type u_1} [inst : AddSemigroup G] (a b c : G), a + b + c = a + (b + c)
Result.success
Elapsed time : 13ms

Timestamp : 1737093517270
Testing tactic 0 || mul_assoc : ∀ {G : Type u_1} [inst : Semigroup G] (a b c : G), a * b * c = a * (b * c)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ * b✝ * c✝
is not definitionally equal to the right-hand side
  a✝ * (b✝ * c✝)
G✝ : Type u_1
inst✝ : Semigroup G✝
a✝ b✝ c✝ : G✝
⊢ a✝ * b✝ * c✝ = a✝ * (b✝ * c✝) Elapsed time : 1ms

Timestamp : 1737093517272
Testing tactic 1 || mul_assoc : ∀ {G : Type u_1} [inst : Semigroup G] (a b c : G), a * b * c = a * (b * c)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517273
Testing tactic 2 || mul_assoc : ∀ {G : Type u_1} [inst : Semigroup G] (a b c : G), a * b * c = a * (b * c)
Result.success
Elapsed time : 1ms

Timestamp : 1737093517275
Testing tactic 3 || mul_assoc : ∀ {G : Type u_1} [inst : Semigroup G] (a b c : G), a * b * c = a * (b * c)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝ : Semigroup G✝
  a✝ b✝ c✝ : G✝
  ⊢ a✝ * b✝ * c✝ = a✝ * (b✝ * c✝) Elapsed time : 12ms

Timestamp : 1737093517289
Testing tactic 4 || mul_assoc : ∀ {G : Type u_1} [inst : Semigroup G] (a b c : G), a * b * c = a * (b * c)
Result.success
Elapsed time : 14ms

Timestamp : 1737093517319
Testing tactic 0 || AddCommMagma.ext : ∀ {G : Type u} {x y : @AddCommMagma G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommMagma'
Elapsed time : 0ms

Timestamp : 1737093517319
Testing tactic 1 || AddCommMagma.ext : ∀ {G : Type u} {x y : @AddCommMagma G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommMagma'
Elapsed time : 0ms

Timestamp : 1737093517320
Testing tactic 2 || AddCommMagma.ext : ∀ {G : Type u} {x y : @AddCommMagma G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommMagma'
Elapsed time : 1ms

Timestamp : 1737093517320
Testing tactic 3 || AddCommMagma.ext : ∀ {G : Type u} {x y : @AddCommMagma G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommMagma'
Elapsed time : 0ms

Timestamp : 1737093517321
Testing tactic 4 || AddCommMagma.ext : ∀ {G : Type u} {x y : @AddCommMagma G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommMagma'
Elapsed time : 0ms

Timestamp : 1737093517335
Testing tactic 0 || CommMagma.ext : ∀ {G : Type u} {x y : @CommMagma G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommMagma'
Elapsed time : 0ms

Timestamp : 1737093517336
Testing tactic 1 || CommMagma.ext : ∀ {G : Type u} {x y : @CommMagma G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommMagma'
Elapsed time : 0ms

Timestamp : 1737093517336
Testing tactic 2 || CommMagma.ext : ∀ {G : Type u} {x y : @CommMagma G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommMagma'
Elapsed time : 0ms

Timestamp : 1737093517337
Testing tactic 3 || CommMagma.ext : ∀ {G : Type u} {x y : @CommMagma G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommMagma'
Elapsed time : 0ms

Timestamp : 1737093517337
Testing tactic 4 || CommMagma.ext : ∀ {G : Type u} {x y : @CommMagma G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommMagma'
Elapsed time : 0ms

Timestamp : 1737093517362
Testing tactic 0 || CommSemigroup.ext : ∀ {G : Type u} {x y : @CommSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517363
Testing tactic 1 || CommSemigroup.ext : ∀ {G : Type u} {x y : @CommSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517364
Testing tactic 2 || CommSemigroup.ext : ∀ {G : Type u} {x y : @CommSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517364
Testing tactic 3 || CommSemigroup.ext : ∀ {G : Type u} {x y : @CommSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517364
Testing tactic 4 || CommSemigroup.ext : ∀ {G : Type u} {x y : @CommSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'CommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517382
Testing tactic 0 || AddCommSemigroup.ext : ∀ {G : Type u} {x y : @AddCommSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommSemigroup'
Elapsed time : 1ms

Timestamp : 1737093517382
Testing tactic 1 || AddCommSemigroup.ext : ∀ {G : Type u} {x y : @AddCommSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517383
Testing tactic 2 || AddCommSemigroup.ext : ∀ {G : Type u} {x y : @AddCommSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommSemigroup'
Elapsed time : 1ms

Timestamp : 1737093517383
Testing tactic 3 || AddCommSemigroup.ext : ∀ {G : Type u} {x y : @AddCommSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517384
Testing tactic 4 || AddCommSemigroup.ext : ∀ {G : Type u} {x y : @AddCommSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddCommSemigroup'
Elapsed time : 1ms

Timestamp : 1737093517400
Testing tactic 0 || add_comm : ∀ {G : Type u_1} [inst : AddCommMagma G] (a b : G), a + b = b + a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ + b✝
is not definitionally equal to the right-hand side
  b✝ + a✝
G✝ : Type u_1
inst✝ : AddCommMagma G✝
a✝ b✝ : G✝
⊢ a✝ + b✝ = b✝ + a✝ Elapsed time : 1ms

Timestamp : 1737093517403
Testing tactic 1 || add_comm : ∀ {G : Type u_1} [inst : AddCommMagma G] (a b : G), a + b = b + a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517404
Testing tactic 2 || add_comm : ∀ {G : Type u_1} [inst : AddCommMagma G] (a b : G), a + b = b + a
Result.success
Elapsed time : 4ms

Timestamp : 1737093517408
Testing tactic 3 || add_comm : ∀ {G : Type u_1} [inst : AddCommMagma G] (a b : G), a + b = b + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝ : AddCommMagma G✝
  a✝ b✝ : G✝
  ⊢ a✝ + b✝ = b✝ + a✝ Elapsed time : 12ms

Timestamp : 1737093517420
Testing tactic 4 || add_comm : ∀ {G : Type u_1} [inst : AddCommMagma G] (a b : G), a + b = b + a
Result.success
Elapsed time : 13ms

Timestamp : 1737093517434
Testing tactic 0 || mul_comm : ∀ {G : Type u_1} [inst : CommMagma G] (a b : G), a * b = b * a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ * b✝
is not definitionally equal to the right-hand side
  b✝ * a✝
G✝ : Type u_1
inst✝ : CommMagma G✝
a✝ b✝ : G✝
⊢ a✝ * b✝ = b✝ * a✝ Elapsed time : 1ms

Timestamp : 1737093517435
Testing tactic 1 || mul_comm : ∀ {G : Type u_1} [inst : CommMagma G] (a b : G), a * b = b * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517436
Testing tactic 2 || mul_comm : ∀ {G : Type u_1} [inst : CommMagma G] (a b : G), a * b = b * a
Result.success
Elapsed time : 1ms

Timestamp : 1737093517438
Testing tactic 3 || mul_comm : ∀ {G : Type u_1} [inst : CommMagma G] (a b : G), a * b = b * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u_1
  inst✝ : CommMagma G✝
  a✝ b✝ : G✝
  ⊢ a✝ * b✝ = b✝ * a✝ Elapsed time : 11ms

Timestamp : 1737093517450
Testing tactic 4 || mul_comm : ∀ {G : Type u_1} [inst : CommMagma G] (a b : G), a * b = b * a
Result.success
Elapsed time : 11ms

Timestamp : 1737093517473
Testing tactic 0 || AddCommMagma.IsRightCancelAdd.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsLeftCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddCommMagma.toAdd
G✝ : Type u
inst✝¹ : AddCommMagma G✝
inst✝ : IsRightCancelAdd G✝
⊢ IsLeftCancelAdd G✝ Elapsed time : 1ms

Timestamp : 1737093517475
Testing tactic 1 || AddCommMagma.IsRightCancelAdd.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsLeftCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517475
Testing tactic 2 || AddCommMagma.IsRightCancelAdd.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsLeftCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 38ms

Timestamp : 1737093517514
Testing tactic 3 || AddCommMagma.IsRightCancelAdd.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsLeftCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsRightCancelAdd G✝
  ⊢ IsLeftCancelAdd G✝ Elapsed time : 11ms

Timestamp : 1737093517526
Testing tactic 4 || AddCommMagma.IsRightCancelAdd.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsLeftCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsRightCancelAdd G✝
  ⊢ IsLeftCancelAdd G✝ Elapsed time : 12ms

Timestamp : 1737093517540
Testing tactic 0 || CommMagma.IsRightCancelMul.toIsLeftCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsLeftCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  CommMagma.toMul
G✝ : Type u
inst✝¹ : CommMagma G✝
inst✝ : IsRightCancelMul G✝
⊢ IsLeftCancelMul G✝ Elapsed time : 1ms

Timestamp : 1737093517541
Testing tactic 1 || CommMagma.IsRightCancelMul.toIsLeftCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsLeftCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517541
Testing tactic 2 || CommMagma.IsRightCancelMul.toIsLeftCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsLeftCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 44ms

Timestamp : 1737093517586
Testing tactic 3 || CommMagma.IsRightCancelMul.toIsLeftCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsLeftCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsRightCancelMul G✝
  ⊢ IsLeftCancelMul G✝ Elapsed time : 12ms

Timestamp : 1737093517598
Testing tactic 4 || CommMagma.IsRightCancelMul.toIsLeftCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsLeftCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsRightCancelMul G✝
  ⊢ IsLeftCancelMul G✝ Elapsed time : 12ms

Timestamp : 1737093517622
Testing tactic 0 || AddCommMagma.IsLeftCancelAdd.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsRightCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddCommMagma.toAdd
G✝ : Type u
inst✝¹ : AddCommMagma G✝
inst✝ : IsLeftCancelAdd G✝
⊢ IsRightCancelAdd G✝ Elapsed time : 1ms

Timestamp : 1737093517624
Testing tactic 1 || AddCommMagma.IsLeftCancelAdd.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsRightCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517624
Testing tactic 2 || AddCommMagma.IsLeftCancelAdd.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsRightCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 38ms

Timestamp : 1737093517663
Testing tactic 3 || AddCommMagma.IsLeftCancelAdd.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsRightCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsLeftCancelAdd G✝
  ⊢ IsRightCancelAdd G✝ Elapsed time : 12ms

Timestamp : 1737093517675
Testing tactic 4 || AddCommMagma.IsLeftCancelAdd.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsRightCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsLeftCancelAdd G✝
  ⊢ IsRightCancelAdd G✝ Elapsed time : 12ms

Timestamp : 1737093517687
Testing tactic 0 || CommMagma.IsLeftCancelMul.toIsRightCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsRightCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  CommMagma.toMul
G✝ : Type u
inst✝¹ : CommMagma G✝
inst✝ : IsLeftCancelMul G✝
⊢ IsRightCancelMul G✝ Elapsed time : 0ms

Timestamp : 1737093517688
Testing tactic 1 || CommMagma.IsLeftCancelMul.toIsRightCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsRightCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517689
Testing tactic 2 || CommMagma.IsLeftCancelMul.toIsRightCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsRightCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 39ms

Timestamp : 1737093517728
Testing tactic 3 || CommMagma.IsLeftCancelMul.toIsRightCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsRightCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsLeftCancelMul G✝
  ⊢ IsRightCancelMul G✝ Elapsed time : 12ms

Timestamp : 1737093517740
Testing tactic 4 || CommMagma.IsLeftCancelMul.toIsRightCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsRightCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsLeftCancelMul G✝
  ⊢ IsRightCancelMul G✝ Elapsed time : 12ms

Timestamp : 1737093517761
Testing tactic 0 || CommMagma.IsLeftCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  CommMagma.toMul
G✝ : Type u
inst✝¹ : CommMagma G✝
inst✝ : IsLeftCancelMul G✝
⊢ IsCancelMul G✝ Elapsed time : 1ms

Timestamp : 1737093517762
Testing tactic 1 || CommMagma.IsLeftCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517762
Testing tactic 2 || CommMagma.IsLeftCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517763
Testing tactic 3 || CommMagma.IsLeftCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsLeftCancelMul G✝
  ⊢ IsCancelMul G✝ Elapsed time : 10ms

Timestamp : 1737093517774
Testing tactic 4 || CommMagma.IsLeftCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsLeftCancelMul G], IsCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsLeftCancelMul G✝
  ⊢ IsCancelMul G✝ Elapsed time : 10ms

Timestamp : 1737093517785
Testing tactic 0 || AddCommMagma.IsLeftCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddCommMagma.toAdd
G✝ : Type u
inst✝¹ : AddCommMagma G✝
inst✝ : IsLeftCancelAdd G✝
⊢ IsCancelAdd G✝ Elapsed time : 1ms

Timestamp : 1737093517786
Testing tactic 1 || AddCommMagma.IsLeftCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517786
Testing tactic 2 || AddCommMagma.IsLeftCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517787
Testing tactic 3 || AddCommMagma.IsLeftCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsLeftCancelAdd G✝
  ⊢ IsCancelAdd G✝ Elapsed time : 9ms

Timestamp : 1737093517796
Testing tactic 4 || AddCommMagma.IsLeftCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsLeftCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsLeftCancelAdd G✝
  ⊢ IsCancelAdd G✝ Elapsed time : 9ms

Timestamp : 1737093517815
Testing tactic 0 || CommMagma.IsRightCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  CommMagma.toMul
G✝ : Type u
inst✝¹ : CommMagma G✝
inst✝ : IsRightCancelMul G✝
⊢ IsCancelMul G✝ Elapsed time : 0ms

Timestamp : 1737093517816
Testing tactic 1 || CommMagma.IsRightCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517817
Testing tactic 2 || CommMagma.IsRightCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517818
Testing tactic 3 || CommMagma.IsRightCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsRightCancelMul G✝
  ⊢ IsCancelMul G✝ Elapsed time : 12ms

Timestamp : 1737093517830
Testing tactic 4 || CommMagma.IsRightCancelMul.toIsCancelMul : ∀ (G : Type u) [inst : CommMagma G] [inst_1 : IsRightCancelMul G], IsCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : CommMagma G✝
  inst✝ : IsRightCancelMul G✝
  ⊢ IsCancelMul G✝ Elapsed time : 13ms

Timestamp : 1737093517844
Testing tactic 0 || AddCommMagma.IsRightCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddCommMagma.toAdd
G✝ : Type u
inst✝¹ : AddCommMagma G✝
inst✝ : IsRightCancelAdd G✝
⊢ IsCancelAdd G✝ Elapsed time : 0ms

Timestamp : 1737093517845
Testing tactic 1 || AddCommMagma.IsRightCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517846
Testing tactic 2 || AddCommMagma.IsRightCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093517847
Testing tactic 3 || AddCommMagma.IsRightCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsRightCancelAdd G✝
  ⊢ IsCancelAdd G✝ Elapsed time : 11ms

Timestamp : 1737093517858
Testing tactic 4 || AddCommMagma.IsRightCancelAdd.toIsCancelAdd : ∀ (G : Type u) [inst : AddCommMagma G] [inst_1 : IsRightCancelAdd G], IsCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝¹ : AddCommMagma G✝
  inst✝ : IsRightCancelAdd G✝
  ⊢ IsCancelAdd G✝ Elapsed time : 10ms

Timestamp : 1737093517889
Testing tactic 0 || LeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @LeftCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'LeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517890
Testing tactic 1 || LeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @LeftCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'LeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517890
Testing tactic 2 || LeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @LeftCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'LeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517891
Testing tactic 3 || LeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @LeftCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'LeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517891
Testing tactic 4 || LeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @LeftCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'LeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517913
Testing tactic 0 || AddLeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddLeftCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddLeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517913
Testing tactic 1 || AddLeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddLeftCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddLeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517914
Testing tactic 2 || AddLeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddLeftCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddLeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517914
Testing tactic 3 || AddLeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddLeftCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddLeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517915
Testing tactic 4 || AddLeftCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddLeftCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddLeftCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093517930
Testing tactic 0 || LeftCancelSemigroup.toIsLeftCancelMul : ∀ (G : Type u) [inst : LeftCancelSemigroup G], IsLeftCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  Semigroup.toMul
G✝ : Type u
inst✝ : LeftCancelSemigroup G✝
⊢ IsLeftCancelMul G✝ Elapsed time : 1ms

Timestamp : 1737093517931
Testing tactic 1 || LeftCancelSemigroup.toIsLeftCancelMul : ∀ (G : Type u) [inst : LeftCancelSemigroup G], IsLeftCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093517931
Testing tactic 2 || LeftCancelSemigroup.toIsLeftCancelMul : ∀ (G : Type u) [inst : LeftCancelSemigroup G], IsLeftCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 554ms

Timestamp : 1737093518486
Testing tactic 3 || LeftCancelSemigroup.toIsLeftCancelMul : ∀ (G : Type u) [inst : LeftCancelSemigroup G], IsLeftCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : LeftCancelSemigroup G✝
  ⊢ IsLeftCancelMul G✝ Elapsed time : 11ms

Timestamp : 1737093518497
Testing tactic 4 || LeftCancelSemigroup.toIsLeftCancelMul : ∀ (G : Type u) [inst : LeftCancelSemigroup G], IsLeftCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : LeftCancelSemigroup G✝
  ⊢ IsLeftCancelMul G✝ Elapsed time : 11ms

Timestamp : 1737093518509
Testing tactic 0 || AddLeftCancelSemigroup.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddLeftCancelSemigroup G], IsLeftCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddSemigroup.toAdd
G✝ : Type u
inst✝ : AddLeftCancelSemigroup G✝
⊢ IsLeftCancelAdd G✝ Elapsed time : 0ms

Timestamp : 1737093518510
Testing tactic 1 || AddLeftCancelSemigroup.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddLeftCancelSemigroup G], IsLeftCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093518510
Testing tactic 2 || AddLeftCancelSemigroup.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddLeftCancelSemigroup G], IsLeftCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 613ms

Timestamp : 1737093519124
Testing tactic 3 || AddLeftCancelSemigroup.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddLeftCancelSemigroup G], IsLeftCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : AddLeftCancelSemigroup G✝
  ⊢ IsLeftCancelAdd G✝ Elapsed time : 10ms

Timestamp : 1737093519135
Testing tactic 4 || AddLeftCancelSemigroup.toIsLeftCancelAdd : ∀ (G : Type u) [inst : AddLeftCancelSemigroup G], IsLeftCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : AddLeftCancelSemigroup G✝
  ⊢ IsLeftCancelAdd G✝ Elapsed time : 10ms

Timestamp : 1737093519164
Testing tactic 0 || RightCancelSemigroup.ext : ∀ {G : Type u} {x y : @RightCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'RightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519165
Testing tactic 1 || RightCancelSemigroup.ext : ∀ {G : Type u} {x y : @RightCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'RightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519165
Testing tactic 2 || RightCancelSemigroup.ext : ∀ {G : Type u} {x y : @RightCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'RightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519166
Testing tactic 3 || RightCancelSemigroup.ext : ∀ {G : Type u} {x y : @RightCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'RightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519166
Testing tactic 4 || RightCancelSemigroup.ext : ∀ {G : Type u} {x y : @RightCancelSemigroup G}, Mul.mul = Mul.mul → x = y
Result.exception ::
unknown constant 'RightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519185
Testing tactic 0 || AddRightCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddRightCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddRightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519185
Testing tactic 1 || AddRightCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddRightCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddRightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519187
Testing tactic 2 || AddRightCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddRightCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddRightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519187
Testing tactic 3 || AddRightCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddRightCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddRightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519188
Testing tactic 4 || AddRightCancelSemigroup.ext : ∀ {G : Type u} {x y : @AddRightCancelSemigroup G}, Add.add = Add.add → x = y
Result.exception ::
unknown constant 'AddRightCancelSemigroup'
Elapsed time : 0ms

Timestamp : 1737093519202
Testing tactic 0 || RightCancelSemigroup.toIsRightCancelMul : ∀ (G : Type u) [inst : RightCancelSemigroup G], IsRightCancelMul G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  Semigroup.toMul
G✝ : Type u
inst✝ : RightCancelSemigroup G✝
⊢ IsRightCancelMul G✝ Elapsed time : 0ms

Timestamp : 1737093519203
Testing tactic 1 || RightCancelSemigroup.toIsRightCancelMul : ∀ (G : Type u) [inst : RightCancelSemigroup G], IsRightCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093519203
Testing tactic 2 || RightCancelSemigroup.toIsRightCancelMul : ∀ (G : Type u) [inst : RightCancelSemigroup G], IsRightCancelMul G
Result.exception ::
simp_all made no progress
Elapsed time : 541ms

Timestamp : 1737093519745
Testing tactic 3 || RightCancelSemigroup.toIsRightCancelMul : ∀ (G : Type u) [inst : RightCancelSemigroup G], IsRightCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : RightCancelSemigroup G✝
  ⊢ IsRightCancelMul G✝ Elapsed time : 11ms

Timestamp : 1737093519756
Testing tactic 4 || RightCancelSemigroup.toIsRightCancelMul : ∀ (G : Type u) [inst : RightCancelSemigroup G], IsRightCancelMul G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : RightCancelSemigroup G✝
  ⊢ IsRightCancelMul G✝ Elapsed time : 10ms

Timestamp : 1737093519767
Testing tactic 0 || AddRightCancelSemigroup.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddRightCancelSemigroup G], IsRightCancelAdd G
Result.exception ::
tactic 'rfl' failed, the left-hand side
  G✝
is not definitionally equal to the right-hand side
  AddSemigroup.toAdd
G✝ : Type u
inst✝ : AddRightCancelSemigroup G✝
⊢ IsRightCancelAdd G✝ Elapsed time : 0ms

Timestamp : 1737093519767
Testing tactic 1 || AddRightCancelSemigroup.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddRightCancelSemigroup G], IsRightCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093519768
Testing tactic 2 || AddRightCancelSemigroup.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddRightCancelSemigroup G], IsRightCancelAdd G
Result.exception ::
simp_all made no progress
Elapsed time : 627ms

Timestamp : 1737093520395
Testing tactic 3 || AddRightCancelSemigroup.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddRightCancelSemigroup G], IsRightCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : AddRightCancelSemigroup G✝
  ⊢ IsRightCancelAdd G✝ Elapsed time : 11ms

Timestamp : 1737093520406
Testing tactic 4 || AddRightCancelSemigroup.toIsRightCancelAdd : ∀ (G : Type u) [inst : AddRightCancelSemigroup G], IsRightCancelAdd G
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  G✝ : Type u
  inst✝ : AddRightCancelSemigroup G✝
  ⊢ IsRightCancelAdd G✝ Elapsed time : 10ms

Timestamp : 1737093520478
Testing tactic 0 || AddZeroClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : AddZeroClass M⦄, Add.add = Add.add → m₁ = m₂
Result.exception ::
tactic 'rfl' failed, the left-hand side
  m₁✝
is not definitionally equal to the right-hand side
  m₂✝
M✝ : Type u
m₁✝ m₂✝ : AddZeroClass M✝
a✝ : Add.add = Add.add
⊢ m₁✝ = m₂✝ Elapsed time : 0ms

Timestamp : 1737093520480
Testing tactic 1 || AddZeroClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : AddZeroClass M⦄, Add.add = Add.add → m₁ = m₂
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093520481
Testing tactic 2 || AddZeroClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : AddZeroClass M⦄, Add.add = Add.add → m₁ = m₂
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093520482
Testing tactic 3 || AddZeroClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : AddZeroClass M⦄, Add.add = Add.add → m₁ = m₂
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  m₁✝ m₂✝ : AddZeroClass M✝
  a✝ : Add.add = Add.add
  ⊢ m₁✝ = m₂✝ Elapsed time : 14ms

Timestamp : 1737093520496
Testing tactic 4 || AddZeroClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : AddZeroClass M⦄, Add.add = Add.add → m₁ = m₂
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  m₁✝ m₂✝ : AddZeroClass M✝
  a✝ : Add.add = Add.add
  ⊢ m₁✝ = m₂✝ Elapsed time : 12ms

Timestamp : 1737093520510
Testing tactic 0 || MulOneClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : MulOneClass M⦄, Mul.mul = Mul.mul → m₁ = m₂
Result.exception ::
tactic 'rfl' failed, the left-hand side
  m₁✝
is not definitionally equal to the right-hand side
  m₂✝
M✝ : Type u
m₁✝ m₂✝ : MulOneClass M✝
a✝ : Mul.mul = Mul.mul
⊢ m₁✝ = m₂✝ Elapsed time : 0ms

Timestamp : 1737093520511
Testing tactic 1 || MulOneClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : MulOneClass M⦄, Mul.mul = Mul.mul → m₁ = m₂
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093520512
Testing tactic 2 || MulOneClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : MulOneClass M⦄, Mul.mul = Mul.mul → m₁ = m₂
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093520513
Testing tactic 3 || MulOneClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : MulOneClass M⦄, Mul.mul = Mul.mul → m₁ = m₂
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  m₁✝ m₂✝ : MulOneClass M✝
  a✝ : Mul.mul = Mul.mul
  ⊢ m₁✝ = m₂✝ Elapsed time : 12ms

Timestamp : 1737093520526
Testing tactic 4 || MulOneClass.ext : ∀ {M : Type u} ⦃m₁ m₂ : MulOneClass M⦄, Mul.mul = Mul.mul → m₁ = m₂
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  m₁✝ m₂✝ : MulOneClass M✝
  a✝ : Mul.mul = Mul.mul
  ⊢ m₁✝ = m₂✝ Elapsed time : 11ms

Timestamp : 1737093520550
Testing tactic 0 || zero_add : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  0 + a✝
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u
inst✝ : AddZeroClass M✝
a✝ : M✝
⊢ 0 + a✝ = a✝ Elapsed time : 1ms

Timestamp : 1737093520552
Testing tactic 1 || zero_add : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093520553
Testing tactic 2 || zero_add : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a
Result.success
Elapsed time : 1ms

Timestamp : 1737093520554
Testing tactic 3 || zero_add : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : AddZeroClass M✝
  a✝ : M✝
  ⊢ 0 + a✝ = a✝ Elapsed time : 11ms

Timestamp : 1737093520566
Testing tactic 4 || zero_add : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), 0 + a = a
Result.success
Elapsed time : 12ms

Timestamp : 1737093520579
Testing tactic 0 || one_mul : ∀ {M : Type u} [inst : MulOneClass M] (a : M), 1 * a = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  1 * a✝
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u
inst✝ : MulOneClass M✝
a✝ : M✝
⊢ 1 * a✝ = a✝ Elapsed time : 0ms

Timestamp : 1737093520580
Testing tactic 1 || one_mul : ∀ {M : Type u} [inst : MulOneClass M] (a : M), 1 * a = a
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093520581
Testing tactic 2 || one_mul : ∀ {M : Type u} [inst : MulOneClass M] (a : M), 1 * a = a
Result.success
Elapsed time : 1ms

Timestamp : 1737093520582
Testing tactic 3 || one_mul : ∀ {M : Type u} [inst : MulOneClass M] (a : M), 1 * a = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : MulOneClass M✝
  a✝ : M✝
  ⊢ 1 * a✝ = a✝ Elapsed time : 10ms

Timestamp : 1737093520593
Testing tactic 4 || one_mul : ∀ {M : Type u} [inst : MulOneClass M] (a : M), 1 * a = a
Result.success
Elapsed time : 11ms

Timestamp : 1737093520613
Testing tactic 0 || mul_one : ∀ {M : Type u} [inst : MulOneClass M] (a : M), a * 1 = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ * 1
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u
inst✝ : MulOneClass M✝
a✝ : M✝
⊢ a✝ * 1 = a✝ Elapsed time : 1ms

Timestamp : 1737093520615
Testing tactic 1 || mul_one : ∀ {M : Type u} [inst : MulOneClass M] (a : M), a * 1 = a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093520616
Testing tactic 2 || mul_one : ∀ {M : Type u} [inst : MulOneClass M] (a : M), a * 1 = a
Result.success
Elapsed time : 1ms

Timestamp : 1737093520617
Testing tactic 3 || mul_one : ∀ {M : Type u} [inst : MulOneClass M] (a : M), a * 1 = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : MulOneClass M✝
  a✝ : M✝
  ⊢ a✝ * 1 = a✝ Elapsed time : 10ms

Timestamp : 1737093520628
Testing tactic 4 || mul_one : ∀ {M : Type u} [inst : MulOneClass M] (a : M), a * 1 = a
Result.success
Elapsed time : 11ms

Timestamp : 1737093520640
Testing tactic 0 || add_zero : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ + 0
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u
inst✝ : AddZeroClass M✝
a✝ : M✝
⊢ a✝ + 0 = a✝ Elapsed time : 1ms

Timestamp : 1737093520642
Testing tactic 1 || add_zero : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093520643
Testing tactic 2 || add_zero : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a
Result.success
Elapsed time : 1ms

Timestamp : 1737093520644
Testing tactic 3 || add_zero : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : AddZeroClass M✝
  a✝ : M✝
  ⊢ a✝ + 0 = a✝ Elapsed time : 11ms

Timestamp : 1737093520656
Testing tactic 4 || add_zero : ∀ {M : Type u} [inst : AddZeroClass M] (a : M), a + 0 = a
Result.success
Elapsed time : 12ms

Timestamp : 1737093520750
Testing tactic 0 || npowRec_add : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (m + n) a = npowRec m a * npowRec n a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowRec (m✝ + n✝) a✝
is not definitionally equal to the right-hand side
  npowRec m✝ a✝ * npowRec n✝ a✝
M✝ : Type u
inst✝¹ : One M✝
inst✝ : Semigroup M✝
m✝ n✝ : ℕ
hn✝ : n✝ ≠ 0
a✝ : M✝
ha✝ : 1 * a✝ = a✝
⊢ npowRec (m✝ + n✝) a✝ = npowRec m✝ a✝ * npowRec n✝ a✝ Elapsed time : 1ms

Timestamp : 1737093520754
Testing tactic 1 || npowRec_add : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (m + n) a = npowRec m a * npowRec n a
Result.subGoals
Elapsed time : 6ms

Timestamp : 1737093520761
Testing tactic 2 || npowRec_add : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (m + n) a = npowRec m a * npowRec n a
Result.subGoals
Elapsed time : 5ms

Timestamp : 1737093520766
Testing tactic 3 || npowRec_add : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (m + n) a = npowRec m a * npowRec n a
Result.subGoals
Elapsed time : 22ms

Timestamp : 1737093520790
Testing tactic 4 || npowRec_add : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (m + n) a = npowRec m a * npowRec n a
Result.subGoals
Elapsed time : 27ms

Timestamp : 1737093520818
Testing tactic 0 || nsmulRec_add : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (m + n) a = nsmulRec m a + nsmulRec n a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulRec (m✝ + n✝) a✝
is not definitionally equal to the right-hand side
  nsmulRec m✝ a✝ + nsmulRec n✝ a✝
M✝ : Type u
inst✝¹ : Zero M✝
inst✝ : AddSemigroup M✝
m✝ n✝ : ℕ
hn✝ : n✝ ≠ 0
a✝ : M✝
ha✝ : 0 + a✝ = a✝
⊢ nsmulRec (m✝ + n✝) a✝ = nsmulRec m✝ a✝ + nsmulRec n✝ a✝ Elapsed time : 0ms

Timestamp : 1737093520822
Testing tactic 1 || nsmulRec_add : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (m + n) a = nsmulRec m a + nsmulRec n a
Result.subGoals
Elapsed time : 4ms

Timestamp : 1737093520827
Testing tactic 2 || nsmulRec_add : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (m + n) a = nsmulRec m a + nsmulRec n a
Result.subGoals
Elapsed time : 5ms

Timestamp : 1737093520834
Testing tactic 3 || nsmulRec_add : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (m + n) a = nsmulRec m a + nsmulRec n a
Result.subGoals
Elapsed time : 24ms

Timestamp : 1737093520859
Testing tactic 4 || nsmulRec_add : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (m n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (m + n) a = nsmulRec m a + nsmulRec n a
Result.subGoals
Elapsed time : 29ms

Timestamp : 1737093520911
Testing tactic 0 || npowRec_succ : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (n + 1) a = a * npowRec n a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowRec (n✝ + 1) a✝
is not definitionally equal to the right-hand side
  a✝ * npowRec n✝ a✝
M✝ : Type u
inst✝¹ : One M✝
inst✝ : Semigroup M✝
n✝ : ℕ
hn✝ : n✝ ≠ 0
a✝ : M✝
ha✝ : 1 * a✝ = a✝
⊢ npowRec (n✝ + 1) a✝ = a✝ * npowRec n✝ a✝ Elapsed time : 1ms

Timestamp : 1737093520915
Testing tactic 1 || npowRec_succ : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (n + 1) a = a * npowRec n a
Result.subGoals
Elapsed time : 4ms

Timestamp : 1737093520920
Testing tactic 2 || npowRec_succ : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (n + 1) a = a * npowRec n a
Result.subGoals
Elapsed time : 4ms

Timestamp : 1737093520925
Testing tactic 3 || npowRec_succ : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (n + 1) a = a * npowRec n a
Result.subGoals
Elapsed time : 23ms

Timestamp : 1737093520949
Testing tactic 4 || npowRec_succ : ∀ {M : Type u} [inst : One M] [inst_1 : Semigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 1 * a = a → npowRec (n + 1) a = a * npowRec n a
Result.subGoals
Elapsed time : 24ms

Timestamp : 1737093520975
Testing tactic 0 || nsmulRec_succ : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (n + 1) a = a + nsmulRec n a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulRec (n✝ + 1) a✝
is not definitionally equal to the right-hand side
  a✝ + nsmulRec n✝ a✝
M✝ : Type u
inst✝¹ : Zero M✝
inst✝ : AddSemigroup M✝
n✝ : ℕ
hn✝ : n✝ ≠ 0
a✝ : M✝
ha✝ : 0 + a✝ = a✝
⊢ nsmulRec (n✝ + 1) a✝ = a✝ + nsmulRec n✝ a✝ Elapsed time : 1ms

Timestamp : 1737093520979
Testing tactic 1 || nsmulRec_succ : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (n + 1) a = a + nsmulRec n a
Result.subGoals
Elapsed time : 4ms

Timestamp : 1737093520984
Testing tactic 2 || nsmulRec_succ : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (n + 1) a = a + nsmulRec n a
Result.subGoals
Elapsed time : 6ms

Timestamp : 1737093520991
Testing tactic 3 || nsmulRec_succ : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (n + 1) a = a + nsmulRec n a
Result.subGoals
Elapsed time : 25ms

Timestamp : 1737093521017
Testing tactic 4 || nsmulRec_succ : ∀ {M : Type u} [inst : Zero M] [inst_1 : AddSemigroup M] (n : ℕ),
  n ≠ 0 → ∀ (a : M), 0 + a = a → nsmulRec (n + 1) a = a + nsmulRec n a
Result.subGoals
Elapsed time : 25ms

Timestamp : 1737093521129
Testing tactic 0 || nsmulRec'_succ : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), nsmulRec' (k + 1) m = nsmulRec' k m + m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulRec' (k✝ + 1) m✝
is not definitionally equal to the right-hand side
  nsmulRec' k✝ m✝ + m✝
M✝ : Type u_2
inst✝¹ : AddSemigroup M✝
inst✝ : Zero M✝
k✝ : ℕ
x✝ : k✝ ≠ 0
m✝ : M✝
⊢ nsmulRec' (k✝ + 1) m✝ = nsmulRec' k✝ m✝ + m✝ Elapsed time : 1ms

Timestamp : 1737093521132
Testing tactic 1 || nsmulRec'_succ : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), nsmulRec' (k + 1) m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521135
Testing tactic 2 || nsmulRec'_succ : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), nsmulRec' (k + 1) m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521138
Testing tactic 3 || nsmulRec'_succ : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), nsmulRec' (k + 1) m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 17ms

Timestamp : 1737093521156
Testing tactic 4 || nsmulRec'_succ : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), nsmulRec' (k + 1) m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 18ms

Timestamp : 1737093521175
Testing tactic 0 || npowRec'_succ : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), npowRec' (k + 1) m = npowRec' k m * m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowRec' (k✝ + 1) m✝
is not definitionally equal to the right-hand side
  npowRec' k✝ m✝ * m✝
M✝ : Type u_2
inst✝¹ : Semigroup M✝
inst✝ : One M✝
k✝ : ℕ
x✝ : k✝ ≠ 0
m✝ : M✝
⊢ npowRec' (k✝ + 1) m✝ = npowRec' k✝ m✝ * m✝ Elapsed time : 1ms

Timestamp : 1737093521178
Testing tactic 1 || npowRec'_succ : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), npowRec' (k + 1) m = npowRec' k m * m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521181
Testing tactic 2 || npowRec'_succ : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), npowRec' (k + 1) m = npowRec' k m * m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521183
Testing tactic 3 || npowRec'_succ : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), npowRec' (k + 1) m = npowRec' k m * m
Result.subGoals
Elapsed time : 17ms

Timestamp : 1737093521201
Testing tactic 4 || npowRec'_succ : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), npowRec' (k + 1) m = npowRec' k m * m
Result.subGoals
Elapsed time : 18ms

Timestamp : 1737093521260
Testing tactic 0 || npowRec'_two_mul : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec' (2 * k) m = npowRec' k (m * m)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowRec' (2 * k✝) m✝
is not definitionally equal to the right-hand side
  npowRec' k✝ (m✝ * m✝)
M✝ : Type u_2
inst✝¹ : Semigroup M✝
inst✝ : One M✝
k✝ : ℕ
m✝ : M✝
⊢ npowRec' (2 * k✝) m✝ = npowRec' k✝ (m✝ * m✝) Elapsed time : 1ms

Timestamp : 1737093521263
Testing tactic 1 || npowRec'_two_mul : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec' (2 * k) m = npowRec' k (m * m)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521265
Testing tactic 2 || npowRec'_two_mul : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec' (2 * k) m = npowRec' k (m * m)
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093521268
Testing tactic 3 || npowRec'_two_mul : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec' (2 * k) m = npowRec' k (m * m)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : Semigroup M✝
  inst✝ : One M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ npowRec' (2 * k✝) m✝ = npowRec' k✝ (m✝ * m✝) Elapsed time : 13ms

Timestamp : 1737093521282
Testing tactic 4 || npowRec'_two_mul : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec' (2 * k) m = npowRec' k (m * m)
Result.exception ::
aesop: Unable to interpret 'Init.Data.Nat.Basic._auxLemma.6' as an unsafe rule. Try specifying a builder.
Elapsed time : 3ms

Timestamp : 1737093521286
Testing tactic 0 || nsmulRec'_two_add : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec' (2 * k) m = nsmulRec' k (m + m)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulRec' (2 * k✝) m✝
is not definitionally equal to the right-hand side
  nsmulRec' k✝ (m✝ + m✝)
M✝ : Type u_2
inst✝¹ : AddSemigroup M✝
inst✝ : Zero M✝
k✝ : ℕ
m✝ : M✝
⊢ nsmulRec' (2 * k✝) m✝ = nsmulRec' k✝ (m✝ + m✝) Elapsed time : 1ms

Timestamp : 1737093521289
Testing tactic 1 || nsmulRec'_two_add : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec' (2 * k) m = nsmulRec' k (m + m)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521291
Testing tactic 2 || nsmulRec'_two_add : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec' (2 * k) m = nsmulRec' k (m + m)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521292
Testing tactic 3 || nsmulRec'_two_add : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec' (2 * k) m = nsmulRec' k (m + m)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ nsmulRec' (2 * k✝) m✝ = nsmulRec' k✝ (m✝ + m✝) Elapsed time : 13ms

Timestamp : 1737093521306
Testing tactic 4 || nsmulRec'_two_add : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec' (2 * k) m = nsmulRec' k (m + m)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ nsmulRec' (2 * k✝) m✝ = nsmulRec' k✝ (m✝ + m✝) Elapsed time : 14ms

Timestamp : 1737093521358
Testing tactic 0 || npowRec'_mul_comm : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), m * npowRec' k m = npowRec' k m * m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  m✝ * npowRec' k✝ m✝
is not definitionally equal to the right-hand side
  npowRec' k✝ m✝ * m✝
M✝ : Type u_2
inst✝¹ : Semigroup M✝
inst✝ : One M✝
k✝ : ℕ
k0✝ : k✝ ≠ 0
m✝ : M✝
⊢ m✝ * npowRec' k✝ m✝ = npowRec' k✝ m✝ * m✝ Elapsed time : 0ms

Timestamp : 1737093521361
Testing tactic 1 || npowRec'_mul_comm : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), m * npowRec' k m = npowRec' k m * m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521364
Testing tactic 2 || npowRec'_mul_comm : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), m * npowRec' k m = npowRec' k m * m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521367
Testing tactic 3 || npowRec'_mul_comm : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), m * npowRec' k m = npowRec' k m * m
Result.subGoals
Elapsed time : 16ms

Timestamp : 1737093521384
Testing tactic 4 || npowRec'_mul_comm : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] {k : ℕ}, k ≠ 0 → ∀ (m : M), m * npowRec' k m = npowRec' k m * m
Result.exception ::
aesop: Unable to interpret '_auxLemma.1' as an unsafe rule. Try specifying a builder.
Elapsed time : 3ms

Timestamp : 1737093521388
Testing tactic 0 || nsmulRec'_add_comm : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), m + nsmulRec' k m = nsmulRec' k m + m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  m✝ + nsmulRec' k✝ m✝
is not definitionally equal to the right-hand side
  nsmulRec' k✝ m✝ + m✝
M✝ : Type u_2
inst✝¹ : AddSemigroup M✝
inst✝ : Zero M✝
k✝ : ℕ
k0✝ : k✝ ≠ 0
m✝ : M✝
⊢ m✝ + nsmulRec' k✝ m✝ = nsmulRec' k✝ m✝ + m✝ Elapsed time : 1ms

Timestamp : 1737093521391
Testing tactic 1 || nsmulRec'_add_comm : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), m + nsmulRec' k m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093521394
Testing tactic 2 || nsmulRec'_add_comm : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), m + nsmulRec' k m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093521397
Testing tactic 3 || nsmulRec'_add_comm : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), m + nsmulRec' k m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 18ms

Timestamp : 1737093521415
Testing tactic 4 || nsmulRec'_add_comm : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] {k : ℕ},
  k ≠ 0 → ∀ (m : M), m + nsmulRec' k m = nsmulRec' k m + m
Result.subGoals
Elapsed time : 18ms

Timestamp : 1737093521476
Testing tactic 0 || npowRec_eq : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec (k + 1) m = 1 * npowRec' (k + 1) m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowRec (k✝ + 1) m✝
is not definitionally equal to the right-hand side
  1 * npowRec' (k✝ + 1) m✝
M✝ : Type u_2
inst✝¹ : Semigroup M✝
inst✝ : One M✝
k✝ : ℕ
m✝ : M✝
⊢ npowRec (k✝ + 1) m✝ = 1 * npowRec' (k✝ + 1) m✝ Elapsed time : 1ms

Timestamp : 1737093521479
Testing tactic 1 || npowRec_eq : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec (k + 1) m = 1 * npowRec' (k + 1) m
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521481
Testing tactic 2 || npowRec_eq : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec (k + 1) m = 1 * npowRec' (k + 1) m
Result.subGoals
Elapsed time : 4ms

Timestamp : 1737093521486
Testing tactic 3 || npowRec_eq : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec (k + 1) m = 1 * npowRec' (k + 1) m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : Semigroup M✝
  inst✝ : One M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ npowRec (k✝ + 1) m✝ = 1 * npowRec' (k✝ + 1) m✝ Elapsed time : 14ms

Timestamp : 1737093521502
Testing tactic 4 || npowRec_eq : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m : M), npowRec (k + 1) m = 1 * npowRec' (k + 1) m
Result.exception ::
aesop: Unable to interpret 'Init.Data.Nat.Basic._auxLemma.6' as an unsafe rule. Try specifying a builder.
Elapsed time : 4ms

Timestamp : 1737093521507
Testing tactic 0 || nsmulRec_eq : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec (k + 1) m = 0 + nsmulRec' (k + 1) m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulRec (k✝ + 1) m✝
is not definitionally equal to the right-hand side
  0 + nsmulRec' (k✝ + 1) m✝
M✝ : Type u_2
inst✝¹ : AddSemigroup M✝
inst✝ : Zero M✝
k✝ : ℕ
m✝ : M✝
⊢ nsmulRec (k✝ + 1) m✝ = 0 + nsmulRec' (k✝ + 1) m✝ Elapsed time : 2ms

Timestamp : 1737093521510
Testing tactic 1 || nsmulRec_eq : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec (k + 1) m = 0 + nsmulRec' (k + 1) m
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093521513
Testing tactic 2 || nsmulRec_eq : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec (k + 1) m = 0 + nsmulRec' (k + 1) m
Result.subGoals
Elapsed time : 5ms

Timestamp : 1737093521518
Testing tactic 3 || nsmulRec_eq : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec (k + 1) m = 0 + nsmulRec' (k + 1) m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ nsmulRec (k✝ + 1) m✝ = 0 + nsmulRec' (k✝ + 1) m✝ Elapsed time : 14ms

Timestamp : 1737093521534
Testing tactic 4 || nsmulRec_eq : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m : M), nsmulRec (k + 1) m = 0 + nsmulRec' (k + 1) m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ : M✝
  ⊢ nsmulRec (k✝ + 1) m✝ = 0 + nsmulRec' (k✝ + 1) m✝ Elapsed time : 16ms

Timestamp : 1737093521646
Testing tactic 0 || nsmulBinRec.go_spec : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m n : M),
  nsmulBinRec.go (k + 1) m n = m + nsmulRec' (k + 1) n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  nsmulBinRec.go (k✝ + 1) m✝ n✝
is not definitionally equal to the right-hand side
  m✝ + nsmulRec' (k✝ + 1) n✝
M✝ : Type u_2
inst✝¹ : AddSemigroup M✝
inst✝ : Zero M✝
k✝ : ℕ
m✝ n✝ : M✝
⊢ nsmulBinRec.go (k✝ + 1) m✝ n✝ = m✝ + nsmulRec' (k✝ + 1) n✝ Elapsed time : 1ms

Timestamp : 1737093521649
Testing tactic 1 || nsmulBinRec.go_spec : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m n : M),
  nsmulBinRec.go (k + 1) m n = m + nsmulRec' (k + 1) n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521651
Testing tactic 2 || nsmulBinRec.go_spec : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m n : M),
  nsmulBinRec.go (k + 1) m n = m + nsmulRec' (k + 1) n
Result.exception ::
simp_all made no progress
Elapsed time : 14ms

Timestamp : 1737093521666
Testing tactic 3 || nsmulBinRec.go_spec : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m n : M),
  nsmulBinRec.go (k + 1) m n = m + nsmulRec' (k + 1) n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ n✝ : M✝
  ⊢ nsmulBinRec.go (k✝ + 1) m✝ n✝ = m✝ + nsmulRec' (k✝ + 1) n✝ Elapsed time : 13ms

Timestamp : 1737093521681
Testing tactic 4 || nsmulBinRec.go_spec : ∀ {M : Type u_2} [inst : AddSemigroup M] [inst_1 : Zero M] (k : ℕ) (m n : M),
  nsmulBinRec.go (k + 1) m n = m + nsmulRec' (k + 1) n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : AddSemigroup M✝
  inst✝ : Zero M✝
  k✝ : ℕ
  m✝ n✝ : M✝
  ⊢ nsmulBinRec.go (k✝ + 1) m✝ n✝ = m✝ + nsmulRec' (k✝ + 1) n✝ Elapsed time : 20ms

Timestamp : 1737093521703
Testing tactic 0 || npowBinRec.go_spec : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m n : M),
  npowBinRec.go (k + 1) m n = m * npowRec' (k + 1) n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  npowBinRec.go (k✝ + 1) m✝ n✝
is not definitionally equal to the right-hand side
  m✝ * npowRec' (k✝ + 1) n✝
M✝ : Type u_2
inst✝¹ : Semigroup M✝
inst✝ : One M✝
k✝ : ℕ
m✝ n✝ : M✝
⊢ npowBinRec.go (k✝ + 1) m✝ n✝ = m✝ * npowRec' (k✝ + 1) n✝ Elapsed time : 1ms

Timestamp : 1737093521706
Testing tactic 1 || npowBinRec.go_spec : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m n : M),
  npowBinRec.go (k + 1) m n = m * npowRec' (k + 1) n
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093521707
Testing tactic 2 || npowBinRec.go_spec : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m n : M),
  npowBinRec.go (k + 1) m n = m * npowRec' (k + 1) n
Result.exception ::
simp_all made no progress
Elapsed time : 14ms

Timestamp : 1737093521721
Testing tactic 3 || npowBinRec.go_spec : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m n : M),
  npowBinRec.go (k + 1) m n = m * npowRec' (k + 1) n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : Semigroup M✝
  inst✝ : One M✝
  k✝ : ℕ
  m✝ n✝ : M✝
  ⊢ npowBinRec.go (k✝ + 1) m✝ n✝ = m✝ * npowRec' (k✝ + 1) n✝ Elapsed time : 12ms

Timestamp : 1737093521736
Testing tactic 4 || npowBinRec.go_spec : ∀ {M : Type u_2} [inst : Semigroup M] [inst_1 : One M] (k : ℕ) (m n : M),
  npowBinRec.go (k + 1) m n = m * npowRec' (k + 1) n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝¹ : Semigroup M✝
  inst✝ : One M✝
  k✝ : ℕ
  m✝ n✝ : M✝
  ⊢ npowBinRec.go (k✝ + 1) m✝ n✝ = m✝ * npowRec' (k✝ + 1) n✝ Elapsed time : 18ms

Timestamp : 1737093521799
Testing tactic 0 || nsmulRec_eq_nsmulBinRec : @nsmulRecAuto = @nsmulBinRecAuto
Result.exception ::
tactic 'rfl' failed, the left-hand side
  @nsmulRecAuto
is not definitionally equal to the right-hand side
  @nsmulBinRecAuto
⊢ @nsmulRecAuto = @nsmulBinRecAuto
Elapsed time : 0ms

Timestamp : 1737093521800
Testing tactic 1 || nsmulRec_eq_nsmulBinRec : @nsmulRecAuto = @nsmulBinRecAuto
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093521801
Testing tactic 2 || nsmulRec_eq_nsmulBinRec : @nsmulRecAuto = @nsmulBinRecAuto
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521802
Testing tactic 3 || nsmulRec_eq_nsmulBinRec : @nsmulRecAuto = @nsmulBinRecAuto
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  ⊢ @nsmulRecAuto = @nsmulBinRecAuto
Elapsed time : 15ms

Timestamp : 1737093521817
Testing tactic 4 || nsmulRec_eq_nsmulBinRec : @nsmulRecAuto = @nsmulBinRecAuto
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  ⊢ @nsmulRecAuto = @nsmulBinRecAuto
Elapsed time : 17ms

Timestamp : 1737093521835
Testing tactic 0 || npowRec_eq_npowBinRec : @npowRecAuto = @npowBinRecAuto
Result.exception ::
tactic 'rfl' failed, the left-hand side
  @npowRecAuto
is not definitionally equal to the right-hand side
  @npowBinRecAuto
⊢ @npowRecAuto = @npowBinRecAuto
Elapsed time : 0ms

Timestamp : 1737093521836
Testing tactic 1 || npowRec_eq_npowBinRec : @npowRecAuto = @npowBinRecAuto
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521836
Testing tactic 2 || npowRec_eq_npowBinRec : @npowRecAuto = @npowBinRecAuto
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521837
Testing tactic 3 || npowRec_eq_npowBinRec : @npowRecAuto = @npowBinRecAuto
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  ⊢ @npowRecAuto = @npowBinRecAuto
Elapsed time : 14ms

Timestamp : 1737093521852
Testing tactic 4 || npowRec_eq_npowBinRec : @npowRecAuto = @npowBinRecAuto
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  ⊢ @npowRecAuto = @npowBinRecAuto
Elapsed time : 17ms

Timestamp : 1737093521924
Testing tactic 0 || npow_eq_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ) (x : M), Monoid.npow n x = x ^ n
Result.success
Elapsed time : 1ms

Timestamp : 1737093521925
Testing tactic 1 || npow_eq_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ) (x : M), Monoid.npow n x = x ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521927
Testing tactic 2 || npow_eq_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ) (x : M), Monoid.npow n x = x ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521928
Testing tactic 3 || npow_eq_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ) (x : M), Monoid.npow n x = x ^ n
Result.success
Elapsed time : 10ms

Timestamp : 1737093521938
Testing tactic 4 || npow_eq_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ) (x : M), Monoid.npow n x = x ^ n
Result.success
Elapsed time : 9ms

Timestamp : 1737093521948
Testing tactic 0 || nsmul_eq_smul : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul n x = n • x
Result.success
Elapsed time : 0ms

Timestamp : 1737093521949
Testing tactic 1 || nsmul_eq_smul : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul n x = n • x
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093521950
Testing tactic 2 || nsmul_eq_smul : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul n x = n • x
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521951
Testing tactic 3 || nsmul_eq_smul : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul n x = n • x
Result.success
Elapsed time : 9ms

Timestamp : 1737093521961
Testing tactic 4 || nsmul_eq_smul : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul n x = n • x
Result.success
Elapsed time : 9ms

Timestamp : 1737093521987
Testing tactic 0 || left_inv_eq_right_inv : ∀ {M : Type u_2} [inst : Monoid M] {a b c : M}, b * a = 1 → a * c = 1 → b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝
is not definitionally equal to the right-hand side
  c✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ b✝ c✝ : M✝
hba✝ : b✝ * a✝ = 1
hac✝ : a✝ * c✝ = 1
⊢ b✝ = c✝ Elapsed time : 0ms

Timestamp : 1737093521989
Testing tactic 1 || left_inv_eq_right_inv : ∀ {M : Type u_2} [inst : Monoid M] {a b c : M}, b * a = 1 → a * c = 1 → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093521990
Testing tactic 2 || left_inv_eq_right_inv : ∀ {M : Type u_2} [inst : Monoid M] {a b c : M}, b * a = 1 → a * c = 1 → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093521992
Testing tactic 3 || left_inv_eq_right_inv : ∀ {M : Type u_2} [inst : Monoid M] {a b c : M}, b * a = 1 → a * c = 1 → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ b✝ c✝ : M✝
  hba✝ : b✝ * a✝ = 1
  hac✝ : a✝ * c✝ = 1
  ⊢ b✝ = c✝ Elapsed time : 13ms

Timestamp : 1737093522006
Testing tactic 4 || left_inv_eq_right_inv : ∀ {M : Type u_2} [inst : Monoid M] {a b c : M}, b * a = 1 → a * c = 1 → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ b✝ c✝ : M✝
  hba✝ : b✝ * a✝ = 1
  hac✝ : a✝ * c✝ = 1
  ⊢ b✝ = c✝ Elapsed time : 14ms

Timestamp : 1737093522022
Testing tactic 0 || left_neg_eq_right_neg : ∀ {M : Type u_2} [inst : AddMonoid M] {a b c : M}, b + a = 0 → a + c = 0 → b = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  b✝
is not definitionally equal to the right-hand side
  c✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ b✝ c✝ : M✝
hba✝ : b✝ + a✝ = 0
hac✝ : a✝ + c✝ = 0
⊢ b✝ = c✝ Elapsed time : 1ms

Timestamp : 1737093522023
Testing tactic 1 || left_neg_eq_right_neg : ∀ {M : Type u_2} [inst : AddMonoid M] {a b c : M}, b + a = 0 → a + c = 0 → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522025
Testing tactic 2 || left_neg_eq_right_neg : ∀ {M : Type u_2} [inst : AddMonoid M] {a b c : M}, b + a = 0 → a + c = 0 → b = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522027
Testing tactic 3 || left_neg_eq_right_neg : ∀ {M : Type u_2} [inst : AddMonoid M] {a b c : M}, b + a = 0 → a + c = 0 → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ b✝ c✝ : M✝
  hba✝ : b✝ + a✝ = 0
  hac✝ : a✝ + c✝ = 0
  ⊢ b✝ = c✝ Elapsed time : 13ms

Timestamp : 1737093522041
Testing tactic 4 || left_neg_eq_right_neg : ∀ {M : Type u_2} [inst : AddMonoid M] {a b c : M}, b + a = 0 → a + c = 0 → b = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ b✝ c✝ : M✝
  hba✝ : b✝ + a✝ = 0
  hac✝ : a✝ + c✝ = 0
  ⊢ b✝ = c✝ Elapsed time : 14ms

Timestamp : 1737093522066
Testing tactic 0 || pow_zero : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 0 = 1
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 0
is not definitionally equal to the right-hand side
  1
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 0 = 1 Elapsed time : 1ms

Timestamp : 1737093522068
Testing tactic 1 || pow_zero : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 0 = 1
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093522069
Testing tactic 2 || pow_zero : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 0 = 1
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522070
Testing tactic 3 || pow_zero : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 0 = 1
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 0 = 1 Elapsed time : 12ms

Timestamp : 1737093522082
Testing tactic 4 || pow_zero : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 0 = 1
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 0 = 1 Elapsed time : 12ms

Timestamp : 1737093522094
Testing tactic 0 || zero_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 0 • a = 0
Result.exception ::
tactic 'rfl' failed, the left-hand side
  0 • a✝
is not definitionally equal to the right-hand side
  0
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
⊢ 0 • a✝ = 0 Elapsed time : 1ms

Timestamp : 1737093522096
Testing tactic 1 || zero_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 0 • a = 0
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522097
Testing tactic 2 || zero_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 0 • a = 0
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522098
Testing tactic 3 || zero_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 0 • a = 0
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 0 • a✝ = 0 Elapsed time : 11ms

Timestamp : 1737093522110
Testing tactic 4 || zero_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 0 • a = 0
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 0 • a✝ = 0 Elapsed time : 11ms

Timestamp : 1737093522133
Testing tactic 0 || succ_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = n • a + a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (n✝ + 1) • a✝
is not definitionally equal to the right-hand side
  n✝ • a✝ + a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
n✝ : ℕ
⊢ (n✝ + 1) • a✝ = n✝ • a✝ + a✝ Elapsed time : 1ms

Timestamp : 1737093522136
Testing tactic 1 || succ_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = n • a + a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522138
Testing tactic 2 || succ_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = n • a + a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522140
Testing tactic 3 || succ_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = n • a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ (n✝ + 1) • a✝ = n✝ • a✝ + a✝ Elapsed time : 12ms

Timestamp : 1737093522154
Testing tactic 4 || succ_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = n • a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ (n✝ + 1) • a✝ = n✝ • a✝ + a✝ Elapsed time : 13ms

Timestamp : 1737093522169
Testing tactic 0 || pow_succ : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a ^ n * a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ (n✝ + 1)
is not definitionally equal to the right-hand side
  a✝ ^ n✝ * a✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
n✝ : ℕ
⊢ a✝ ^ (n✝ + 1) = a✝ ^ n✝ * a✝ Elapsed time : 1ms

Timestamp : 1737093522171
Testing tactic 1 || pow_succ : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a ^ n * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522173
Testing tactic 2 || pow_succ : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a ^ n * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522174
Testing tactic 3 || pow_succ : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a ^ n * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ (n✝ + 1) = a✝ ^ n✝ * a✝ Elapsed time : 12ms

Timestamp : 1737093522188
Testing tactic 4 || pow_succ : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a ^ n * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ (n✝ + 1) = a✝ ^ n✝ * a✝ Elapsed time : 12ms

Timestamp : 1737093522216
Testing tactic 0 || one_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 1 • a = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  1 • a✝
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
⊢ 1 • a✝ = a✝ Elapsed time : 1ms

Timestamp : 1737093522217
Testing tactic 1 || one_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 1 • a = a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522218
Testing tactic 2 || one_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 1 • a = a
Result.success
Elapsed time : 2ms

Timestamp : 1737093522221
Testing tactic 3 || one_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 1 • a = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 1 • a✝ = a✝ Elapsed time : 11ms

Timestamp : 1737093522233
Testing tactic 4 || one_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 1 • a = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 1 • a✝ = a✝ Elapsed time : 12ms

Timestamp : 1737093522246
Testing tactic 0 || pow_one : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 1 = a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 1
is not definitionally equal to the right-hand side
  a✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 1 = a✝ Elapsed time : 0ms

Timestamp : 1737093522247
Testing tactic 1 || pow_one : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 1 = a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522248
Testing tactic 2 || pow_one : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 1 = a
Result.success
Elapsed time : 2ms

Timestamp : 1737093522251
Testing tactic 3 || pow_one : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 1 = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 1 = a✝ Elapsed time : 11ms

Timestamp : 1737093522262
Testing tactic 4 || pow_one : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 1 = a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 1 = a✝ Elapsed time : 12ms

Timestamp : 1737093522303
Testing tactic 0 || succ_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = a + n • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (n✝ + 1) • a✝
is not definitionally equal to the right-hand side
  a✝ + n✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
n✝ : ℕ
⊢ (n✝ + 1) • a✝ = a✝ + n✝ • a✝ Elapsed time : 1ms

Timestamp : 1737093522307
Testing tactic 1 || succ_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = a + n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522309
Testing tactic 2 || succ_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = a + n • a
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093522312
Testing tactic 3 || succ_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ (n✝ + 1) • a✝ = a✝ + n✝ • a✝ Elapsed time : 13ms

Timestamp : 1737093522327
Testing tactic 4 || succ_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), (n + 1) • a = a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ (n✝ + 1) • a✝ = a✝ + n✝ • a✝ Elapsed time : 16ms

Timestamp : 1737093522345
Testing tactic 0 || pow_succ' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a * a ^ n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ (n✝ + 1)
is not definitionally equal to the right-hand side
  a✝ * a✝ ^ n✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
n✝ : ℕ
⊢ a✝ ^ (n✝ + 1) = a✝ * a✝ ^ n✝ Elapsed time : 1ms

Timestamp : 1737093522348
Testing tactic 1 || pow_succ' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a * a ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522349
Testing tactic 2 || pow_succ' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a * a ^ n
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093522352
Testing tactic 3 || pow_succ' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ (n✝ + 1) = a✝ * a✝ ^ n✝ Elapsed time : 13ms

Timestamp : 1737093522366
Testing tactic 4 || pow_succ' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ (n + 1) = a * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ (n✝ + 1) = a✝ * a✝ ^ n✝ Elapsed time : 14ms

Timestamp : 1737093522395
Testing tactic 0 || nsmul_add_comm' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), n • a + a = a + n • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  n✝ • a✝ + a✝
is not definitionally equal to the right-hand side
  a✝ + n✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
n✝ : ℕ
⊢ n✝ • a✝ + a✝ = a✝ + n✝ • a✝ Elapsed time : 1ms

Timestamp : 1737093522398
Testing tactic 1 || nsmul_add_comm' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), n • a + a = a + n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522400
Testing tactic 2 || nsmul_add_comm' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), n • a + a = a + n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522402
Testing tactic 3 || nsmul_add_comm' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), n • a + a = a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ n✝ • a✝ + a✝ = a✝ + n✝ • a✝ Elapsed time : 13ms

Timestamp : 1737093522416
Testing tactic 4 || nsmul_add_comm' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (n : ℕ), n • a + a = a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ n✝ • a✝ + a✝ = a✝ + n✝ • a✝ Elapsed time : 14ms

Timestamp : 1737093522432
Testing tactic 0 || pow_mul_comm' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ n * a = a * a ^ n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ n✝ * a✝
is not definitionally equal to the right-hand side
  a✝ * a✝ ^ n✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
n✝ : ℕ
⊢ a✝ ^ n✝ * a✝ = a✝ * a✝ ^ n✝ Elapsed time : 1ms

Timestamp : 1737093522434
Testing tactic 1 || pow_mul_comm' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ n * a = a * a ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522435
Testing tactic 2 || pow_mul_comm' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ n * a = a * a ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522437
Testing tactic 3 || pow_mul_comm' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ n * a = a * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ n✝ * a✝ = a✝ * a✝ ^ n✝ Elapsed time : 11ms

Timestamp : 1737093522450
Testing tactic 4 || pow_mul_comm' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (n : ℕ), a ^ n * a = a * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  n✝ : ℕ
  ⊢ a✝ ^ n✝ * a✝ = a✝ * a✝ ^ n✝ Elapsed time : 13ms

Timestamp : 1737093522477
Testing tactic 0 || pow_two : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 2
is not definitionally equal to the right-hand side
  a✝ * a✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 2 = a✝ * a✝ Elapsed time : 0ms

Timestamp : 1737093522479
Testing tactic 1 || pow_two : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522480
Testing tactic 2 || pow_two : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.success
Elapsed time : 3ms

Timestamp : 1737093522483
Testing tactic 3 || pow_two : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 2 = a✝ * a✝ Elapsed time : 12ms

Timestamp : 1737093522495
Testing tactic 4 || pow_two : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 2 = a✝ * a✝ Elapsed time : 13ms

Timestamp : 1737093522509
Testing tactic 0 || two_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 2 • a = a + a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  2 • a✝
is not definitionally equal to the right-hand side
  a✝ + a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
⊢ 2 • a✝ = a✝ + a✝ Elapsed time : 1ms

Timestamp : 1737093522511
Testing tactic 1 || two_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 2 • a = a + a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522513
Testing tactic 2 || two_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 2 • a = a + a
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093522516
Testing tactic 3 || two_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 2 • a = a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 2 • a✝ = a✝ + a✝ Elapsed time : 11ms

Timestamp : 1737093522528
Testing tactic 4 || two_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 2 • a = a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 2 • a✝ = a✝ + a✝ Elapsed time : 12ms

Timestamp : 1737093522548
Testing tactic 0 || sq : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 2
is not definitionally equal to the right-hand side
  a✝ * a✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 2 = a✝ * a✝ Elapsed time : 1ms

Timestamp : 1737093522549
Testing tactic 1 || sq : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522551
Testing tactic 2 || sq : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.success
Elapsed time : 1ms

Timestamp : 1737093522552
Testing tactic 3 || sq : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 2 = a✝ * a✝ Elapsed time : 11ms

Timestamp : 1737093522564
Testing tactic 4 || sq : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 2 = a * a
Result.success
Elapsed time : 12ms

Timestamp : 1737093522590
Testing tactic 0 || three'_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + a + a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  3 • a✝
is not definitionally equal to the right-hand side
  a✝ + a✝ + a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
⊢ 3 • a✝ = a✝ + a✝ + a✝ Elapsed time : 1ms

Timestamp : 1737093522593
Testing tactic 1 || three'_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + a + a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522594
Testing tactic 2 || three'_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + a + a
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093522598
Testing tactic 3 || three'_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 3 • a✝ = a✝ + a✝ + a✝ Elapsed time : 12ms

Timestamp : 1737093522611
Testing tactic 4 || three'_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + a + a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 3 • a✝ = a✝ + a✝ + a✝ Elapsed time : 12ms

Timestamp : 1737093522625
Testing tactic 0 || pow_three' : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * a * a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 3
is not definitionally equal to the right-hand side
  a✝ * a✝ * a✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 3 = a✝ * a✝ * a✝ Elapsed time : 0ms

Timestamp : 1737093522627
Testing tactic 1 || pow_three' : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * a * a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522628
Testing tactic 2 || pow_three' : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * a * a
Result.success
Elapsed time : 2ms

Timestamp : 1737093522631
Testing tactic 3 || pow_three' : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * a * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 3 = a✝ * a✝ * a✝ Elapsed time : 11ms

Timestamp : 1737093522643
Testing tactic 4 || pow_three' : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * a * a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 3 = a✝ * a✝ * a✝ Elapsed time : 12ms

Timestamp : 1737093522668
Testing tactic 0 || three_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + (a + a)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  3 • a✝
is not definitionally equal to the right-hand side
  a✝ + (a✝ + a✝)
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
⊢ 3 • a✝ = a✝ + (a✝ + a✝) Elapsed time : 1ms

Timestamp : 1737093522671
Testing tactic 1 || three_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + (a + a)
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093522672
Testing tactic 2 || three_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + (a + a)
Result.subGoals
Elapsed time : 3ms

Timestamp : 1737093522676
Testing tactic 3 || three_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + (a + a)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 3 • a✝ = a✝ + (a✝ + a✝) Elapsed time : 12ms

Timestamp : 1737093522689
Testing tactic 4 || three_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M), 3 • a = a + (a + a)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  ⊢ 3 • a✝ = a✝ + (a✝ + a✝) Elapsed time : 12ms

Timestamp : 1737093522703
Testing tactic 0 || pow_three : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * (a * a)
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ 3
is not definitionally equal to the right-hand side
  a✝ * (a✝ * a✝)
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
⊢ a✝ ^ 3 = a✝ * (a✝ * a✝) Elapsed time : 1ms

Timestamp : 1737093522705
Testing tactic 1 || pow_three : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * (a * a)
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522706
Testing tactic 2 || pow_three : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * (a * a)
Result.success
Elapsed time : 2ms

Timestamp : 1737093522709
Testing tactic 3 || pow_three : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * (a * a)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 3 = a✝ * (a✝ * a✝) Elapsed time : 13ms

Timestamp : 1737093522723
Testing tactic 4 || pow_three : ∀ {M : Type u_2} [inst : Monoid M] (a : M), a ^ 3 = a * (a * a)
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  ⊢ a✝ ^ 3 = a✝ * (a✝ * a✝) Elapsed time : 13ms

Timestamp : 1737093522755
Testing tactic 0 || one_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ), 1 ^ n = 1
Result.exception ::
tactic 'rfl' failed, the left-hand side
  1 ^ n✝
is not definitionally equal to the right-hand side
  1
M✝ : Type u_2
inst✝ : Monoid M✝
n✝ : ℕ
⊢ 1 ^ n✝ = 1 Elapsed time : 0ms

Timestamp : 1737093522757
Testing tactic 1 || one_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ), 1 ^ n = 1
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522758
Testing tactic 2 || one_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ), 1 ^ n = 1
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522759
Testing tactic 3 || one_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ), 1 ^ n = 1
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  n✝ : ℕ
  ⊢ 1 ^ n✝ = 1 Elapsed time : 12ms

Timestamp : 1737093522772
Testing tactic 4 || one_pow : ∀ {M : Type u_2} [inst : Monoid M] (n : ℕ), 1 ^ n = 1
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  n✝ : ℕ
  ⊢ 1 ^ n✝ = 1 Elapsed time : 13ms

Timestamp : 1737093522786
Testing tactic 0 || nsmul_zero : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ), n • 0 = 0
Result.exception ::
tactic 'rfl' failed, the left-hand side
  n✝ • 0
is not definitionally equal to the right-hand side
  0
M✝ : Type u_2
inst✝ : AddMonoid M✝
n✝ : ℕ
⊢ n✝ • 0 = 0 Elapsed time : 1ms

Timestamp : 1737093522788
Testing tactic 1 || nsmul_zero : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ), n • 0 = 0
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522790
Testing tactic 2 || nsmul_zero : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ), n • 0 = 0
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522791
Testing tactic 3 || nsmul_zero : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ), n • 0 = 0
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  n✝ : ℕ
  ⊢ n✝ • 0 = 0 Elapsed time : 10ms

Timestamp : 1737093522803
Testing tactic 4 || nsmul_zero : ∀ {M : Type u_2} [inst : AddMonoid M] (n : ℕ), n • 0 = 0
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  n✝ : ℕ
  ⊢ n✝ • 0 = 0 Elapsed time : 12ms

Timestamp : 1737093522845
Testing tactic 0 || pow_add : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ (m✝ + n✝)
is not definitionally equal to the right-hand side
  a✝ ^ m✝ * a✝ ^ n✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ a✝ ^ (m✝ + n✝) = a✝ ^ m✝ * a✝ ^ n✝ Elapsed time : 1ms

Timestamp : 1737093522848
Testing tactic 1 || pow_add : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522850
Testing tactic 2 || pow_add : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093522852
Testing tactic 3 || pow_add : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ + n✝) = a✝ ^ m✝ * a✝ ^ n✝ Elapsed time : 13ms

Timestamp : 1737093522866
Testing tactic 4 || pow_add : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m + n) = a ^ m * a ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ + n✝) = a✝ ^ m✝ * a✝ ^ n✝ Elapsed time : 15ms

Timestamp : 1737093522883
Testing tactic 0 || add_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m + n) • a = m • a + n • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (m✝ + n✝) • a✝
is not definitionally equal to the right-hand side
  m✝ • a✝ + n✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ (m✝ + n✝) • a✝ = m✝ • a✝ + n✝ • a✝ Elapsed time : 1ms

Timestamp : 1737093522886
Testing tactic 1 || add_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m + n) • a = m • a + n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522888
Testing tactic 2 || add_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m + n) • a = m • a + n • a
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093522891
Testing tactic 3 || add_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m + n) • a = m • a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ + n✝) • a✝ = m✝ • a✝ + n✝ • a✝ Elapsed time : 12ms

Timestamp : 1737093522906
Testing tactic 4 || add_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m + n) • a = m • a + n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ + n✝) • a✝ = m✝ • a✝ + n✝ • a✝ Elapsed time : 15ms

Timestamp : 1737093522937
Testing tactic 0 || nsmul_add_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), m • a + n • a = n • a + m • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  m✝ • a✝ + n✝ • a✝
is not definitionally equal to the right-hand side
  n✝ • a✝ + m✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ m✝ • a✝ + n✝ • a✝ = n✝ • a✝ + m✝ • a✝ Elapsed time : 1ms

Timestamp : 1737093522942
Testing tactic 1 || nsmul_add_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), m • a + n • a = n • a + m • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522944
Testing tactic 2 || nsmul_add_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), m • a + n • a = n • a + m • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522947
Testing tactic 3 || nsmul_add_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), m • a + n • a = n • a + m • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ m✝ • a✝ + n✝ • a✝ = n✝ • a✝ + m✝ • a✝ Elapsed time : 12ms

Timestamp : 1737093522961
Testing tactic 4 || nsmul_add_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), m • a + n • a = n • a + m • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ m✝ • a✝ + n✝ • a✝ = n✝ • a✝ + m✝ • a✝ Elapsed time : 13ms

Timestamp : 1737093522976
Testing tactic 0 || pow_mul_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ m * a ^ n = a ^ n * a ^ m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ m✝ * a✝ ^ n✝
is not definitionally equal to the right-hand side
  a✝ ^ n✝ * a✝ ^ m✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ a✝ ^ m✝ * a✝ ^ n✝ = a✝ ^ n✝ * a✝ ^ m✝ Elapsed time : 1ms

Timestamp : 1737093522979
Testing tactic 1 || pow_mul_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ m * a ^ n = a ^ n * a ^ m
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093522980
Testing tactic 2 || pow_mul_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ m * a ^ n = a ^ n * a ^ m
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093522982
Testing tactic 3 || pow_mul_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ m * a ^ n = a ^ n * a ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ m✝ * a✝ ^ n✝ = a✝ ^ n✝ * a✝ ^ m✝ Elapsed time : 12ms

Timestamp : 1737093522996
Testing tactic 4 || pow_mul_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ m * a ^ n = a ^ n * a ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ m✝ * a✝ ^ n✝ = a✝ ^ n✝ * a✝ ^ m✝ Elapsed time : 14ms

Timestamp : 1737093523036
Testing tactic 0 || pow_mul : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ m) ^ n
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ (m✝ * n✝)
is not definitionally equal to the right-hand side
  (a✝ ^ m✝) ^ n✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ m✝) ^ n✝ Elapsed time : 1ms

Timestamp : 1737093523039
Testing tactic 1 || pow_mul : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ m) ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523040
Testing tactic 2 || pow_mul : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ m) ^ n
Result.exception ::
simp_all made no progress
Elapsed time : 2ms

Timestamp : 1737093523042
Testing tactic 3 || pow_mul : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ m) ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ m✝) ^ n✝ Elapsed time : 13ms

Timestamp : 1737093523056
Testing tactic 4 || pow_mul : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ m) ^ n
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ m✝) ^ n✝ Elapsed time : 14ms

Timestamp : 1737093523072
Testing tactic 0 || mul_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = n • m • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (m✝ * n✝) • a✝
is not definitionally equal to the right-hand side
  n✝ • m✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ (m✝ * n✝) • a✝ = n✝ • m✝ • a✝ Elapsed time : 0ms

Timestamp : 1737093523075
Testing tactic 1 || mul_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = n • m • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523077
Testing tactic 2 || mul_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = n • m • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523079
Testing tactic 3 || mul_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = n • m • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ * n✝) • a✝ = n✝ • m✝ • a✝ Elapsed time : 11ms

Timestamp : 1737093523092
Testing tactic 4 || mul_nsmul : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = n • m • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ * n✝) • a✝ = n✝ • m✝ • a✝ Elapsed time : 14ms

Timestamp : 1737093523120
Testing tactic 0 || pow_mul' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ n) ^ m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝ ^ (m✝ * n✝)
is not definitionally equal to the right-hand side
  (a✝ ^ n✝) ^ m✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ n✝) ^ m✝ Elapsed time : 1ms

Timestamp : 1737093523123
Testing tactic 1 || pow_mul' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ n) ^ m
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523124
Testing tactic 2 || pow_mul' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ n) ^ m
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093523127
Testing tactic 3 || pow_mul' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ n) ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ n✝) ^ m✝ Elapsed time : 13ms

Timestamp : 1737093523141
Testing tactic 4 || pow_mul' : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), a ^ (m * n) = (a ^ n) ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ a✝ ^ (m✝ * n✝) = (a✝ ^ n✝) ^ m✝ Elapsed time : 14ms

Timestamp : 1737093523156
Testing tactic 0 || mul_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = m • n • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (m✝ * n✝) • a✝
is not definitionally equal to the right-hand side
  m✝ • n✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ (m✝ * n✝) • a✝ = m✝ • n✝ • a✝ Elapsed time : 0ms

Timestamp : 1737093523160
Testing tactic 1 || mul_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = m • n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523162
Testing tactic 2 || mul_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = m • n • a
Result.subGoals
Elapsed time : 2ms

Timestamp : 1737093523164
Testing tactic 3 || mul_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = m • n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ * n✝) • a✝ = m✝ • n✝ • a✝ Elapsed time : 11ms

Timestamp : 1737093523178
Testing tactic 4 || mul_nsmul' : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), (m * n) • a = m • n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (m✝ * n✝) • a✝ = m✝ • n✝ • a✝ Elapsed time : 14ms

Timestamp : 1737093523206
Testing tactic 0 || nsmul_left_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), n • m • a = m • n • a
Result.exception ::
tactic 'rfl' failed, the left-hand side
  n✝ • m✝ • a✝
is not definitionally equal to the right-hand side
  m✝ • n✝ • a✝
M✝ : Type u_2
inst✝ : AddMonoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ n✝ • m✝ • a✝ = m✝ • n✝ • a✝ Elapsed time : 0ms

Timestamp : 1737093523210
Testing tactic 1 || nsmul_left_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), n • m • a = m • n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523212
Testing tactic 2 || nsmul_left_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), n • m • a = m • n • a
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523213
Testing tactic 3 || nsmul_left_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), n • m • a = m • n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ n✝ • m✝ • a✝ = m✝ • n✝ • a✝ Elapsed time : 11ms

Timestamp : 1737093523227
Testing tactic 4 || nsmul_left_comm : ∀ {M : Type u_2} [inst : AddMonoid M] (a : M) (m n : ℕ), n • m • a = m • n • a
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : AddMonoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ n✝ • m✝ • a✝ = m✝ • n✝ • a✝ Elapsed time : 13ms

Timestamp : 1737093523243
Testing tactic 0 || pow_right_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), (a ^ m) ^ n = (a ^ n) ^ m
Result.exception ::
tactic 'rfl' failed, the left-hand side
  (a✝ ^ m✝) ^ n✝
is not definitionally equal to the right-hand side
  (a✝ ^ n✝) ^ m✝
M✝ : Type u_2
inst✝ : Monoid M✝
a✝ : M✝
m✝ n✝ : ℕ
⊢ (a✝ ^ m✝) ^ n✝ = (a✝ ^ n✝) ^ m✝ Elapsed time : 1ms

Timestamp : 1737093523245
Testing tactic 1 || pow_right_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), (a ^ m) ^ n = (a ^ n) ^ m
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523246
Testing tactic 2 || pow_right_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), (a ^ m) ^ n = (a ^ n) ^ m
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523248
Testing tactic 3 || pow_right_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), (a ^ m) ^ n = (a ^ n) ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (a✝ ^ m✝) ^ n✝ = (a✝ ^ n✝) ^ m✝ Elapsed time : 11ms

Timestamp : 1737093523261
Testing tactic 4 || pow_right_comm : ∀ {M : Type u_2} [inst : Monoid M] (a : M) (m n : ℕ), (a ^ m) ^ n = (a ^ n) ^ m
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_2
  inst✝ : Monoid M✝
  a✝ : M✝
  m✝ n✝ : ℕ
  ⊢ (a✝ ^ m✝) ^ n✝ = (a✝ ^ n✝) ^ m✝ Elapsed time : 12ms

Timestamp : 1737093523365
Testing tactic 0 || AddCancelCommMonoid.toAddCancelMonoid.proof_2 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M] (a b c : M), a + b = c + b → a = c
Result.exception ::
tactic 'rfl' failed, the left-hand side
  a✝¹
is not definitionally equal to the right-hand side
  c✝
M✝ : Type u_1
inst✝ : AddCancelCommMonoid M✝
a✝¹ b✝ c✝ : M✝
a✝ : a✝¹ + b✝ = c✝ + b✝
⊢ a✝¹ = c✝ Elapsed time : 1ms

Timestamp : 1737093523367
Testing tactic 1 || AddCancelCommMonoid.toAddCancelMonoid.proof_2 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M] (a b c : M), a + b = c + b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093523369
Testing tactic 2 || AddCancelCommMonoid.toAddCancelMonoid.proof_2 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M] (a b c : M), a + b = c + b → a = c
Result.exception ::
simp_all made no progress
Elapsed time : 188ms

Timestamp : 1737093523557
Testing tactic 3 || AddCancelCommMonoid.toAddCancelMonoid.proof_2 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M] (a b c : M), a + b = c + b → a = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_1
  inst✝ : AddCancelCommMonoid M✝
  a✝¹ b✝ c✝ : M✝
  a✝ : a✝¹ + b✝ = c✝ + b✝
  ⊢ a✝¹ = c✝ Elapsed time : 14ms

Timestamp : 1737093523572
Testing tactic 4 || AddCancelCommMonoid.toAddCancelMonoid.proof_2 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M] (a b c : M), a + b = c + b → a = c
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_1
  inst✝ : AddCancelCommMonoid M✝
  a✝¹ b✝ c✝ : M✝
  a✝ : a✝¹ + b✝ = c✝ + b✝
  ⊢ a✝¹ = c✝ Elapsed time : 15ms

Timestamp : 1737093523588
Testing tactic 0 || AddCancelCommMonoid.toAddCancelMonoid.proof_1 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M], IsRightCancelAdd M
Result.exception ::
tactic 'rfl' failed, the left-hand side
  M✝
is not definitionally equal to the right-hand side
  AddCommMagma.toAdd
M✝ : Type u_1
inst✝ : AddCancelCommMonoid M✝
⊢ IsRightCancelAdd M✝ Elapsed time : 0ms

Timestamp : 1737093523589
Testing tactic 1 || AddCancelCommMonoid.toAddCancelMonoid.proof_1 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M], IsRightCancelAdd M
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093523590
Testing tactic 2 || AddCancelCommMonoid.toAddCancelMonoid.proof_1 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M], IsRightCancelAdd M
Result.success
Elapsed time : 2ms

Timestamp : 1737093523592
Testing tactic 3 || AddCancelCommMonoid.toAddCancelMonoid.proof_1 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M], IsRightCancelAdd M
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u_1
  inst✝ : AddCancelCommMonoid M✝
  ⊢ IsRightCancelAdd M✝ Elapsed time : 10ms

Timestamp : 1737093523602
Testing tactic 4 || AddCancelCommMonoid.toAddCancelMonoid.proof_1 : ∀ (M : Type u_1) [inst : AddCancelCommMonoid M], IsRightCancelAdd M
Result.success
Elapsed time : 13ms

Timestamp : 1737093523628
Testing tactic 0 || CancelMonoid.toIsCancelMul : ∀ (M : Type u) [inst : CancelMonoid M], IsCancelMul M
Result.exception ::
tactic 'rfl' failed, the left-hand side
  M✝
is not definitionally equal to the right-hand side
  MulOneClass.toMul
M✝ : Type u
inst✝ : CancelMonoid M✝
⊢ IsCancelMul M✝ Elapsed time : 0ms

Timestamp : 1737093523629
Testing tactic 1 || CancelMonoid.toIsCancelMul : ∀ (M : Type u) [inst : CancelMonoid M], IsCancelMul M
Result.exception ::
simp_all made no progress
Elapsed time : 0ms

Timestamp : 1737093523630
Testing tactic 2 || CancelMonoid.toIsCancelMul : ∀ (M : Type u) [inst : CancelMonoid M], IsCancelMul M
Result.exception ::
tactic 'simp' failed, nested error:
(deterministic) timeout at `simp`, maximum number of heartbeats (65536) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
Elapsed time : 2057ms

Timestamp : 1737093525687
Testing tactic 3 || CancelMonoid.toIsCancelMul : ∀ (M : Type u) [inst : CancelMonoid M], IsCancelMul M
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : CancelMonoid M✝
  ⊢ IsCancelMul M✝ Elapsed time : 12ms

Timestamp : 1737093525699
Testing tactic 4 || CancelMonoid.toIsCancelMul : ∀ (M : Type u) [inst : CancelMonoid M], IsCancelMul M
Result.exception ::
tactic 'aesop' failed, made no progress
Initial goal:
  M✝ : Type u
  inst✝ : CancelMonoid M✝
  ⊢ IsCancelMul M✝ Elapsed time : 12ms

Timestamp : 1737093525711
Testing tactic 0 || AddCancelMonoid.toIsCancelAdd : ∀ (M : Type u) [inst : AddCancelMonoid M], IsCancelAdd M
Result.exception ::
tactic 'rfl' failed, the left-hand side
  M✝
is not definitionally equal to the right-hand side
  AddZeroClass.toAdd
M✝ : Type u
inst✝ : AddCancelMonoid M✝
⊢ IsCancelAdd M✝ Elapsed time : 1ms

Timestamp : 1737093525712
Testing tactic 1 || AddCancelMonoid.toIsCancelAdd : ∀ (M : Type u) [inst : AddCancelMonoid M], IsCancelAdd M
Result.exception ::
simp_all made no progress
Elapsed time : 1ms

Timestamp : 1737093525712
Testing tactic 2 || AddCancelMonoid.toIsCancelAdd : ∀ (M : Type u) [inst : AddCancelMonoid M], IsCancelAdd M
